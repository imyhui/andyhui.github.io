{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/DASHENG-900x700-1.png","path":"images/DASHENG-900x700-1.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/click.js","path":"js/src/click.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/DASHENG-900x700-2.png","path":"images/DASHENG-900x700-2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/DASHENG-900x700-4.png","path":"images/DASHENG-900x700-4.png","modified":0,"renderable":0},{"_id":"source/images/DASHENG-900x700-3.png","path":"images/DASHENG-900x700-3.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/hexo-admin-ehc-images.json","hash":"0d165d7223eabfe5ebab834a5d89c8cb9731b5ff","modified":1551685452000},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1503450622000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1503450622000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1503450622000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1503450622000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1503450622000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1503450622000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1503450622000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1503450622000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1503450622000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1503450622000},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1503450622000},{"_id":"themes/next/README.md","hash":"f2ce8c3e866e511cdcf673271b1daf831dbac6d8","modified":1503450622000},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1503450622000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1503450622000},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1503450622000},{"_id":"source/_drafts/new-draft.md","hash":"1d038370e37202681fd3293f0324c492e76f34ec","modified":1551685452000},{"_id":"source/_posts/1stoftterm.md","hash":"7098464c6e1694e67a5412db26eccc0bdb661464","modified":1551699686000},{"_id":"source/_posts/CI-持续集成.md","hash":"b4104c3236f180c598987c49618ed39a37228d40","modified":1551715664000},{"_id":"source/_posts/LearningPath.md","hash":"a18fbad2d4a7d319f35a374d44e3d89625912d65","modified":1551690479000},{"_id":"source/_posts/LeetCode 两数之和.md","hash":"72e97a1fec86d36696e01dfa18cb9677acb47c31","modified":1551882599000},{"_id":"source/_posts/My-New-Post.md","hash":"21fc5ee75ec62e3be9621dddd1805f96475c3398","modified":1551690480000},{"_id":"source/_posts/first-try.md","hash":"b4c3ea54f484842f9eb0412316ff172c2714384b","modified":1551690773000},{"_id":"source/_posts/gitfirstuse.md","hash":"80e6e09edcdabe78517c56de5ecbfbe3c7bcf8a6","modified":1551690773000},{"_id":"source/_posts/hello-world.md","hash":"eb34301e06cc555e03f1fff56819293f92d595e6","modified":1551690477000},{"_id":"themes/next/_config.yml","hash":"0986004f4499c4f141e2af37f3034f9e9b566b56","modified":1551798934000},{"_id":"source/_posts/qsbkspider.md","hash":"c6c209728eca321407b24001f4bc652c5262e8b3","modified":1551690482000},{"_id":"source/about/index.md","hash":"93e1e2c4e0b09dab2d22b1caab108cf3f1d13b33","modified":1551685452000},{"_id":"source/categories/index.md","hash":"21bc6b602972eb9372cb804082742d004841e3c5","modified":1551685452000},{"_id":"source/_posts/LaradockInstall.md","hash":"7b06c1b20a593495084ea5bda228521db4cc7243","modified":1551697254000},{"_id":"source/_posts/oj信息爬取.md","hash":"de437efbbeb0dd13de0948c778729a1152ea20e4","modified":1551690775000},{"_id":"source/_drafts/twopm.md","hash":"fa78acc369985afa055f82d0a3ee5b5d501983c6","modified":1551690771000},{"_id":"source/tags/index.md","hash":"37bfe658899fd28942416df109b68f99179ec057","modified":1551685452000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"c2ebf90a9e8da9ecbb2b5284a1cb2c33310c00eb","modified":1503450622000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1503450622000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1503450622000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2f788b6ee043237d0fab4987579e2484ebb7a862","modified":1503450622000},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1503450622000},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503450622000},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1503450622000},{"_id":"themes/next/languages/en.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503450622000},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1503450622000},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1503450622000},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1503450622000},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1503450622000},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1503450622000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"7fcf5603c7c9c6719315ea3194df00180b5fc21a","modified":1507021020000},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1503450622000},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1503450622000},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1503450622000},{"_id":"themes/next/layout/_layout.swig","hash":"a1f427f39a56e6c145f8865b84ef4d1a9cae2019","modified":1507019440000},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1503450622000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1503450622000},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1503450622000},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1503450622000},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1503450622000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1503450622000},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1503450622000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1503450622000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1503450622000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1503450622000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1503450622000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1503450622000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503450622000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503450622000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1503450622000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1503450622000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1503450622000},{"_id":"themes/next/layout/_macro/post.swig","hash":"eaf98ee2e19010767cf75acc7a2c1d0da9ddbffa","modified":1507020954000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b53c392dc46f489790c2ae46d23daa3c2c854ffb","modified":1503450622000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1503450622000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4306c861557e004ccbc434347151db036be814e6","modified":1505498588000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1503450622000},{"_id":"themes/next/layout/_partials/header.swig","hash":"fa4bd511c967b97c829a10eb7d5f87ad7da2aa5d","modified":1503450622000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f4e215ef65819621c7fe322e259fcc49601f1f1c","modified":1503450622000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1503450622000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1503450622000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1503450622000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1503450622000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1503450622000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1503450622000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1503450622000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1503450622000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1503450622000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1503450622000},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1503450622000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1503450622000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1503450622000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1503450622000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1503450622000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1503450622000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1503450622000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1503450622000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1503450622000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1503450622000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1503450622000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1503450622000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503450622000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503450622000},{"_id":"themes/next/source/images/avatar.jpg","hash":"9644231bcb9935293fde07062584779c06dd7d67","modified":1503458920000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503450622000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503450622000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503450622000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503450622000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503450622000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503450622000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503450622000},{"_id":"themes/next/source/images/favicon.ico","hash":"a60cf4045f92ae0db6e1a8b8b3087c5afe61ee8a","modified":1503909212000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503450622000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503450622000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503450622000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503450622000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503450622000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503450622000},{"_id":"source/images/DASHENG-900x700-1.png","hash":"8f275ab03560b758667ea8fbe2a32683d39840de","modified":1551685452000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1503450622000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1503450622000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1503450622000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1503450622000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1503450622000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1503450622000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1503450622000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1503450622000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1503450622000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1503450622000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503450622000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1503450622000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1503450622000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1503450622000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1503450622000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1503450622000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1503450622000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1503450622000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"e599b7e30e9be453bbac8695e926d562cf6983d2","modified":1507020656000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1503450622000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1503450622000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1503450622000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1503450622000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1503450622000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1503450622000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"934edcba153ab50441ceb8df16cfc4103a03a486","modified":1506015642000},{"_id":"themes/next/source/images/background.jpg","hash":"2ab6370facb77b09d0d1b84d1e4374ba2dd06d97","modified":1503914572000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1503450622000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1503450622000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1503450622000},{"_id":"themes/next/source/js/src/click.js","hash":"bea8656ff9857228c6be93a2b620493f00958487","modified":1507018852000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1503450622000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1503450622000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1503450622000},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1503450622000},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1503450622000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1503450622000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1503450622000},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1503450622000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503450622000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1503450622000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1503450622000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1503450622000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503450622000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1503450622000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1503450622000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1503450622000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1503450622000},{"_id":"source/images/DASHENG-900x700-2.png","hash":"a483686830d76d8c820c3a6f83ad6efaccbc48c1","modified":1551685452000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1503450622000},{"_id":"source/images/DASHENG-900x700-4.png","hash":"84179d4eb90ec12b2498bdd0f08982e86d5b1511","modified":1551685452000},{"_id":"source/images/DASHENG-900x700-3.png","hash":"c7da56072a60e52e3e8f2a8407859f47f69e0055","modified":1551685452000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1503450622000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1503450622000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"be4e44ab7b407c379cdba56fd5595a273c578598","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1503450622000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1503450622000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1503450622000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1503450622000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1503450622000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503450622000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1503897280000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"f56f5478362384af0d868d6c1ff701ec77e097f7","modified":1503912968000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"d256461a1d807cfd7cc37fb2abe8ae946aa9f2d4","modified":1503910058000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0746b89c15c99888cf084d23f1bb4524b56a8445","modified":1507019692000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"881d6612a461d1d29284c75033b60b2cc62b11d9","modified":1507020294000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1503450622000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1503450622000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503450622000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1503450622000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503450622000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1503450622000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503450622000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1503450622000},{"_id":"source/_drafts/Python-练习册，每天一个小程序.md","hash":"1b1509ecd5a1c4852264fd4886218967f02db4d5","modified":1551885912000},{"_id":"source/_posts/Python-练习册，每天一个小程序.md","hash":"cab57d245b281a3737f9468b2b254db1b7136fd1","modified":1551888129000},{"_id":"source/_drafts/剑指Offer03-数组中重复的数字.md","hash":"94f58c8f6e6ded309a95240af6de7b4db589d321","modified":1551974217000},{"_id":"source/_posts/剑指Offer03-数组中重复的数字.md","hash":"7a45c3dbf18206a8fdf4254d6bb54a69da793e64","modified":1551974267000}],"Category":[{"name":"hexo","_id":"cjsxaqvug0005mqfyl3q25z5j"},{"name":"个人","_id":"cjsxaqvun000amqfyrb29ndnb"},{"name":"devops","_id":"cjsxaqvuq000fmqfy7ew6w55y"},{"name":"后端学习","_id":"cjsxaqvut000lmqfyyjiete36"},{"name":"leetcode","_id":"cjsxaqvuy000smqfyxe29ih2k"},{"name":"C++","_id":"cjsxaqvv1000zmqfy8jzx49fb"},{"name":"Markdown","_id":"cjsxaqvv20015mqfyfrwkcn9n"},{"name":"Hexo","_id":"cjsxaqvv4001amqfyeoz93q78"},{"name":"git","_id":"cjsxaqvv5001dmqfyppz5r622"},{"name":"python","_id":"cjsxaqvv7001imqfy1c56yt00"},{"name":"日记","_id":"cjsxaqvv9001pmqfym5g5fej7"},{"name":"剑指Offer","_id":"cjsytcb8l0002rnfyxeoie6sh"}],"Data":[],"Page":[{"_content":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","source":"hexo-admin-ehc-images.json","raw":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","date":"2019-03-04T07:44:12.000Z","updated":"2019-03-04T07:44:12.000Z","path":"hexo-admin-ehc-images.json","layout":"false","title":"","comments":1,"_id":"cjsxaqvqy0000mqfysqgsrg0v","content":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]","site":{"data":{}},"excerpt":"","more":"[{\"name\":\"DASHENG-900x700-1.png\",\"date\":1518959551960},{\"name\":\"DASHENG-900x700-2.png\",\"date\":1518959599098},{\"name\":\"DASHENG-900x700-3.png\",\"date\":1518959609913},{\"name\":\"DASHENG-900x700-4.png\",\"date\":1518959618105}]"},{"title":"about","date":"2017-08-25T00:41:36.000Z","_content":"\n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">About</h3>\n    <div class=\"widget\">\n      邮箱：1359158019@qq.com<br />\n    </div>\n  </div>\n\n# 此页面还在建设中\n```\nprinf(\"Waiting···········\");\n\n```","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-08-25 08:41:36\n---\n\n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">About</h3>\n    <div class=\"widget\">\n      邮箱：1359158019@qq.com<br />\n    </div>\n  </div>\n\n# 此页面还在建设中\n```\nprinf(\"Waiting···········\");\n\n```","updated":"2019-03-04T07:44:12.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjsxaqvud0002mqfyl7pmjzua","content":"  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">About</h3>\n    <div class=\"widget\">\n      邮箱：1359158019@qq.com<br>\n    </div>\n  </div>\n\n<h1 id=\"此页面还在建设中\"><a href=\"#此页面还在建设中\" class=\"headerlink\" title=\"此页面还在建设中\"></a>此页面还在建设中</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prinf(&quot;Waiting···········&quot;);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">About</h3>\n    <div class=\"widget\">\n      邮箱：1359158019@qq.com<br>\n    </div>\n  </div>\n\n<h1 id=\"此页面还在建设中\"><a href=\"#此页面还在建设中\" class=\"headerlink\" title=\"此页面还在建设中\"></a>此页面还在建设中</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">prinf(&quot;Waiting···········&quot;);</div></pre></td></tr></table></figure>"},{"title":"分类","date":"2017-08-27T02:19:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-27 10:19:34\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-03-04T07:44:12.000Z","path":"categories/index.html","layout":"page","_id":"cjsxaqvuf0004mqfyxuakw0p7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-08-27T02:01:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-27 10:01:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-03-04T07:44:12.000Z","path":"tags/index.html","layout":"page","_id":"cjsxaqw0x002qmqfy5jl030qh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"page","title":"new draft","date":"2017-08-25T00:19:08.000Z","updated":"2017-08-25T00:22:03.000Z","comments":0,"render_drafts":false,"_content":"\n","source":"_drafts/new-draft.md","raw":"---\nlayout: page\n#文章属性 \tpost或page\n#如果你修改了layout，在scaffolds文件夹里一定要有名字对应的模版文件，否则会采用默认模版。\ntitle: new draft\n#文章的标题\ndate: 2017-08-25 08:19:08\n#创建日期\nupdated: 2017-08-25 08:22:03\n#修改时间\ncomments: false\n#是否开启评论 默认:true\ntags:\n- Hexo\n- Markdown\n- node.js\n- git\n#标签\ncategories:\n- hexo\n#分类\n#permalink:\n#url中的名字 默认:文件名\nrender_drafts: false\n#预览草稿\n#hexo publish [layout] <filename> 草稿变成文章/页面\n---\n\n","slug":"new-draft","published":0,"photos":[],"link":"","_id":"cjsxaqvua0001mqfyq03i632r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"新的开始","author":"imyhui","date":"2019-03-04T08:22:00.000Z","_content":"2019年3月4日，大三下新学期开始的第一天\n\n又重新把远古的hexo博客重新在黑苹果上，记得上次折腾博客还是在大一下的那个暑假，那时还在搞算法，正值暑期培训，开学就面临着学习算法还是开发的抉择。\n<!-- more -->\n\n人生的好多选择都在不经意间，一方面觉得自己高中没参加过算法竞赛，可能基础落后一些，另一方面经过几次集训联赛，已经彻底对算法失去了信心，学习算法的确有些枯燥，整日面向输入输出编程，屏幕里只有黑框框，也正是这样，走上了web开发这条道路。(有时候会对自己做过的选择有些后悔，但转念一想，是之前的所有选择造就了现在的我，在特定时间点上，对于那个时候的我来说，选项可能本来就只有一个）。\n\n两次多校联赛后，连签到题都不想看了，那时对于web开发的理解，仅止于开发网站，不知道前后端是干啥的，稀里糊涂的就开始了后端开发这条路（虽然最初的一些工作并不是后端的），看别人的教程，说先从搭建一个博客开始，于是我开始了对hexo的折腾。那时候经常翻别人的博客，看到有意思的便查实现，然后照搬到自己的博客上，最终的作品在那时看来还是有模有样的(现在看来我确实不适合做前端）。\n\n大二上开学后，留部答辩，拿着我的hexo博客已经几个入门级的爬虫参加了面试，那时的我还沾沾自喜，觉得自己学到了不少东西，面试结束后，敲响了一记警钟，时刻要保持虔诚，不要因为看到了这个行业的一点就自以为窥一斑而见全豹，犹记得我告诉下一届学弟学妹，搭建博客不在搭建美化的过程，而在于你的记录，勤于写博客才是搭建博客的真正意义，然而，我自己都没有做到......\n\n---\n\n现在，已经是大三下学期了，上届的学长们在这个时候，早已经出去实习了，自己相较于那时的他们，还是太菜了，固守于旧知识，没有任何计划，盲目的去学习，可能是那段时间最真实的写照，不要看到什么都想要去了解一下，仅仅是为了增加谈资的学习，真的是不值得。找准目标，有目的有计划的学习，是今后努力的方向。\n\n寒假对面试做了一部分准备，相较于持续不断的学习，考前突击这样的填鸭式灌输一点效果都没有，经过一次面试，也对整个流程有了更深入的了解，同时，也对自己的水平有了正确的认识，面试，不能抱着答上来就万事大吉了，面试是对自己的知识水平的考察，准备面试的过程，也是知识积累的过程，固然面试难度不同以往，但只要自身实力过硬，是不会愁没有伯乐的。\n\n寒假时，看到别人拿到offer，已经走入实习岗位，多少还是有些焦虑的，觉得自己落后了好多，甚至一度觉得自己不适合开发，不如去考研逃避一下，后来渐渐释然了，不一定要刻意的去走别人的道路，那只是正确道路的一条，并不一定适合自己，自己做出的选择，要对自己负责，人生没有SL，能做的只是谨慎对待每次选择。\n\n重新启用这个博客，博客的样式也不在那么华丽，换了一个简约的风格，可能这样更适合自己，洗尽铅华，归于平淡，谨以此博客记录接下来的学习历程。","source":"_posts/1stoftterm.md","raw":"title: 新的开始\ntags: []\ncategories:\n  - 个人\nauthor: imyhui\ndate: 2019-03-04 16:22:00\n---\n2019年3月4日，大三下新学期开始的第一天\n\n又重新把远古的hexo博客重新在黑苹果上，记得上次折腾博客还是在大一下的那个暑假，那时还在搞算法，正值暑期培训，开学就面临着学习算法还是开发的抉择。\n<!-- more -->\n\n人生的好多选择都在不经意间，一方面觉得自己高中没参加过算法竞赛，可能基础落后一些，另一方面经过几次集训联赛，已经彻底对算法失去了信心，学习算法的确有些枯燥，整日面向输入输出编程，屏幕里只有黑框框，也正是这样，走上了web开发这条道路。(有时候会对自己做过的选择有些后悔，但转念一想，是之前的所有选择造就了现在的我，在特定时间点上，对于那个时候的我来说，选项可能本来就只有一个）。\n\n两次多校联赛后，连签到题都不想看了，那时对于web开发的理解，仅止于开发网站，不知道前后端是干啥的，稀里糊涂的就开始了后端开发这条路（虽然最初的一些工作并不是后端的），看别人的教程，说先从搭建一个博客开始，于是我开始了对hexo的折腾。那时候经常翻别人的博客，看到有意思的便查实现，然后照搬到自己的博客上，最终的作品在那时看来还是有模有样的(现在看来我确实不适合做前端）。\n\n大二上开学后，留部答辩，拿着我的hexo博客已经几个入门级的爬虫参加了面试，那时的我还沾沾自喜，觉得自己学到了不少东西，面试结束后，敲响了一记警钟，时刻要保持虔诚，不要因为看到了这个行业的一点就自以为窥一斑而见全豹，犹记得我告诉下一届学弟学妹，搭建博客不在搭建美化的过程，而在于你的记录，勤于写博客才是搭建博客的真正意义，然而，我自己都没有做到......\n\n---\n\n现在，已经是大三下学期了，上届的学长们在这个时候，早已经出去实习了，自己相较于那时的他们，还是太菜了，固守于旧知识，没有任何计划，盲目的去学习，可能是那段时间最真实的写照，不要看到什么都想要去了解一下，仅仅是为了增加谈资的学习，真的是不值得。找准目标，有目的有计划的学习，是今后努力的方向。\n\n寒假对面试做了一部分准备，相较于持续不断的学习，考前突击这样的填鸭式灌输一点效果都没有，经过一次面试，也对整个流程有了更深入的了解，同时，也对自己的水平有了正确的认识，面试，不能抱着答上来就万事大吉了，面试是对自己的知识水平的考察，准备面试的过程，也是知识积累的过程，固然面试难度不同以往，但只要自身实力过硬，是不会愁没有伯乐的。\n\n寒假时，看到别人拿到offer，已经走入实习岗位，多少还是有些焦虑的，觉得自己落后了好多，甚至一度觉得自己不适合开发，不如去考研逃避一下，后来渐渐释然了，不一定要刻意的去走别人的道路，那只是正确道路的一条，并不一定适合自己，自己做出的选择，要对自己负责，人生没有SL，能做的只是谨慎对待每次选择。\n\n重新启用这个博客，博客的样式也不在那么华丽，换了一个简约的风格，可能这样更适合自己，洗尽铅华，归于平淡，谨以此博客记录接下来的学习历程。","slug":"1stoftterm","published":1,"updated":"2019-03-04T11:41:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvue0003mqfy6x4tgu57","content":"<p>2019年3月4日，大三下新学期开始的第一天</p>\n<p>又重新把远古的hexo博客重新在黑苹果上，记得上次折腾博客还是在大一下的那个暑假，那时还在搞算法，正值暑期培训，开学就面临着学习算法还是开发的抉择。<br><a id=\"more\"></a></p>\n<p>人生的好多选择都在不经意间，一方面觉得自己高中没参加过算法竞赛，可能基础落后一些，另一方面经过几次集训联赛，已经彻底对算法失去了信心，学习算法的确有些枯燥，整日面向输入输出编程，屏幕里只有黑框框，也正是这样，走上了web开发这条道路。(有时候会对自己做过的选择有些后悔，但转念一想，是之前的所有选择造就了现在的我，在特定时间点上，对于那个时候的我来说，选项可能本来就只有一个）。</p>\n<p>两次多校联赛后，连签到题都不想看了，那时对于web开发的理解，仅止于开发网站，不知道前后端是干啥的，稀里糊涂的就开始了后端开发这条路（虽然最初的一些工作并不是后端的），看别人的教程，说先从搭建一个博客开始，于是我开始了对hexo的折腾。那时候经常翻别人的博客，看到有意思的便查实现，然后照搬到自己的博客上，最终的作品在那时看来还是有模有样的(现在看来我确实不适合做前端）。</p>\n<p>大二上开学后，留部答辩，拿着我的hexo博客已经几个入门级的爬虫参加了面试，那时的我还沾沾自喜，觉得自己学到了不少东西，面试结束后，敲响了一记警钟，时刻要保持虔诚，不要因为看到了这个行业的一点就自以为窥一斑而见全豹，犹记得我告诉下一届学弟学妹，搭建博客不在搭建美化的过程，而在于你的记录，勤于写博客才是搭建博客的真正意义，然而，我自己都没有做到……</p>\n<hr>\n<p>现在，已经是大三下学期了，上届的学长们在这个时候，早已经出去实习了，自己相较于那时的他们，还是太菜了，固守于旧知识，没有任何计划，盲目的去学习，可能是那段时间最真实的写照，不要看到什么都想要去了解一下，仅仅是为了增加谈资的学习，真的是不值得。找准目标，有目的有计划的学习，是今后努力的方向。</p>\n<p>寒假对面试做了一部分准备，相较于持续不断的学习，考前突击这样的填鸭式灌输一点效果都没有，经过一次面试，也对整个流程有了更深入的了解，同时，也对自己的水平有了正确的认识，面试，不能抱着答上来就万事大吉了，面试是对自己的知识水平的考察，准备面试的过程，也是知识积累的过程，固然面试难度不同以往，但只要自身实力过硬，是不会愁没有伯乐的。</p>\n<p>寒假时，看到别人拿到offer，已经走入实习岗位，多少还是有些焦虑的，觉得自己落后了好多，甚至一度觉得自己不适合开发，不如去考研逃避一下，后来渐渐释然了，不一定要刻意的去走别人的道路，那只是正确道路的一条，并不一定适合自己，自己做出的选择，要对自己负责，人生没有SL，能做的只是谨慎对待每次选择。</p>\n<p>重新启用这个博客，博客的样式也不在那么华丽，换了一个简约的风格，可能这样更适合自己，洗尽铅华，归于平淡，谨以此博客记录接下来的学习历程。</p>\n","site":{"data":{}},"excerpt":"<p>2019年3月4日，大三下新学期开始的第一天</p>\n<p>又重新把远古的hexo博客重新在黑苹果上，记得上次折腾博客还是在大一下的那个暑假，那时还在搞算法，正值暑期培训，开学就面临着学习算法还是开发的抉择。<br>","more":"</p>\n<p>人生的好多选择都在不经意间，一方面觉得自己高中没参加过算法竞赛，可能基础落后一些，另一方面经过几次集训联赛，已经彻底对算法失去了信心，学习算法的确有些枯燥，整日面向输入输出编程，屏幕里只有黑框框，也正是这样，走上了web开发这条道路。(有时候会对自己做过的选择有些后悔，但转念一想，是之前的所有选择造就了现在的我，在特定时间点上，对于那个时候的我来说，选项可能本来就只有一个）。</p>\n<p>两次多校联赛后，连签到题都不想看了，那时对于web开发的理解，仅止于开发网站，不知道前后端是干啥的，稀里糊涂的就开始了后端开发这条路（虽然最初的一些工作并不是后端的），看别人的教程，说先从搭建一个博客开始，于是我开始了对hexo的折腾。那时候经常翻别人的博客，看到有意思的便查实现，然后照搬到自己的博客上，最终的作品在那时看来还是有模有样的(现在看来我确实不适合做前端）。</p>\n<p>大二上开学后，留部答辩，拿着我的hexo博客已经几个入门级的爬虫参加了面试，那时的我还沾沾自喜，觉得自己学到了不少东西，面试结束后，敲响了一记警钟，时刻要保持虔诚，不要因为看到了这个行业的一点就自以为窥一斑而见全豹，犹记得我告诉下一届学弟学妹，搭建博客不在搭建美化的过程，而在于你的记录，勤于写博客才是搭建博客的真正意义，然而，我自己都没有做到……</p>\n<hr>\n<p>现在，已经是大三下学期了，上届的学长们在这个时候，早已经出去实习了，自己相较于那时的他们，还是太菜了，固守于旧知识，没有任何计划，盲目的去学习，可能是那段时间最真实的写照，不要看到什么都想要去了解一下，仅仅是为了增加谈资的学习，真的是不值得。找准目标，有目的有计划的学习，是今后努力的方向。</p>\n<p>寒假对面试做了一部分准备，相较于持续不断的学习，考前突击这样的填鸭式灌输一点效果都没有，经过一次面试，也对整个流程有了更深入的了解，同时，也对自己的水平有了正确的认识，面试，不能抱着答上来就万事大吉了，面试是对自己的知识水平的考察，准备面试的过程，也是知识积累的过程，固然面试难度不同以往，但只要自身实力过硬，是不会愁没有伯乐的。</p>\n<p>寒假时，看到别人拿到offer，已经走入实习岗位，多少还是有些焦虑的，觉得自己落后了好多，甚至一度觉得自己不适合开发，不如去考研逃避一下，后来渐渐释然了，不一定要刻意的去走别人的道路，那只是正确道路的一条，并不一定适合自己，自己做出的选择，要对自己负责，人生没有SL，能做的只是谨慎对待每次选择。</p>\n<p>重新启用这个博客，博客的样式也不在那么华丽，换了一个简约的风格，可能这样更适合自己，洗尽铅华，归于平淡，谨以此博客记录接下来的学习历程。</p>"},{"title":"CI 持续集成","author":"andyhui","date":"2019-03-04T11:45:00.000Z","_content":"之前废弃Hexo时，觉得hexo比较麻烦，每次都要执行\n```\nhexo clean\nhexo deploy\nhexo generate\n```\n，才能推到线上，虽然有人把命令简化了一下\n```\nhexo clean && hexo d -g\n```\n一行就能搞定，但我还是觉得命令太长，每次复制太麻烦，于是发现了持续集成工具[`travis-ci`](https://www.travis-ci.org/)，因此顺便了解一下持续集成。\n<!-- more -->\n\n## 什么是持续集成？\n> 持续集成（英语：Continuous integration，缩写 CI）是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n也就是说，上面的命令可以通过持续集成工具自动化执行，这样每次我们对博客做出的修改，只需提交`commit`后，推送到`github`，持续集成工具自动在线构建博客并部署到`GitHub Pages`,简化了博客发布流程。\n\n下面是几张图片描述下持续集成、持续交付和持续部署\n### 持续集成\n![持续集成流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Continuous%20Integration.jpeg)\n> 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。\n\n### 持续交付\n![持续交付流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20Continuous%20Delivery.jpeg)\n> 持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。\n\n### 持续部署\n![持续部署流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%20Continuous%20Deployment.jpeg)\n> 持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。\n\n\n## 关于Hexo的一次持续集成实践\n\n> 详细流程见[这里](https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E6%B3%A8%E5%86%8C-travis-ci-%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%BB%91%E5%AE%9A-github-%E8%B4%A6%E6%88%B7)\n\n写下对于这个的一些补充\n1. 对于博客源文件，最好添加**`.gitignore`**,忽略掉`node_modules`，依赖文件太大，影响上传速度。\n2. 仓库必须Public,私有仓库既不能通过name.github.io访问，也不能完成CI\n3. 对于主题文件，如果有`.git`文件可能会造成git add失败，如果主题不打算更新可删掉主题文件内的`.git`文件夹\n\n## 下一步计划\n- 学习主流CI工具，如[`Jenkins`](https://juejin.im/entry/565fbc6c60b215d646403d33)\n- [基于Docker的CI平台实践](https://juejin.im/entry/5a2a269df265da43052e8878)\n\n\n## 参考文档\n[EasyHexo 持续集成Continuous Integration\n](https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9F)\n\n[致产品经理： 持续集成、持续交付、持续部署和DevOps\n](https://blog.csdn.net/jjm1437/article/details/71601450)\n[如何理解持续集成、持续交付、持续部署？\n](https://www.zhihu.com/question/23444990)\n## 推荐阅读\n[微服务化的基石——持续集成\n](https://zhuanlan.zhihu.com/p/33206437)","source":"_posts/CI-持续集成.md","raw":"title: CI 持续集成\nauthor: andyhui\ntags:\n  - CI\n  - devops\ncategories:\n  - devops\npermalink: Continuous_Integration\ndate: 2019-03-04 19:45:00\n---\n之前废弃Hexo时，觉得hexo比较麻烦，每次都要执行\n```\nhexo clean\nhexo deploy\nhexo generate\n```\n，才能推到线上，虽然有人把命令简化了一下\n```\nhexo clean && hexo d -g\n```\n一行就能搞定，但我还是觉得命令太长，每次复制太麻烦，于是发现了持续集成工具[`travis-ci`](https://www.travis-ci.org/)，因此顺便了解一下持续集成。\n<!-- more -->\n\n## 什么是持续集成？\n> 持续集成（英语：Continuous integration，缩写 CI）是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。\n\n也就是说，上面的命令可以通过持续集成工具自动化执行，这样每次我们对博客做出的修改，只需提交`commit`后，推送到`github`，持续集成工具自动在线构建博客并部署到`GitHub Pages`,简化了博客发布流程。\n\n下面是几张图片描述下持续集成、持续交付和持续部署\n### 持续集成\n![持续集成流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Continuous%20Integration.jpeg)\n> 持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。\n\n### 持续交付\n![持续交付流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20Continuous%20Delivery.jpeg)\n> 持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。\n\n### 持续部署\n![持续部署流程](http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%20Continuous%20Deployment.jpeg)\n> 持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。\n\n\n## 关于Hexo的一次持续集成实践\n\n> 详细流程见[这里](https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E6%B3%A8%E5%86%8C-travis-ci-%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%BB%91%E5%AE%9A-github-%E8%B4%A6%E6%88%B7)\n\n写下对于这个的一些补充\n1. 对于博客源文件，最好添加**`.gitignore`**,忽略掉`node_modules`，依赖文件太大，影响上传速度。\n2. 仓库必须Public,私有仓库既不能通过name.github.io访问，也不能完成CI\n3. 对于主题文件，如果有`.git`文件可能会造成git add失败，如果主题不打算更新可删掉主题文件内的`.git`文件夹\n\n## 下一步计划\n- 学习主流CI工具，如[`Jenkins`](https://juejin.im/entry/565fbc6c60b215d646403d33)\n- [基于Docker的CI平台实践](https://juejin.im/entry/5a2a269df265da43052e8878)\n\n\n## 参考文档\n[EasyHexo 持续集成Continuous Integration\n](https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9F)\n\n[致产品经理： 持续集成、持续交付、持续部署和DevOps\n](https://blog.csdn.net/jjm1437/article/details/71601450)\n[如何理解持续集成、持续交付、持续部署？\n](https://www.zhihu.com/question/23444990)\n## 推荐阅读\n[微服务化的基石——持续集成\n](https://zhuanlan.zhihu.com/p/33206437)","slug":"Continuous_Integration","published":1,"updated":"2019-03-04T16:07:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvui0007mqfy4zekzm34","content":"<p>之前废弃Hexo时，觉得hexo比较麻烦，每次都要执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo deploy</div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure></p>\n<p>，才能推到线上，虽然有人把命令简化了一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo d -g</div></pre></td></tr></table></figure></p>\n<p>一行就能搞定，但我还是觉得命令太长，每次复制太麻烦，于是发现了持续集成工具<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"external\"><code>travis-ci</code></a>，因此顺便了解一下持续集成。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是持续集成？\"><a href=\"#什么是持续集成？\" class=\"headerlink\" title=\"什么是持续集成？\"></a>什么是持续集成？</h2><blockquote>\n<p>持续集成（英语：Continuous integration，缩写 CI）是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<p>也就是说，上面的命令可以通过持续集成工具自动化执行，这样每次我们对博客做出的修改，只需提交<code>commit</code>后，推送到<code>github</code>，持续集成工具自动在线构建博客并部署到<code>GitHub Pages</code>,简化了博客发布流程。</p>\n<p>下面是几张图片描述下持续集成、持续交付和持续部署</p>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Continuous%20Integration.jpeg\" alt=\"持续集成流程\"></p>\n<blockquote>\n<p>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p>\n</blockquote>\n<h3 id=\"持续交付\"><a href=\"#持续交付\" class=\"headerlink\" title=\"持续交付\"></a>持续交付</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20Continuous%20Delivery.jpeg\" alt=\"持续交付流程\"></p>\n<blockquote>\n<p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p>\n</blockquote>\n<h3 id=\"持续部署\"><a href=\"#持续部署\" class=\"headerlink\" title=\"持续部署\"></a>持续部署</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%20Continuous%20Deployment.jpeg\" alt=\"持续部署流程\"></p>\n<blockquote>\n<p>持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。</p>\n</blockquote>\n<h2 id=\"关于Hexo的一次持续集成实践\"><a href=\"#关于Hexo的一次持续集成实践\" class=\"headerlink\" title=\"关于Hexo的一次持续集成实践\"></a>关于Hexo的一次持续集成实践</h2><blockquote>\n<p>详细流程见<a href=\"https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E6%B3%A8%E5%86%8C-travis-ci-%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%BB%91%E5%AE%9A-github-%E8%B4%A6%E6%88%B7\" target=\"_blank\" rel=\"external\">这里</a></p>\n</blockquote>\n<p>写下对于这个的一些补充</p>\n<ol>\n<li>对于博客源文件，最好添加<strong><code>.gitignore</code></strong>,忽略掉<code>node_modules</code>，依赖文件太大，影响上传速度。</li>\n<li>仓库必须Public,私有仓库既不能通过name.github.io访问，也不能完成CI</li>\n<li>对于主题文件，如果有<code>.git</code>文件可能会造成git add失败，如果主题不打算更新可删掉主题文件内的<code>.git</code>文件夹</li>\n</ol>\n<h2 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h2><ul>\n<li>学习主流CI工具，如<a href=\"https://juejin.im/entry/565fbc6c60b215d646403d33\" target=\"_blank\" rel=\"external\"><code>Jenkins</code></a></li>\n<li><a href=\"https://juejin.im/entry/5a2a269df265da43052e8878\" target=\"_blank\" rel=\"external\">基于Docker的CI平台实践</a></li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9F\" target=\"_blank\" rel=\"external\">EasyHexo 持续集成Continuous Integration\n</a></p>\n<p><a href=\"https://blog.csdn.net/jjm1437/article/details/71601450\" target=\"_blank\" rel=\"external\">致产品经理： 持续集成、持续交付、持续部署和DevOps\n</a><br><a href=\"https://www.zhihu.com/question/23444990\" target=\"_blank\" rel=\"external\">如何理解持续集成、持续交付、持续部署？\n</a></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p><a href=\"https://zhuanlan.zhihu.com/p/33206437\" target=\"_blank\" rel=\"external\">微服务化的基石——持续集成\n</a></p>\n","site":{"data":{}},"excerpt":"<p>之前废弃Hexo时，觉得hexo比较麻烦，每次都要执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo deploy</div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure></p>\n<p>，才能推到线上，虽然有人把命令简化了一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo d -g</div></pre></td></tr></table></figure></p>\n<p>一行就能搞定，但我还是觉得命令太长，每次复制太麻烦，于是发现了持续集成工具<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"external\"><code>travis-ci</code></a>，因此顺便了解一下持续集成。<br>","more":"</p>\n<h2 id=\"什么是持续集成？\"><a href=\"#什么是持续集成？\" class=\"headerlink\" title=\"什么是持续集成？\"></a>什么是持续集成？</h2><blockquote>\n<p>持续集成（英语：Continuous integration，缩写 CI）是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>\n</blockquote>\n<p>也就是说，上面的命令可以通过持续集成工具自动化执行，这样每次我们对博客做出的修改，只需提交<code>commit</code>后，推送到<code>github</code>，持续集成工具自动在线构建博客并部署到<code>GitHub Pages</code>,简化了博客发布流程。</p>\n<p>下面是几张图片描述下持续集成、持续交付和持续部署</p>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Continuous%20Integration.jpeg\" alt=\"持续集成流程\"></p>\n<blockquote>\n<p>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p>\n</blockquote>\n<h3 id=\"持续交付\"><a href=\"#持续交付\" class=\"headerlink\" title=\"持续交付\"></a>持续交付</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%20Continuous%20Delivery.jpeg\" alt=\"持续交付流程\"></p>\n<blockquote>\n<p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p>\n</blockquote>\n<h3 id=\"持续部署\"><a href=\"#持续部署\" class=\"headerlink\" title=\"持续部署\"></a>持续部署</h3><p><img src=\"http://githubblog.andyhui.top/image/Continuous_Integration%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%20Continuous%20Deployment.jpeg\" alt=\"持续部署流程\"></p>\n<blockquote>\n<p>持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。</p>\n</blockquote>\n<h2 id=\"关于Hexo的一次持续集成实践\"><a href=\"#关于Hexo的一次持续集成实践\" class=\"headerlink\" title=\"关于Hexo的一次持续集成实践\"></a>关于Hexo的一次持续集成实践</h2><blockquote>\n<p>详细流程见<a href=\"https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E6%B3%A8%E5%86%8C-travis-ci-%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%BB%91%E5%AE%9A-github-%E8%B4%A6%E6%88%B7\" target=\"_blank\" rel=\"external\">这里</a></p>\n</blockquote>\n<p>写下对于这个的一些补充</p>\n<ol>\n<li>对于博客源文件，最好添加<strong><code>.gitignore</code></strong>,忽略掉<code>node_modules</code>，依赖文件太大，影响上传速度。</li>\n<li>仓库必须Public,私有仓库既不能通过name.github.io访问，也不能完成CI</li>\n<li>对于主题文件，如果有<code>.git</code>文件可能会造成git add失败，如果主题不打算更新可删掉主题文件内的<code>.git</code>文件夹</li>\n</ol>\n<h2 id=\"下一步计划\"><a href=\"#下一步计划\" class=\"headerlink\" title=\"下一步计划\"></a>下一步计划</h2><ul>\n<li>学习主流CI工具，如<a href=\"https://juejin.im/entry/565fbc6c60b215d646403d33\" target=\"_blank\" rel=\"external\"><code>Jenkins</code></a></li>\n<li><a href=\"https://juejin.im/entry/5a2a269df265da43052e8878\" target=\"_blank\" rel=\"external\">基于Docker的CI平台实践</a></li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://easyhexo.com/1-Hexo-install-and-config/1-5-continuous-integration.html#%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%9F\" target=\"_blank\" rel=\"external\">EasyHexo 持续集成Continuous Integration\n</a></p>\n<p><a href=\"https://blog.csdn.net/jjm1437/article/details/71601450\" target=\"_blank\" rel=\"external\">致产品经理： 持续集成、持续交付、持续部署和DevOps\n</a><br><a href=\"https://www.zhihu.com/question/23444990\" target=\"_blank\" rel=\"external\">如何理解持续集成、持续交付、持续部署？\n</a></p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><p><a href=\"https://zhuanlan.zhihu.com/p/33206437\" target=\"_blank\" rel=\"external\">微服务化的基石——持续集成\n</a></p>"},{"title":"后端学习路径","date":"2017-11-04T03:30:01.000Z","_content":"> 大一刷了一年算法 到省赛结束也算是圆满退役了，从暑假开始零零散散的学习web开发，到现到现在大二上过半了依旧很迷茫，还好接下来的时间不太忙碌，足够去弥补。前段时间在思考写博客的意义是什么，一方面，作为一个博客，是要记录自己的学习历程，另一方面，是留给后来者，能给别人以启迪，算是实现了写博客的意义吧。之前写的几篇，都是偏向教程向，写起来很累，基本是从0开始考虑的，后续我觉得还是以记录为主，但教程还是要继续写的，现在网络这么普及，网上教程五花八门，中间会有各种坑,而且连贯性很差，我希望留下点东西能给后来者。\n接下是学长给的后端开发学习路线，顺便就拿过来了，接下来我会在学长的基础上完善这个教程，留作俱乐部的学习资料。\n\n<!-- more -->\n\n## 入门篇\n了解html是什么，以及网页运作的原理\n\n学习使用现代化的开发工具！——换一个好看又好用的文本编辑器吧\n\n前端认知：使用css和js为网页增添色彩\n\n后端认知：使用表单和服务端交互吧！——认识HTTP和PHP以及会话\n\n编程认知：面向对象和函数式编程\n\nlinux入门，告别windows\n\n数据库认知：mysql入门\n\nweb应用认知：搭建wordpress\n\n## 工程篇\n\n学习使用库：使用bootstrap快速写出好看的页面\n\n学习代码管理：使用git实现代码同步，注册自己的github库，尝试使用多分支进行协作开\n发\n\n学习包管理：使用composer，以现代的方式构建应用并获取扩展吧\n\n集成开发环境入门：给自己换个IDE吧!\n\n学习设计模式：用MVC的架构去编写应用\n\n使用框架吧：从最简单的框架(CodeIgniter)开始，了解如何使用框架开发应用\n\n## 应用篇\n\n（这一章将会带大家从零构建一个完整的简易博客系统 ，了解一个项目的基本开发流程）\n\n需求分析\n\n原型设计\n\n数据层设计\n\n逻辑架构设计\n\n编写后端代码\n\n编写前端代码\n\n上线部署和调试\n\n高级话题：运维，web安全\n\n## 进阶篇\n\n前后端分离\n前端的学习路径和技术栈\n后端的学习路径和技术栈\n一些简单的设计模式和架构\n如何进一步学习\n\n作者：MarkyLumin\n[原帖地址](http://www.jianshu.com/p/c8671328a375)\n","source":"_posts/LearningPath.md","raw":"---\ntitle: 后端学习路径\ndate: 2017-11-04 11:30:01\ntags:\n- 后端\n- php\ncategories:\n- 后端学习\npermalink: learnpath\n---\n> 大一刷了一年算法 到省赛结束也算是圆满退役了，从暑假开始零零散散的学习web开发，到现到现在大二上过半了依旧很迷茫，还好接下来的时间不太忙碌，足够去弥补。前段时间在思考写博客的意义是什么，一方面，作为一个博客，是要记录自己的学习历程，另一方面，是留给后来者，能给别人以启迪，算是实现了写博客的意义吧。之前写的几篇，都是偏向教程向，写起来很累，基本是从0开始考虑的，后续我觉得还是以记录为主，但教程还是要继续写的，现在网络这么普及，网上教程五花八门，中间会有各种坑,而且连贯性很差，我希望留下点东西能给后来者。\n接下是学长给的后端开发学习路线，顺便就拿过来了，接下来我会在学长的基础上完善这个教程，留作俱乐部的学习资料。\n\n<!-- more -->\n\n## 入门篇\n了解html是什么，以及网页运作的原理\n\n学习使用现代化的开发工具！——换一个好看又好用的文本编辑器吧\n\n前端认知：使用css和js为网页增添色彩\n\n后端认知：使用表单和服务端交互吧！——认识HTTP和PHP以及会话\n\n编程认知：面向对象和函数式编程\n\nlinux入门，告别windows\n\n数据库认知：mysql入门\n\nweb应用认知：搭建wordpress\n\n## 工程篇\n\n学习使用库：使用bootstrap快速写出好看的页面\n\n学习代码管理：使用git实现代码同步，注册自己的github库，尝试使用多分支进行协作开\n发\n\n学习包管理：使用composer，以现代的方式构建应用并获取扩展吧\n\n集成开发环境入门：给自己换个IDE吧!\n\n学习设计模式：用MVC的架构去编写应用\n\n使用框架吧：从最简单的框架(CodeIgniter)开始，了解如何使用框架开发应用\n\n## 应用篇\n\n（这一章将会带大家从零构建一个完整的简易博客系统 ，了解一个项目的基本开发流程）\n\n需求分析\n\n原型设计\n\n数据层设计\n\n逻辑架构设计\n\n编写后端代码\n\n编写前端代码\n\n上线部署和调试\n\n高级话题：运维，web安全\n\n## 进阶篇\n\n前后端分离\n前端的学习路径和技术栈\n后端的学习路径和技术栈\n一些简单的设计模式和架构\n如何进一步学习\n\n作者：MarkyLumin\n[原帖地址](http://www.jianshu.com/p/c8671328a375)\n","slug":"learnpath","published":1,"updated":"2019-03-04T09:07:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvul0008mqfyoz91z1gx","content":"<blockquote>\n<p>大一刷了一年算法 到省赛结束也算是圆满退役了，从暑假开始零零散散的学习web开发，到现到现在大二上过半了依旧很迷茫，还好接下来的时间不太忙碌，足够去弥补。前段时间在思考写博客的意义是什么，一方面，作为一个博客，是要记录自己的学习历程，另一方面，是留给后来者，能给别人以启迪，算是实现了写博客的意义吧。之前写的几篇，都是偏向教程向，写起来很累，基本是从0开始考虑的，后续我觉得还是以记录为主，但教程还是要继续写的，现在网络这么普及，网上教程五花八门，中间会有各种坑,而且连贯性很差，我希望留下点东西能给后来者。<br>接下是学长给的后端开发学习路线，顺便就拿过来了，接下来我会在学长的基础上完善这个教程，留作俱乐部的学习资料。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h2><p>了解html是什么，以及网页运作的原理</p>\n<p>学习使用现代化的开发工具！——换一个好看又好用的文本编辑器吧</p>\n<p>前端认知：使用css和js为网页增添色彩</p>\n<p>后端认知：使用表单和服务端交互吧！——认识HTTP和PHP以及会话</p>\n<p>编程认知：面向对象和函数式编程</p>\n<p>linux入门，告别windows</p>\n<p>数据库认知：mysql入门</p>\n<p>web应用认知：搭建wordpress</p>\n<h2 id=\"工程篇\"><a href=\"#工程篇\" class=\"headerlink\" title=\"工程篇\"></a>工程篇</h2><p>学习使用库：使用bootstrap快速写出好看的页面</p>\n<p>学习代码管理：使用git实现代码同步，注册自己的github库，尝试使用多分支进行协作开<br>发</p>\n<p>学习包管理：使用composer，以现代的方式构建应用并获取扩展吧</p>\n<p>集成开发环境入门：给自己换个IDE吧!</p>\n<p>学习设计模式：用MVC的架构去编写应用</p>\n<p>使用框架吧：从最简单的框架(CodeIgniter)开始，了解如何使用框架开发应用</p>\n<h2 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h2><p>（这一章将会带大家从零构建一个完整的简易博客系统 ，了解一个项目的基本开发流程）</p>\n<p>需求分析</p>\n<p>原型设计</p>\n<p>数据层设计</p>\n<p>逻辑架构设计</p>\n<p>编写后端代码</p>\n<p>编写前端代码</p>\n<p>上线部署和调试</p>\n<p>高级话题：运维，web安全</p>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><p>前后端分离<br>前端的学习路径和技术栈<br>后端的学习路径和技术栈<br>一些简单的设计模式和架构<br>如何进一步学习</p>\n<p>作者：MarkyLumin<br><a href=\"http://www.jianshu.com/p/c8671328a375\" target=\"_blank\" rel=\"external\">原帖地址</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>大一刷了一年算法 到省赛结束也算是圆满退役了，从暑假开始零零散散的学习web开发，到现到现在大二上过半了依旧很迷茫，还好接下来的时间不太忙碌，足够去弥补。前段时间在思考写博客的意义是什么，一方面，作为一个博客，是要记录自己的学习历程，另一方面，是留给后来者，能给别人以启迪，算是实现了写博客的意义吧。之前写的几篇，都是偏向教程向，写起来很累，基本是从0开始考虑的，后续我觉得还是以记录为主，但教程还是要继续写的，现在网络这么普及，网上教程五花八门，中间会有各种坑,而且连贯性很差，我希望留下点东西能给后来者。<br>接下是学长给的后端开发学习路线，顺便就拿过来了，接下来我会在学长的基础上完善这个教程，留作俱乐部的学习资料。</p>\n</blockquote>","more":"<h2 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h2><p>了解html是什么，以及网页运作的原理</p>\n<p>学习使用现代化的开发工具！——换一个好看又好用的文本编辑器吧</p>\n<p>前端认知：使用css和js为网页增添色彩</p>\n<p>后端认知：使用表单和服务端交互吧！——认识HTTP和PHP以及会话</p>\n<p>编程认知：面向对象和函数式编程</p>\n<p>linux入门，告别windows</p>\n<p>数据库认知：mysql入门</p>\n<p>web应用认知：搭建wordpress</p>\n<h2 id=\"工程篇\"><a href=\"#工程篇\" class=\"headerlink\" title=\"工程篇\"></a>工程篇</h2><p>学习使用库：使用bootstrap快速写出好看的页面</p>\n<p>学习代码管理：使用git实现代码同步，注册自己的github库，尝试使用多分支进行协作开<br>发</p>\n<p>学习包管理：使用composer，以现代的方式构建应用并获取扩展吧</p>\n<p>集成开发环境入门：给自己换个IDE吧!</p>\n<p>学习设计模式：用MVC的架构去编写应用</p>\n<p>使用框架吧：从最简单的框架(CodeIgniter)开始，了解如何使用框架开发应用</p>\n<h2 id=\"应用篇\"><a href=\"#应用篇\" class=\"headerlink\" title=\"应用篇\"></a>应用篇</h2><p>（这一章将会带大家从零构建一个完整的简易博客系统 ，了解一个项目的基本开发流程）</p>\n<p>需求分析</p>\n<p>原型设计</p>\n<p>数据层设计</p>\n<p>逻辑架构设计</p>\n<p>编写后端代码</p>\n<p>编写前端代码</p>\n<p>上线部署和调试</p>\n<p>高级话题：运维，web安全</p>\n<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2><p>前后端分离<br>前端的学习路径和技术栈<br>后端的学习路径和技术栈<br>一些简单的设计模式和架构<br>如何进一步学习</p>\n<p>作者：MarkyLumin<br><a href=\"http://www.jianshu.com/p/c8671328a375\" target=\"_blank\" rel=\"external\">原帖地址</a></p>"},{"title":"LeetCode 两数之和系列","author":"andyhui","date":"2019-03-05T14:10:00.000Z","_content":"##  [1] [两数之和](https://leetcode-cn.com/problems/two-sum/description/)\n\n\n### 描述\n>  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n>\n> 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!-- more -->\n### 示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9\n>\n> 因为 nums[0] + nums[1] = 2 + 7 = 9\n>  所以返回 [0, 1]\n\n### 思路\n> 对于本题，给出的数组是未排序的，若两两求和需要$$O(n^{2})$$, 如果排序后再双指针遍历，则需要$$O(nlogn + n)$$, 考虑到`HashMap`，可以$$O(1)$$ 查找，因此对于一个数字nums[i],如果target-nums[i]出现过，则输出对应位置，若不存在则记录该数字与位置。\n\n###  代码\n``` python\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) < 2:\n            return [-1, -1]\n        map = {}\n        for i in range(len(nums)):\n            if target - nums[i] in map:\n                return [i, map[target - nums[i]]]\n            else:\n                map[nums[i]] = i\n\ns = Solution()\nprint(s.twoSum([2, 7, 11, 15],9))\n```\n##  [167] [两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/)\n\n\n### 描述\n>  给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n>\n>  函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n>\n### 说明:\n>\n>  返回的下标值（index1 和 index2）不是从零开始的。\n>\n>  你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n### 示例:\n\n> 输入: numbers = [2, 7, 11, 15], target = 9\n>\n> 输出: [1,2]\n>\n> 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n### 思路\n> 双指针i,j，i指向较小元素，j指向较大元素，\n>\n> 令 sum = numbers[i]+numbers[j]\n>\n> 若sum < target,  i+= 1, 使 sum 变大\n>\n> 若sum > target, j -=  1，使 sum 变小\n\n###  代码\n``` python\nclass Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        i = 0\n        j = len(numbers) - 1\n        while i < j:\n            sum = numbers[i] + numbers[j]\n            if sum == target:\n                return [i+1, j+1]\n            elif sum < target:\n                i += 1\n            else:\n                j -= 1\n        return [-1, -1]\n            \ns = Solution()\nprint(s.twoSum([2, 7, 11, 15], 9))  \n```\n\n##  [653] [两数之和 IV - 输入 BST](https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/)\n\n\n### 描述\u0010\u0010\n\n>  给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。\n>\n### 示例:\n\n#### 案例 1:\n\n```shell\n输入: \n⁠   5\n⁠  / \\\n⁠ 3   6\n⁠/ \\   \\\n2   4   7\n\nTarget = 9\n```\n\n```shell\n输出:\nTrue\n```\n\n#### 案例 2:\n\n```shell\n输入: \n⁠   5\n⁠  / \\\n⁠ 3   6\n⁠/ \\   \\\n2   4   7\n\nTarget = 28\n```\n\n```shell\n输出:\nFalse\n```\n\n### 思路\n> 找到两数字存在即可\n>\n> **思路1**\n>\n> 前序遍历一遍，用`HashSet`记录访问过节点的值，对于每个值val查target-val是否存在即可，时间空间复杂度均为$$O(n)​$$\n>\n> **思路2**\n>\n> BFS遍历, 对树来说即层序遍历，同样用`HashSet`记录访问过的节点，与**思路1**不同的地方仅是树的遍历方式，时空复杂度均为$$O(n)$$\n>\n> **思路3**\n>\n> 给定的树为**二叉搜索树**，`inorder`遍历结果即为升序排列的列表，这样就转向了_**两数之和 II**_双指针即可完成查找，中序遍历加后面的查找，时空复杂度均为$$O(n)​$$\n>\n> \n\n###  代码\n``` python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n# 思路1\nclass Solution(object):\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        dic = {}\n        return self.pre_order(root, dic, k)\n    def pre_order(self, root, dic, k):\n        if root == None:\n            return False\n        if k - root.val in dic:\n            return True\n        dic[root.val] = 1\n        return self.pre_order(root.left, dic, k) or self.pre_order(root.right, dic, k)\n    \n# 思路2\n    def findTarget2(self, root, k):\n        if not root:\n            return False\n        nodes, dic = [root], set()\n        for node in nodes:\n            if k - node.val in dic:\n                return True\n            dic.add(node.val)\n            if node.left:\n                nodes.append(node.left)\n            if node.right:\n                nodes.append(node.right)\n        return False\n# 思路3\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        nums = self.inorder(root)\n        l,r = 0,len(nums) - 1\n        while l < r:\n            sum = nums[l] + nums[r]\n            if sum == k:\n                return True\n            elif sum < k:\n                l += 1\n            else:\n                r -= 1\n        return False\n    def inorder(self, root):\n        if root == None:\n            return []\n        return self.inorder(root.left) + [root.val] + self.inorder(root.right)\n  \nroot = TreeNode(5)\nrl = TreeNode(3)\nrr = TreeNode(6)\nroot.left = rl\nroot.right = rr\nrl.left = TreeNode(2)\nrl.right = TreeNode(4)\nrr.right = TreeNode(7)\ns = Solution()\nprint(s.findTarget(root,9))\n```\n\n> 拓展 剑指Offer34 二叉树中和为某一值的路径","source":"_posts/LeetCode 两数之和.md","raw":"title: LeetCode 两数之和系列\nauthor: andyhui\ntags:\n  - algorithms\ncategories:\n  - leetcode\ndate: 2019-03-05 22:10:00\n---\n##  [1] [两数之和](https://leetcode-cn.com/problems/two-sum/description/)\n\n\n### 描述\n>  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n>\n> 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n<!-- more -->\n### 示例:\n\n> 给定 nums = [2, 7, 11, 15], target = 9\n>\n> 因为 nums[0] + nums[1] = 2 + 7 = 9\n>  所以返回 [0, 1]\n\n### 思路\n> 对于本题，给出的数组是未排序的，若两两求和需要$$O(n^{2})$$, 如果排序后再双指针遍历，则需要$$O(nlogn + n)$$, 考虑到`HashMap`，可以$$O(1)$$ 查找，因此对于一个数字nums[i],如果target-nums[i]出现过，则输出对应位置，若不存在则记录该数字与位置。\n\n###  代码\n``` python\nclass Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) < 2:\n            return [-1, -1]\n        map = {}\n        for i in range(len(nums)):\n            if target - nums[i] in map:\n                return [i, map[target - nums[i]]]\n            else:\n                map[nums[i]] = i\n\ns = Solution()\nprint(s.twoSum([2, 7, 11, 15],9))\n```\n##  [167] [两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/)\n\n\n### 描述\n>  给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。\n>\n>  函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\n>\n### 说明:\n>\n>  返回的下标值（index1 和 index2）不是从零开始的。\n>\n>  你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n### 示例:\n\n> 输入: numbers = [2, 7, 11, 15], target = 9\n>\n> 输出: [1,2]\n>\n> 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\n\n### 思路\n> 双指针i,j，i指向较小元素，j指向较大元素，\n>\n> 令 sum = numbers[i]+numbers[j]\n>\n> 若sum < target,  i+= 1, 使 sum 变大\n>\n> 若sum > target, j -=  1，使 sum 变小\n\n###  代码\n``` python\nclass Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        i = 0\n        j = len(numbers) - 1\n        while i < j:\n            sum = numbers[i] + numbers[j]\n            if sum == target:\n                return [i+1, j+1]\n            elif sum < target:\n                i += 1\n            else:\n                j -= 1\n        return [-1, -1]\n            \ns = Solution()\nprint(s.twoSum([2, 7, 11, 15], 9))  \n```\n\n##  [653] [两数之和 IV - 输入 BST](https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/)\n\n\n### 描述\u0010\u0010\n\n>  给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。\n>\n### 示例:\n\n#### 案例 1:\n\n```shell\n输入: \n⁠   5\n⁠  / \\\n⁠ 3   6\n⁠/ \\   \\\n2   4   7\n\nTarget = 9\n```\n\n```shell\n输出:\nTrue\n```\n\n#### 案例 2:\n\n```shell\n输入: \n⁠   5\n⁠  / \\\n⁠ 3   6\n⁠/ \\   \\\n2   4   7\n\nTarget = 28\n```\n\n```shell\n输出:\nFalse\n```\n\n### 思路\n> 找到两数字存在即可\n>\n> **思路1**\n>\n> 前序遍历一遍，用`HashSet`记录访问过节点的值，对于每个值val查target-val是否存在即可，时间空间复杂度均为$$O(n)​$$\n>\n> **思路2**\n>\n> BFS遍历, 对树来说即层序遍历，同样用`HashSet`记录访问过的节点，与**思路1**不同的地方仅是树的遍历方式，时空复杂度均为$$O(n)$$\n>\n> **思路3**\n>\n> 给定的树为**二叉搜索树**，`inorder`遍历结果即为升序排列的列表，这样就转向了_**两数之和 II**_双指针即可完成查找，中序遍历加后面的查找，时空复杂度均为$$O(n)​$$\n>\n> \n\n###  代码\n``` python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n# 思路1\nclass Solution(object):\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        dic = {}\n        return self.pre_order(root, dic, k)\n    def pre_order(self, root, dic, k):\n        if root == None:\n            return False\n        if k - root.val in dic:\n            return True\n        dic[root.val] = 1\n        return self.pre_order(root.left, dic, k) or self.pre_order(root.right, dic, k)\n    \n# 思路2\n    def findTarget2(self, root, k):\n        if not root:\n            return False\n        nodes, dic = [root], set()\n        for node in nodes:\n            if k - node.val in dic:\n                return True\n            dic.add(node.val)\n            if node.left:\n                nodes.append(node.left)\n            if node.right:\n                nodes.append(node.right)\n        return False\n# 思路3\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        nums = self.inorder(root)\n        l,r = 0,len(nums) - 1\n        while l < r:\n            sum = nums[l] + nums[r]\n            if sum == k:\n                return True\n            elif sum < k:\n                l += 1\n            else:\n                r -= 1\n        return False\n    def inorder(self, root):\n        if root == None:\n            return []\n        return self.inorder(root.left) + [root.val] + self.inorder(root.right)\n  \nroot = TreeNode(5)\nrl = TreeNode(3)\nrr = TreeNode(6)\nroot.left = rl\nroot.right = rr\nrl.left = TreeNode(2)\nrl.right = TreeNode(4)\nrr.right = TreeNode(7)\ns = Solution()\nprint(s.findTarget(root,9))\n```\n\n> 拓展 剑指Offer34 二叉树中和为某一值的路径","slug":"LeetCode 两数之和","published":1,"updated":"2019-03-06T14:29:59.000Z","_id":"cjsxaqvum0009mqfyl0m7sq9j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"[1] 两数之和\"></a>[1] <a href=\"https://leetcode-cn.com/problems/two-sum/description/\" target=\"_blank\" rel=\"external\">两数之和</a></h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<p> 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3><blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br> 所以返回 [0, 1]</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>对于本题，给出的数组是未排序的，若两两求和需要<script type=\"math/tex\">O(n^{2})</script>, 如果排序后再双指针遍历，则需要<script type=\"math/tex\">O(nlogn + n)</script>, 考虑到<code>HashMap</code>，可以<script type=\"math/tex\">O(1)</script> 查找，因此对于一个数字nums[i],如果target-nums[i]出现过，则输出对应位置，若不存在则记录该数字与位置。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type nums: List[int]</span></div><div class=\"line\"><span class=\"string\">        :type target: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: List[int]</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(nums) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</div><div class=\"line\">        map = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</div><div class=\"line\">            <span class=\"keyword\">if</span> target - nums[i] <span class=\"keyword\">in</span> map:</div><div class=\"line\">                <span class=\"keyword\">return</span> [i, map[target - nums[i]]]</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                map[nums[i]] = i</div><div class=\"line\"></div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],<span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"167-两数之和-II-输入有序数组\"><a href=\"#167-两数之和-II-输入有序数组\" class=\"headerlink\" title=\"[167] 两数之和 II - 输入有序数组\"></a>[167] <a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/\" target=\"_blank\" rel=\"external\">两数之和 II - 输入有序数组</a></h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<p> 给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p> 函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h3><p> 返回的下标值（index1 和 index2）不是从零开始的。</p>\n<p> 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3><blockquote>\n<p>输入: numbers = [2, 7, 11, 15], target = 9</p>\n<p>输出: [1,2]</p>\n<p>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>双指针i,j，i指向较小元素，j指向较大元素，</p>\n<p>令 sum = numbers[i]+numbers[j]</p>\n<p>若sum &lt; target,  i+= 1, 使 sum 变大</p>\n<p>若sum &gt; target, j -=  1，使 sum 变小</p>\n</blockquote>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, numbers, target)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type numbers: List[int]</span></div><div class=\"line\"><span class=\"string\">        :type target: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: List[int]</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        j = len(numbers) - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; j:</div><div class=\"line\">            sum = numbers[i] + numbers[j]</div><div class=\"line\">            <span class=\"keyword\">if</span> sum == target:</div><div class=\"line\">                <span class=\"keyword\">return</span> [i+<span class=\"number\">1</span>, j+<span class=\"number\">1</span>]</div><div class=\"line\">            <span class=\"keyword\">elif</span> sum &lt; target:</div><div class=\"line\">                i += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                j -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</div><div class=\"line\">            </div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"653-两数之和-IV-输入-BST\"><a href=\"#653-两数之和-IV-输入-BST\" class=\"headerlink\" title=\"[653] 两数之和 IV - 输入 BST\"></a>[653] <a href=\"https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/\" target=\"_blank\" rel=\"external\">两数之和 IV - 输入 BST</a></h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\u0010\u0010\"></a>描述\u0010\u0010</h3><blockquote>\n<p> 给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3></blockquote>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例 1:\"></a>案例 1:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入: </div><div class=\"line\">⁠   5</div><div class=\"line\">⁠  / \\</div><div class=\"line\">⁠ 3   6</div><div class=\"line\">⁠/ \\   \\</div><div class=\"line\">2   4   7</div><div class=\"line\"></div><div class=\"line\">Target = 9</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出:</div><div class=\"line\">True</div></pre></td></tr></table></figure>\n<h4 id=\"案例-2\"><a href=\"#案例-2\" class=\"headerlink\" title=\"案例 2:\"></a>案例 2:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入: </div><div class=\"line\">⁠   5</div><div class=\"line\">⁠  / \\</div><div class=\"line\">⁠ 3   6</div><div class=\"line\">⁠/ \\   \\</div><div class=\"line\">2   4   7</div><div class=\"line\"></div><div class=\"line\">Target = 28</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出:</div><div class=\"line\">False</div></pre></td></tr></table></figure>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>找到两数字存在即可</p>\n<p><strong>思路1</strong></p>\n<p>前序遍历一遍，用<code>HashSet</code>记录访问过节点的值，对于每个值val查target-val是否存在即可，时间空间复杂度均为<script type=\"math/tex\">O(n)​</script></p>\n<p><strong>思路2</strong></p>\n<p>BFS遍历, 对树来说即层序遍历，同样用<code>HashSet</code>记录访问过的节点，与<strong>思路1</strong>不同的地方仅是树的遍历方式，时空复杂度均为<script type=\"math/tex\">O(n)</script></p>\n<p><strong>思路3</strong></p>\n<p>给定的树为<strong>二叉搜索树</strong>，<code>inorder</code>遍历结果即为升序排列的列表，这样就转向了<em><strong>两数之和 II</strong></em>双指针即可完成查找，中序遍历加后面的查找，时空复杂度均为<script type=\"math/tex\">O(n)​</script></p>\n</blockquote>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></div><div class=\"line\">        self.val = x</div><div class=\"line\">        self.left = <span class=\"keyword\">None</span></div><div class=\"line\">        self.right = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 思路1</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type root: TreeNode</span></div><div class=\"line\"><span class=\"string\">        :type k: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: bool</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        dic = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_order(root, dic, k)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_order</span><span class=\"params\">(self, root, dic, k)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> root == <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">if</span> k - root.val <span class=\"keyword\">in</span> dic:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        dic[root.val] = <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_order(root.left, dic, k) <span class=\"keyword\">or</span> self.pre_order(root.right, dic, k)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 思路2</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget2</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        nodes, dic = [root], set()</div><div class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> nodes:</div><div class=\"line\">            <span class=\"keyword\">if</span> k - node.val <span class=\"keyword\">in</span> dic:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            dic.add(node.val)</div><div class=\"line\">            <span class=\"keyword\">if</span> node.left:</div><div class=\"line\">                nodes.append(node.left)</div><div class=\"line\">            <span class=\"keyword\">if</span> node.right:</div><div class=\"line\">                nodes.append(node.right)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"comment\"># 思路3</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type root: TreeNode</span></div><div class=\"line\"><span class=\"string\">        :type k: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: bool</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        nums = self.inorder(root)</div><div class=\"line\">        l,r = <span class=\"number\">0</span>,len(nums) - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> l &lt; r:</div><div class=\"line\">            sum = nums[l] + nums[r]</div><div class=\"line\">            <span class=\"keyword\">if</span> sum == k:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> sum &lt; k:</div><div class=\"line\">                l += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                r -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inorder</span><span class=\"params\">(self, root)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> root == <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> []</div><div class=\"line\">        <span class=\"keyword\">return</span> self.inorder(root.left) + [root.val] + self.inorder(root.right)</div><div class=\"line\">  </div><div class=\"line\">root = TreeNode(<span class=\"number\">5</span>)</div><div class=\"line\">rl = TreeNode(<span class=\"number\">3</span>)</div><div class=\"line\">rr = TreeNode(<span class=\"number\">6</span>)</div><div class=\"line\">root.left = rl</div><div class=\"line\">root.right = rr</div><div class=\"line\">rl.left = TreeNode(<span class=\"number\">2</span>)</div><div class=\"line\">rl.right = TreeNode(<span class=\"number\">4</span>)</div><div class=\"line\">rr.right = TreeNode(<span class=\"number\">7</span>)</div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.findTarget(root,<span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<blockquote>\n<p>拓展 剑指Offer34 二叉树中和为某一值的路径</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-两数之和\"><a href=\"#1-两数之和\" class=\"headerlink\" title=\"[1] 两数之和\"></a>[1] <a href=\"https://leetcode-cn.com/problems/two-sum/description/\" target=\"_blank\" rel=\"external\">两数之和</a></h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<p> 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n</blockquote>","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3><blockquote>\n<p>给定 nums = [2, 7, 11, 15], target = 9</p>\n<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br> 所以返回 [0, 1]</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>对于本题，给出的数组是未排序的，若两两求和需要<script type=\"math/tex\">O(n^{2})</script>, 如果排序后再双指针遍历，则需要<script type=\"math/tex\">O(nlogn + n)</script>, 考虑到<code>HashMap</code>，可以<script type=\"math/tex\">O(1)</script> 查找，因此对于一个数字nums[i],如果target-nums[i]出现过，则输出对应位置，若不存在则记录该数字与位置。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type nums: List[int]</span></div><div class=\"line\"><span class=\"string\">        :type target: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: List[int]</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(nums) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</div><div class=\"line\">        map = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</div><div class=\"line\">            <span class=\"keyword\">if</span> target - nums[i] <span class=\"keyword\">in</span> map:</div><div class=\"line\">                <span class=\"keyword\">return</span> [i, map[target - nums[i]]]</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                map[nums[i]] = i</div><div class=\"line\"></div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],<span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"167-两数之和-II-输入有序数组\"><a href=\"#167-两数之和-II-输入有序数组\" class=\"headerlink\" title=\"[167] 两数之和 II - 输入有序数组\"></a>[167] <a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/description/\" target=\"_blank\" rel=\"external\">两数之和 II - 输入有序数组</a></h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><blockquote>\n<p> 给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p> 函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h3><p> 返回的下标值（index1 和 index2）不是从零开始的。</p>\n<p> 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3><blockquote>\n<p>输入: numbers = [2, 7, 11, 15], target = 9</p>\n<p>输出: [1,2]</p>\n<p>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>双指针i,j，i指向较小元素，j指向较大元素，</p>\n<p>令 sum = numbers[i]+numbers[j]</p>\n<p>若sum &lt; target,  i+= 1, 使 sum 变大</p>\n<p>若sum &gt; target, j -=  1，使 sum 变小</p>\n</blockquote>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, numbers, target)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type numbers: List[int]</span></div><div class=\"line\"><span class=\"string\">        :type target: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: List[int]</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        j = len(numbers) - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; j:</div><div class=\"line\">            sum = numbers[i] + numbers[j]</div><div class=\"line\">            <span class=\"keyword\">if</span> sum == target:</div><div class=\"line\">                <span class=\"keyword\">return</span> [i+<span class=\"number\">1</span>, j+<span class=\"number\">1</span>]</div><div class=\"line\">            <span class=\"keyword\">elif</span> sum &lt; target:</div><div class=\"line\">                i += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                j -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</div><div class=\"line\">            </div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<h2 id=\"653-两数之和-IV-输入-BST\"><a href=\"#653-两数之和-IV-输入-BST\" class=\"headerlink\" title=\"[653] 两数之和 IV - 输入 BST\"></a>[653] <a href=\"https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/description/\" target=\"_blank\" rel=\"external\">两数之和 IV - 输入 BST</a></h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\u0010\u0010\"></a>描述\u0010\u0010</h3><blockquote>\n<p> 给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例:\"></a>示例:</h3></blockquote>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例 1:\"></a>案例 1:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入: </div><div class=\"line\">⁠   5</div><div class=\"line\">⁠  / \\</div><div class=\"line\">⁠ 3   6</div><div class=\"line\">⁠/ \\   \\</div><div class=\"line\">2   4   7</div><div class=\"line\"></div><div class=\"line\">Target = 9</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出:</div><div class=\"line\">True</div></pre></td></tr></table></figure>\n<h4 id=\"案例-2\"><a href=\"#案例-2\" class=\"headerlink\" title=\"案例 2:\"></a>案例 2:</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入: </div><div class=\"line\">⁠   5</div><div class=\"line\">⁠  / \\</div><div class=\"line\">⁠ 3   6</div><div class=\"line\">⁠/ \\   \\</div><div class=\"line\">2   4   7</div><div class=\"line\"></div><div class=\"line\">Target = 28</div></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出:</div><div class=\"line\">False</div></pre></td></tr></table></figure>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>找到两数字存在即可</p>\n<p><strong>思路1</strong></p>\n<p>前序遍历一遍，用<code>HashSet</code>记录访问过节点的值，对于每个值val查target-val是否存在即可，时间空间复杂度均为<script type=\"math/tex\">O(n)​</script></p>\n<p><strong>思路2</strong></p>\n<p>BFS遍历, 对树来说即层序遍历，同样用<code>HashSet</code>记录访问过的节点，与<strong>思路1</strong>不同的地方仅是树的遍历方式，时空复杂度均为<script type=\"math/tex\">O(n)</script></p>\n<p><strong>思路3</strong></p>\n<p>给定的树为<strong>二叉搜索树</strong>，<code>inorder</code>遍历结果即为升序排列的列表，这样就转向了<em><strong>两数之和 II</strong></em>双指针即可完成查找，中序遍历加后面的查找，时空复杂度均为<script type=\"math/tex\">O(n)​</script></p>\n</blockquote>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></div><div class=\"line\">        self.val = x</div><div class=\"line\">        self.left = <span class=\"keyword\">None</span></div><div class=\"line\">        self.right = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 思路1</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type root: TreeNode</span></div><div class=\"line\"><span class=\"string\">        :type k: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: bool</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        dic = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_order(root, dic, k)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_order</span><span class=\"params\">(self, root, dic, k)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> root == <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">if</span> k - root.val <span class=\"keyword\">in</span> dic:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        dic[root.val] = <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_order(root.left, dic, k) <span class=\"keyword\">or</span> self.pre_order(root.right, dic, k)</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 思路2</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget2</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        nodes, dic = [root], set()</div><div class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> nodes:</div><div class=\"line\">            <span class=\"keyword\">if</span> k - node.val <span class=\"keyword\">in</span> dic:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            dic.add(node.val)</div><div class=\"line\">            <span class=\"keyword\">if</span> node.left:</div><div class=\"line\">                nodes.append(node.left)</div><div class=\"line\">            <span class=\"keyword\">if</span> node.right:</div><div class=\"line\">                nodes.append(node.right)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"comment\"># 思路3</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTarget</span><span class=\"params\">(self, root, k)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">        :type root: TreeNode</span></div><div class=\"line\"><span class=\"string\">        :type k: int</span></div><div class=\"line\"><span class=\"string\">        :rtype: bool</span></div><div class=\"line\"><span class=\"string\">        \"\"\"</span></div><div class=\"line\">        nums = self.inorder(root)</div><div class=\"line\">        l,r = <span class=\"number\">0</span>,len(nums) - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> l &lt; r:</div><div class=\"line\">            sum = nums[l] + nums[r]</div><div class=\"line\">            <span class=\"keyword\">if</span> sum == k:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> sum &lt; k:</div><div class=\"line\">                l += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                r -= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inorder</span><span class=\"params\">(self, root)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> root == <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> []</div><div class=\"line\">        <span class=\"keyword\">return</span> self.inorder(root.left) + [root.val] + self.inorder(root.right)</div><div class=\"line\">  </div><div class=\"line\">root = TreeNode(<span class=\"number\">5</span>)</div><div class=\"line\">rl = TreeNode(<span class=\"number\">3</span>)</div><div class=\"line\">rr = TreeNode(<span class=\"number\">6</span>)</div><div class=\"line\">root.left = rl</div><div class=\"line\">root.right = rr</div><div class=\"line\">rl.left = TreeNode(<span class=\"number\">2</span>)</div><div class=\"line\">rl.right = TreeNode(<span class=\"number\">4</span>)</div><div class=\"line\">rr.right = TreeNode(<span class=\"number\">7</span>)</div><div class=\"line\">s = Solution()</div><div class=\"line\">print(s.findTarget(root,<span class=\"number\">9</span>))</div></pre></td></tr></table></figure>\n<blockquote>\n<p>拓展 剑指Offer34 二叉树中和为某一值的路径</p>\n</blockquote>"},{"layout":"page","title":"Welcome to my blog","date":"2017-08-23T04:52:25.000Z","updated":"2017-08-27T09:00:00.000Z","comments":1,"top":1,"_content":"\n``` c\n//C\n#include<stdio.h>\nint main(void){\n\tprintf(\"Hello,my friend\\n\");\n\treturn 0;\n}\n```\n\n<!-- more -->\n``` cpp\n//c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"Welcome to andyhui's blog!\"<<endl;\n    return 0;\n}\n```\n\n``` java\n//Java\npublic class Main {\n    public static void main(String[] args){\n        System.out.println(\"There are some blog posts here.\");\n    }\n}\n```\n\n``` python\n#Python\nprint(\"Hope it helps you!\")\n```\n","source":"_posts/My-New-Post.md","raw":"---\nlayout: page\ntitle: Welcome to my blog\ndate: 2017-08-23 12:52:25\nupdated: 2017-08-27 17:00:00\ncomments: true\ntags:\n- code\n- C++\ncategories:\n - C++\npermalink: Welcome\ntop: 1\n---\n\n``` c\n//C\n#include<stdio.h>\nint main(void){\n\tprintf(\"Hello,my friend\\n\");\n\treturn 0;\n}\n```\n\n<!-- more -->\n``` cpp\n//c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"Welcome to andyhui's blog!\"<<endl;\n    return 0;\n}\n```\n\n``` java\n//Java\npublic class Main {\n    public static void main(String[] args){\n        System.out.println(\"There are some blog posts here.\");\n    }\n}\n```\n\n``` python\n#Python\nprint(\"Hope it helps you!\")\n```\n","slug":"Welcome","published":1,"photos":[],"link":"","_id":"cjsxaqvuo000cmqfydms2do5i","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//C</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello,my friend\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//c++</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Welcome to andyhui's blog!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"There are some blog posts here.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Python</span></div><div class=\"line\">print(<span class=\"string\">\"Hope it helps you!\"</span>)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//C</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello,my friend\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//c++</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Welcome to andyhui's blog!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"There are some blog posts here.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#Python</span></div><div class=\"line\">print(<span class=\"string\">\"Hope it helps you!\"</span>)</div></pre></td></tr></table></figure>"},{"layout":"post","title":"Markdown 基本语法","date":"2017-08-25T00:19:08.000Z","updated":"2017-08-27T09:00:00.000Z","comments":1,"_content":"近几天刚刚搭建了博客，用的是Hexo+Next主题，托管在github和codding上，写博文是需要Markdown，所以先学习下Markdown的基本语法，也算是为博客增加一篇博文吧。\n\n---\n\nMarkdown基础用法与规则：\n\n### 标题\n使用\"#\"加空格在首行来创建标题\n如:\n&emsp;&emsp; # 一级标题\n&emsp;&emsp; \\#\\# 二级标题\n&emsp;&emsp; \\#\\#\\# 三级标题\n![](http://githubblog.andyhui.top/markdown%E6%A0%87%E9%A2%98.png)\n\n---\n\n<!-- more -->\n### 加粗功能\n使用一组星号\"\\*\\*\"或一组下划线\"\\_\\_\"来加粗一段文字，用转义符\"\\\\\"来打出\"\\*\"\n如:\n&emsp;&emsp; 这是**加粗的文字**\n&emsp;&emsp; 这也是__加粗的文字__\n\n---\n\n### 引用\n使用\">\"在段首来引用一段文字，要在引用前后加入空白行声明开始和结束引用\n如:\n\n> 这是一段引用\n> 这是一段引用\n\n\n---\n\n### 无序列表\n使用\"-\"、\"*\"或\"+\"加空格来创建无序列表\n如:\n\n- 这是一个无序列表\n+ 这是一个无序列表\n* 这是一个无序列表\n\n\n---\n\n### 有序列表\n使用数字圆点加空格如\"1.\"、\"2.\"来创建有序列表\n如:\n\n1. 这是一个有序列表\n2. 这是一个有序列表\n3. 这是一个有序列表\n\n\n---\n\n以上来源[**锤子便签**](https:\\\\cloud.smartisan.com\\apps\\note\\md.html)\n\n---\n\n### 贴代码\n用一对重音符\"\\`\\`\\` code \\`\\`\\`\"引起来，可以在\\`\\`\\`后表明语言\n如:\n\n``` cpp\n#include<iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"Hello World!\"<<endl;\n    return 0;\n}\n```\n\n也可以用4个空格(Tab)缩进再贴上代码实现相同的效果\n\n    #include<iostream>\n    using namespace std;\n    int main()\n    {\n        cout<<\"Hello World!\"<<endl;\n        return 0;\n    }\n\n---\n\n### 强调标记\n用两个重音符\"\\`强调内容\\`\"\n这是一个`强调标记`\n\n---\n\n### 未完待续","source":"_posts/first-try.md","raw":"---\nlayout: post\n#文章属性 \tpost或page\n#如果你修改了layout，在scaffolds文件夹里一定要有名字对应的模版文件，否则会采用默认模版。\ntitle: Markdown 基本语法\n#文章的标题\ndate: 2017-08-25 08:19:08\n#创建日期\nupdated: 2017-08-27 17:00:00\n#修改时间\ncomments: true\n#是否开启评论 默认:true\ntags:\n- Markdown\n- Hexo\n#标签\ncategories:\n- Markdown\n#分类\npermalink: Markdown_基本语法\n#url中的名字 默认:文件名\n---\n近几天刚刚搭建了博客，用的是Hexo+Next主题，托管在github和codding上，写博文是需要Markdown，所以先学习下Markdown的基本语法，也算是为博客增加一篇博文吧。\n\n---\n\nMarkdown基础用法与规则：\n\n### 标题\n使用\"#\"加空格在首行来创建标题\n如:\n&emsp;&emsp; # 一级标题\n&emsp;&emsp; \\#\\# 二级标题\n&emsp;&emsp; \\#\\#\\# 三级标题\n![](http://githubblog.andyhui.top/markdown%E6%A0%87%E9%A2%98.png)\n\n---\n\n<!-- more -->\n### 加粗功能\n使用一组星号\"\\*\\*\"或一组下划线\"\\_\\_\"来加粗一段文字，用转义符\"\\\\\"来打出\"\\*\"\n如:\n&emsp;&emsp; 这是**加粗的文字**\n&emsp;&emsp; 这也是__加粗的文字__\n\n---\n\n### 引用\n使用\">\"在段首来引用一段文字，要在引用前后加入空白行声明开始和结束引用\n如:\n\n> 这是一段引用\n> 这是一段引用\n\n\n---\n\n### 无序列表\n使用\"-\"、\"*\"或\"+\"加空格来创建无序列表\n如:\n\n- 这是一个无序列表\n+ 这是一个无序列表\n* 这是一个无序列表\n\n\n---\n\n### 有序列表\n使用数字圆点加空格如\"1.\"、\"2.\"来创建有序列表\n如:\n\n1. 这是一个有序列表\n2. 这是一个有序列表\n3. 这是一个有序列表\n\n\n---\n\n以上来源[**锤子便签**](https:\\\\cloud.smartisan.com\\apps\\note\\md.html)\n\n---\n\n### 贴代码\n用一对重音符\"\\`\\`\\` code \\`\\`\\`\"引起来，可以在\\`\\`\\`后表明语言\n如:\n\n``` cpp\n#include<iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"Hello World!\"<<endl;\n    return 0;\n}\n```\n\n也可以用4个空格(Tab)缩进再贴上代码实现相同的效果\n\n    #include<iostream>\n    using namespace std;\n    int main()\n    {\n        cout<<\"Hello World!\"<<endl;\n        return 0;\n    }\n\n---\n\n### 强调标记\n用两个重音符\"\\`强调内容\\`\"\n这是一个`强调标记`\n\n---\n\n### 未完待续","slug":"Markdown_基本语法","published":1,"photos":[],"link":"","_id":"cjsxaqvup000emqfy2avmtlry","content":"<p>近几天刚刚搭建了博客，用的是Hexo+Next主题，托管在github和codding上，写博文是需要Markdown，所以先学习下Markdown的基本语法，也算是为博客增加一篇博文吧。</p>\n<hr>\n<p>Markdown基础用法与规则：</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用”#”加空格在首行来创建标题<br>如:<br>&emsp;&emsp; # 一级标题<br>&emsp;&emsp; ## 二级标题<br>&emsp;&emsp; ### 三级标题<br><img src=\"http://githubblog.andyhui.top/markdown%E6%A0%87%E9%A2%98.png\" alt></p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"加粗功能\"><a href=\"#加粗功能\" class=\"headerlink\" title=\"加粗功能\"></a>加粗功能</h3><p>使用一组星号”**“或一组下划线”__“来加粗一段文字，用转义符”\\“来打出”*“<br>如:<br>&emsp;&emsp; 这是<strong>加粗的文字</strong><br>&emsp;&emsp; 这也是<strong>加粗的文字</strong></p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>使用”&gt;”在段首来引用一段文字，要在引用前后加入空白行声明开始和结束引用<br>如:</p>\n<blockquote>\n<p>这是一段引用<br>这是一段引用</p>\n</blockquote>\n<hr>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>使用”-“、”*”或”+”加空格来创建无序列表<br>如:</p>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<hr>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>使用数字圆点加空格如”1.”、”2.”来创建有序列表<br>如:</p>\n<ol>\n<li>这是一个有序列表</li>\n<li>这是一个有序列表</li>\n<li>这是一个有序列表</li>\n</ol>\n<hr>\n<p>以上来源<a href=\"https:\\\\cloud.smartisan.com\\apps\\note\\md.html\" target=\"_blank\" rel=\"external\"><strong>锤子便签</strong></a></p>\n<hr>\n<h3 id=\"贴代码\"><a href=\"#贴代码\" class=\"headerlink\" title=\"贴代码\"></a>贴代码</h3><p>用一对重音符”``` code ```“引起来，可以在```后表明语言<br>如:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Hello World!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也可以用4个空格(Tab)缩进再贴上代码实现相同的效果</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;endl;\n    return 0;\n}\n</code></pre><hr>\n<h3 id=\"强调标记\"><a href=\"#强调标记\" class=\"headerlink\" title=\"强调标记\"></a>强调标记</h3><p>用两个重音符”`强调内容`“<br>这是一个<code>强调标记</code></p>\n<hr>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>","site":{"data":{}},"excerpt":"<p>近几天刚刚搭建了博客，用的是Hexo+Next主题，托管在github和codding上，写博文是需要Markdown，所以先学习下Markdown的基本语法，也算是为博客增加一篇博文吧。</p>\n<hr>\n<p>Markdown基础用法与规则：</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用”#”加空格在首行来创建标题<br>如:<br>&emsp;&emsp; # 一级标题<br>&emsp;&emsp; ## 二级标题<br>&emsp;&emsp; ### 三级标题<br><img src=\"http://githubblog.andyhui.top/markdown%E6%A0%87%E9%A2%98.png\" alt></p>\n<hr>","more":"<h3 id=\"加粗功能\"><a href=\"#加粗功能\" class=\"headerlink\" title=\"加粗功能\"></a>加粗功能</h3><p>使用一组星号”**“或一组下划线”__“来加粗一段文字，用转义符”\\“来打出”*“<br>如:<br>&emsp;&emsp; 这是<strong>加粗的文字</strong><br>&emsp;&emsp; 这也是<strong>加粗的文字</strong></p>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>使用”&gt;”在段首来引用一段文字，要在引用前后加入空白行声明开始和结束引用<br>如:</p>\n<blockquote>\n<p>这是一段引用<br>这是一段引用</p>\n</blockquote>\n<hr>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>使用”-“、”*”或”+”加空格来创建无序列表<br>如:</p>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<ul>\n<li>这是一个无序列表</li>\n</ul>\n<hr>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><p>使用数字圆点加空格如”1.”、”2.”来创建有序列表<br>如:</p>\n<ol>\n<li>这是一个有序列表</li>\n<li>这是一个有序列表</li>\n<li>这是一个有序列表</li>\n</ol>\n<hr>\n<p>以上来源<a href=\"https:\\\\cloud.smartisan.com\\apps\\note\\md.html\" target=\"_blank\" rel=\"external\"><strong>锤子便签</strong></a></p>\n<hr>\n<h3 id=\"贴代码\"><a href=\"#贴代码\" class=\"headerlink\" title=\"贴代码\"></a>贴代码</h3><p>用一对重音符”``` code ```“引起来，可以在```后表明语言<br>如:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Hello World!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>也可以用4个空格(Tab)缩进再贴上代码实现相同的效果</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\n    cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;endl;\n    return 0;\n}\n</code></pre><hr>\n<h3 id=\"强调标记\"><a href=\"#强调标记\" class=\"headerlink\" title=\"强调标记\"></a>强调标记</h3><p>用两个重音符”`强调内容`“<br>这是一个<code>强调标记</code></p>\n<hr>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>"},{"layout":"post","title":"Hello World","date":"2017-08-24T04:52:25.000Z","comments":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nlayout: post\ntitle: Hello World\ndate: 2017-08-24 12:52:25\ncomments: true\ntags:\n- Hexo\n#标签\ncategories:\n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-03-04T09:07:57.000Z","photos":[],"link":"","_id":"cjsxaqvur000hmqfys3bnikto","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"Git及GitHub使用","date":"2017-09-20T11:35:10.000Z","_content":"## Git\n\n### 什么是 Git\n> **Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.** 项目加上Git后能能更好的追踪代码修改，进行版本回溯等操作。当今时代，多人协作开发是公司合作的基本模式，在多人协作的开发过程中Git变得必不可少，接下来大致介绍下Git的基本命令以及GitHub的基本使用。\n\n<!-- more -->\n### 为什么用Git\n\n#### 提高开发效率!\n\n> git不仅仅是一个代码版本管理工具，也是一个文档管理工具，在git上很容易维护一个文档\n\n#### git可以提高开发效率，主要表现在:\n\n+ 合并对提交过程的保留\n+ 修正提交\n+ 廉价好用的本地分支\n+ 更强大智能的合并能力\n+ 完整配套的开发过程设施(wiki issue 功能大赞！)\n+ 查看日志\n\n转自 [Koudle](http://www.jianshu.com/p/834678d9c213)\n\n### Git的下载及安装\n首先肯定是[下载Git](https://git-scm.com/downloads)\n( `提醒:资源下载较慢，推荐挂vpn`)\n\n![git下载](http://githubblog.andyhui.top/image/gitfirstuse/git%E4%B8%8B%E8%BD%BD.png)\n\n\n然后安装界面如下(`windows平台`)\n\n![安装1](http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%851.png)\n\n这里注意这两个都是添加到右键菜单栏，很好用\n\n![安装2](http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%852.png)\n\n一路next下去就好\n\n安装完后 打开终端输入\n`注意 $ 是表示从命令行输入，不用自己输入，只需要输入后面内容即可，后面一致`\n```\n$ git --version\n```\n如果显示\n```\ngit version 2.14.1.windows.1\n```\n表示安装成功了\n### Git基本设置\n\n在桌面上右键`Git Bash here` 启动git bush命令行界面\n当然也可以从终端打开\n\n![启动](http://githubblog.andyhui.top/image/gitfirstuse/%E5%90%AF%E5%8A%A8.png)\n\n首先我们对 `Git` 进行全局用户名和邮箱进行设置，请参照下面格式，`Your Name` 替换为你的名字， `you@example.com` 替换为你的邮箱\n这里个人信息设置的作用，是为你在代码提交时自动署名标记，方便查看提交日志时区分作者。\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email you@example.com\n```\n接下来进行Git推送分支相关设置\n这个是命令 `Git`当我们执行 `git push` 没有指定分支时，自动使用当前分支，而不是报错。[更多关于push.default](http://blog.csdn.net/daijingxin/article/details/51326715)\n\n```\n$ git config --global push.default simple\n```\n\n### Git基本操作\n对于有经验的开发者来说，在他每次新建完开发项目的时候，首先要做的第一件事就是将自己的项目纳入到 `Git` 代码版本管理中，完成这个操作一般需要以下这几个步骤：\n\n#### 对Git进行初始化\n\n我们要在对应的项目文件夹(文件夹内)对git初始化，\nwindows下可直接在对应文件夹下右键 `Git Bush here`\n也可以用命令行找到对应文件夹，\n这里我们用命令行示范下\n```\n$ cd D:/andyhui/DataStructure\n$ git init\n```\n`D:/andyhui/DataStructure`这个是我自己的文件目录，替换成你项目的文件目录即可,如果没有就自己创建一个，在里面随意放一个文件即可，比如 一个说明`what.md`或 代码文件 `HelloWorld.cpp`\n\n#### 将项目所有文件纳入到Git暂存区中\n\n这些文件并未真正提交到Git上\n这里`-A` 是all的意思，我们也可以指定一个文件\n```\n$ git add -A\n```\n 这里的所有文件指的是没在 `.gitignore` 中被忽略的文件。在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会来选择忽略掉一些我们不想纳入到 Git 版本管理中的文件（如缓存文件）。[git忽略文件设置](http://bdxnote.blog.163.com/blog/static/844423520124153051409/)以及[了解更多.gitignore](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000)。\n\n#### 检查 Git 状态\n\n这条命令将会向你输出存放在 `Git` 暂存区的文件，这意味着这些文件还未真正提交到 Git 中。\n```\n$ git status\n```\n\n#### 保留改动并提交\n\n这行命令会将暂存区的文件都提交到 `Git`，-m 选项后面带的参数表示本次提交的简单描述。\n```\n$ git commit -m \"Initial commit\"\n$ git log\ncommit e7419d269d65021fa056b731e09f8bdeaac00d9d (HEAD -> master, origin/master)\nAuthor: andyhui <andyhui686666@gmail.com>\nDate:   Thu Sep 21 09:24:53 2017 +0800\n\n    Initial commit\n```\n\n#### 查看历史提交记录：\n```\n$ git log\n```\n\n从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。按 `q`可退出查看。\n\n![gitlog](http://githubblog.andyhui.top/image/gitfirstuse/gitlog.png)\n\ngit 基本提交操作到这就结束了，如果你想学习更多关于 `Git` 相关的知识，可以查阅[《Pro Git》](https://git-scm.com/book/zh/v2)一书进行学习。\n\n\n## GitHub\n\n### 什么是 GitHub\n`GitHub` 是目前全球最大的代码托管平台，许多非常著名的项目如 Linux、Swift、Laravel 等都托管在 `GitHub` 上。开发者们利用 `GitHub` 来进行团队协作开发，查阅或收藏别人开源项目的优秀代码，针对某个 `Bug` 进行技术讨论等。\n\n### GitHub基本操作\n#### 注册 GitHub 账号\n如果你还没有 `GitHub` 账号的话，请先 [注册](https://github.com/join)。\n#### 为 `GitHub` 账号设置 `SSH Key`\n\n生成 `SSH Key`，开始之前，我们先使用以下命令来检查主机上是否已经生成过 `SSH Key`：\n```\n$ ls -al ~/.ssh\n```\n如果存在 `id_rsa` 和 `id_rsa.pub`的话，请跳过以下生成 `SSH` 的步骤继续阅读剩下内容。\n否则使用以下方法来生成 `SSH Key`，请将 `your_email@example.com` 替换为你的邮箱：\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n命令行会提示让你指定秘钥的名称，按回车键将 `SSH Key`保存到默认文件名即可：\n```\nEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\n```\n接下来会询问你为 `SSH Key` 设置密码，每次提交需要用到，可以设置，也可以按回车键即可，默认为空密码：\n```\nEnter passphrase (empty for no passphrase): [Type a passphrase]\nEnter same passphrase again: [Type passphrase again]\n```\n可以都选择默认，也就是直接敲击几个 `Enter` 键即可。这时候我们再检查一下：\n```\n$ ls -al ~/.ssh\n```\n可以看到以下两个文件：\n```\nid_rsa —— SSH 秘钥的 私钥 (Private Key)\nid_rsa.pub —— SSH 秘钥的 公钥 (Public Key)\n```\n\n接下来将 `SSH Key` 添加到 `ssh-agent` 中：\n```\n$ eval `ssh-agent -s`\n$ ssh-add ~/.ssh/id_rsa\n```\n打印出公钥 `id_rsa.pub` 文件里的内容，并把输出的内容复制到剪贴板里：\n```\n$ cat ~/.ssh/id_rsa.pub\n```\n![copyssh](http://githubblog.andyhui.top/image/gitfirstuse/copyssh.png)\n\n最后我们需要将公钥添加到 GitHub 账号，先打开 [Github SSH](https://github.com/settings/keys) 令牌管理页面，然后把你刚刚复制的令牌按照下图示例添加：\n\n![sshkey添加](http://githubblog.andyhui.top/image/gitfirstuse/sshkey%E6%B7%BB%E5%8A%A0.png)\n\n测试`ssh key`是否成功\n```\n$ ssh -T git@github.com\n```\n输入完密码后，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n#### 提交代码到 Github\n\n在配置完 GitHub 账号之后，我们便可以开始在上面存放项目代码了。首先 [新建一个 GitHub 仓库](https://github.com/new)，取名为 `你项目的名字`，填上 `Description` 项目描述，`Initialize this repository with a README` 这一项是询问你是否需要生成一个默认的介绍。\n\n![新仓库](http://githubblog.andyhui.top/image/gitfirstuse/%E6%96%B0%E4%BB%93%E5%BA%93.png)\n\n\n创建完成之后，使用以下命令将代码上传到 `GitHub` 上（将 `your_username` 替换为你自己的 `GitHub` 用户名，`your_projectname` 是你的项目名字，就是刚刚创建仓库的名字）：\n```\n$ git remote add origin git@github.com:your_username/your_projectname.git\n$ git push -u origin master\n```\n至此，项目已成功托管到 GitHub 上。\n(如果Git 提示`fatal: remote origin already exists`[请看这里](http://blog.csdn.net/top_code/article/details/50381432))\n(如果提示`error: src refspec master does not match any`[请看这里](http://www.jianshu.com/p/8d26730386f3)))\n\n![代码提交成功](http://githubblog.andyhui.top/image/gitfirstuse/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F.png)\n\n\n#### 小总结\n后面我们如果对本地代码进行了改动，只需运行这 3 条命令即可将代码推送到安全可靠的 `GitHub` 上：\n\n`注意：以下命令作为知识重温，不需要执行`\n\n1、保存到暂存区,-A也可以换成指定文件：\n```\n$ git add -A\n```\n2、输入描述信息并提交到本地的 Git：\n```\n$ git commit -m \"Say something\"\n```\n3、将代码推送到 GitHub：\n```\n$ git push\n```\n## Git 进阶操作\n### 误删恢复\n通过上面 `Git` 的基本讲解，你可能还无法真正体会到 `Git` 的强大。在平时开发中，我们有时候可能会因为手误或其它原因将某些重要文件删除。如果之前有将此文件纳入到 `Git` 中，这时便可以利用 `Git` 来对误删文件进行恢复。请看下面演示。\n\n我们先假装不小心删除 `what.md` 文件：\n```\n$ rm what.md\n$ ll\n```\n使用 ll 打印出文件目录列表时，能看到 `what.md` 文件已被成功移除。\n\n查看 Git 状态：\n\n```\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    what.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n能看到有相关提示显示 `what.md` 文件已被删除，这时你可以选择将删除的文件进行恢复或提交。\n\n下面我们使用 `Git` 进行恢复被删除文件：\n```\n$ git checkout -f\n$ ll\n```\n这时能看到 `what.md` 文件已成功恢复。`git checkout -f` 的作用是将在暂存区的更改文件进行强制撤销。\n\n### 从GitHub克隆项目到本地\n\n首先到我们要克隆的到GitHub的某个仓库，比如[neuq-acmclubTD](https://github.com/imyhui/neuq-acmclubTD),右边有个绿色的`Clone or download`，点开后有`Clone with HTTPS `，当然你也可以直接下载\n\n![克隆连接](http://githubblog.andyhui.top/image/gitfirstuse/%E5%85%8B%E9%9A%86%E8%BF%9E%E6%8E%A5.png)\n\n然后回到要存放的目录下，右键`Git Bash here`使用命令\n```\n$ git clone https://github.com/imyhui/neuq-acmclubTD.git\n```\n如果本地的版本不是最新的，可以使用以下命令，`origin`是本地仓库\n```\n$ git fetch origin\n```\n把更新的内容合并到本地分支，可以使用以下命令\n```\n$ git merge origin/master\n```\n\n如果你不想手动去合并，那么你可以使用以下命令,这个命令可以拉去最新版本并自动合并\n```\ngit pull <本地仓库> master\n```\n注意:记得如果不是单独另需创建的branch，每次对本地仓库操作的时候都要使用 `git pull`命令，更新远程仓库到本地中，防止冲突。这点和SVN的update类似\n### GitHub的分支管理\n几乎所有的版本控制系统都以某种形式支持分支。**使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。** 有人把 `Git` 的分支模型称为它的`‘必杀技特性’`，也正因为这一特性，使得 `Git`从众多版本控制系统中脱颖而出。[了解分支](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B)\n\n#### 分支创建合并删除\n1. 首先选中主分支\n`git checkout master` 代表将当前分支切换到 `master` 分支上，`master` 分支是我们初始化 `Git` 时默认创建的主分支，其它分支都是基于主分支衍生出来的。\n\n```\n$ git checkout master\n```\n2. 创建一个本地分支： `git branch <新分支名字>`,比如\n```\n$ git branch new_branch\n```\n3. 切换到新建立的分支： `git checkout <新分支名>`\n```\n$ git checkout new_branch\nSwitched to branch 'new_branch'\n```\n2、3 步骤其实可以用一条命令搞定 ` git checkout -b new_branch `，我习惯用这条,区别[参考这里](https://my.oschina.net/u/587974/blog/74341)\n\n你可以将新建的 `new_branch` 理解为是对 `master` 分支的克隆，在上面做的所有修改都不会影响到 `master` 分支。本节后面会将 `new_branch` 分支合并到 `master` 分支上，合并成功之后，在 `new_branch` 分支上做的所有改动都会并入到 `master` 分支。另外，你也可以选择对一个分支进行删除操作，当一个分支被删除之后，在该分支之上的所有改动也都将被销毁，删除分支的操作不会影响到 `master` 分支。这便是 `Git` 工作流的强大之处。\n\n4. 合并分支操作是`git merge <分支名称>`将分支的操作合并到主分支上,注意，多人协作中当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为`冲突(conflict)`。解决冲突需要人工处理。，解决冲突看[这里](http://www.cnblogs.com/mengdd/p/3585038.html)，合并分支示例：\n```\n$ git checkout master\n$ git merge new_branch\n```\n5. 从本地删除一个分支： `git branch -d <分支名称>`, 删除分支示例：\n```\n$ git branch -d new_branch\n```\n6. 将本地分支同步到GitHub上面： `git push <本地仓库名> <新分支名>`\n\n7. 为你的分支加入一个新的远程端： `git remote add <远程端名字> <地址>`\n\n8. 查看当前仓库有几个分支: `git branch`\n\n## 总结\n经过以上配置后，之后新建仓库操作如下进行即可\n1. 进入对应目录 `cd 你的仓库目录`\n2. 初始化git仓库 `git init`\n3. 添加提交的文件\n\n|文件数|指令|\n|--|--|\n|一个文件 | `git add 文件名`|\n|全部文件 | `git add -A`|\n4. 提交修改提示 `git commit -m`\n5. 查看提交状态 `git status`\n6. 查看最近日志 `git log`\n7. 版本回退操作\n\n|回退次数|指令|\n|-- |:------------- |\n|回退一个 |`git reset -hard HEAD^`|\n|回退两个 | `git reset -hard HEAD^^`|\n|回退多个 | `git reset -hard HEAD~100`|\n\n8. (第一次连接)远程仓库提交 `git remote add origin 你复制的地址`\n9. (第二次以后)远程仓库提交 `git push`\n\n## 参考\n[github官方教程](https://try.github.io/)\n\n[Laravel 教程 - Web 开发实战入门 ( Laravel 5.5 ) ](https://fsdhub.com/books/laravel-essential-training-5.5)\n\n[Linux下Git和GitHub使用方法总结](http://www.linuxidc.com/Linux/2014-03/97821.htm)\n\n[Git 初学者](http://hanfu.space/%E6%8A%80%E6%9C%AF/2015/08/26/git-tutorial/)\n\n[mac os x使用Git简易入门教程 ](http://blog.csdn.net/nellson/article/details/51526273)\n\n[《Pro Git》](https://git-scm.com/book/zh/v2)\n\n推荐看下[`github官方教程`](https://try.github.io/)和[`《Pro Git》`](https://git-scm.com/book/zh/v2)。\n\n## 结束语\n`Git`与`GitHub`基础教程到这就结束了，熬夜写了两晚上······半夜写头脑难免混乱可能有疏漏的地方，欢迎给我留言，有部分是参考以上链接的部分内容，侵删。希望大家看完这个教程能有一定收获，毕竟这是以后的合作途径。好了我要去补实验报告了>.<。","source":"_posts/gitfirstuse.md","raw":"---\ntitle: Git及GitHub使用\ndate: 2017-09-20 19:35:10\ntags:\n- git\n- github\ncategories:\n- git\npermalink: gitfirstuse\n---\n## Git\n\n### 什么是 Git\n> **Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.** 项目加上Git后能能更好的追踪代码修改，进行版本回溯等操作。当今时代，多人协作开发是公司合作的基本模式，在多人协作的开发过程中Git变得必不可少，接下来大致介绍下Git的基本命令以及GitHub的基本使用。\n\n<!-- more -->\n### 为什么用Git\n\n#### 提高开发效率!\n\n> git不仅仅是一个代码版本管理工具，也是一个文档管理工具，在git上很容易维护一个文档\n\n#### git可以提高开发效率，主要表现在:\n\n+ 合并对提交过程的保留\n+ 修正提交\n+ 廉价好用的本地分支\n+ 更强大智能的合并能力\n+ 完整配套的开发过程设施(wiki issue 功能大赞！)\n+ 查看日志\n\n转自 [Koudle](http://www.jianshu.com/p/834678d9c213)\n\n### Git的下载及安装\n首先肯定是[下载Git](https://git-scm.com/downloads)\n( `提醒:资源下载较慢，推荐挂vpn`)\n\n![git下载](http://githubblog.andyhui.top/image/gitfirstuse/git%E4%B8%8B%E8%BD%BD.png)\n\n\n然后安装界面如下(`windows平台`)\n\n![安装1](http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%851.png)\n\n这里注意这两个都是添加到右键菜单栏，很好用\n\n![安装2](http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%852.png)\n\n一路next下去就好\n\n安装完后 打开终端输入\n`注意 $ 是表示从命令行输入，不用自己输入，只需要输入后面内容即可，后面一致`\n```\n$ git --version\n```\n如果显示\n```\ngit version 2.14.1.windows.1\n```\n表示安装成功了\n### Git基本设置\n\n在桌面上右键`Git Bash here` 启动git bush命令行界面\n当然也可以从终端打开\n\n![启动](http://githubblog.andyhui.top/image/gitfirstuse/%E5%90%AF%E5%8A%A8.png)\n\n首先我们对 `Git` 进行全局用户名和邮箱进行设置，请参照下面格式，`Your Name` 替换为你的名字， `you@example.com` 替换为你的邮箱\n这里个人信息设置的作用，是为你在代码提交时自动署名标记，方便查看提交日志时区分作者。\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email you@example.com\n```\n接下来进行Git推送分支相关设置\n这个是命令 `Git`当我们执行 `git push` 没有指定分支时，自动使用当前分支，而不是报错。[更多关于push.default](http://blog.csdn.net/daijingxin/article/details/51326715)\n\n```\n$ git config --global push.default simple\n```\n\n### Git基本操作\n对于有经验的开发者来说，在他每次新建完开发项目的时候，首先要做的第一件事就是将自己的项目纳入到 `Git` 代码版本管理中，完成这个操作一般需要以下这几个步骤：\n\n#### 对Git进行初始化\n\n我们要在对应的项目文件夹(文件夹内)对git初始化，\nwindows下可直接在对应文件夹下右键 `Git Bush here`\n也可以用命令行找到对应文件夹，\n这里我们用命令行示范下\n```\n$ cd D:/andyhui/DataStructure\n$ git init\n```\n`D:/andyhui/DataStructure`这个是我自己的文件目录，替换成你项目的文件目录即可,如果没有就自己创建一个，在里面随意放一个文件即可，比如 一个说明`what.md`或 代码文件 `HelloWorld.cpp`\n\n#### 将项目所有文件纳入到Git暂存区中\n\n这些文件并未真正提交到Git上\n这里`-A` 是all的意思，我们也可以指定一个文件\n```\n$ git add -A\n```\n 这里的所有文件指的是没在 `.gitignore` 中被忽略的文件。在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会来选择忽略掉一些我们不想纳入到 Git 版本管理中的文件（如缓存文件）。[git忽略文件设置](http://bdxnote.blog.163.com/blog/static/844423520124153051409/)以及[了解更多.gitignore](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000)。\n\n#### 检查 Git 状态\n\n这条命令将会向你输出存放在 `Git` 暂存区的文件，这意味着这些文件还未真正提交到 Git 中。\n```\n$ git status\n```\n\n#### 保留改动并提交\n\n这行命令会将暂存区的文件都提交到 `Git`，-m 选项后面带的参数表示本次提交的简单描述。\n```\n$ git commit -m \"Initial commit\"\n$ git log\ncommit e7419d269d65021fa056b731e09f8bdeaac00d9d (HEAD -> master, origin/master)\nAuthor: andyhui <andyhui686666@gmail.com>\nDate:   Thu Sep 21 09:24:53 2017 +0800\n\n    Initial commit\n```\n\n#### 查看历史提交记录：\n```\n$ git log\n```\n\n从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。按 `q`可退出查看。\n\n![gitlog](http://githubblog.andyhui.top/image/gitfirstuse/gitlog.png)\n\ngit 基本提交操作到这就结束了，如果你想学习更多关于 `Git` 相关的知识，可以查阅[《Pro Git》](https://git-scm.com/book/zh/v2)一书进行学习。\n\n\n## GitHub\n\n### 什么是 GitHub\n`GitHub` 是目前全球最大的代码托管平台，许多非常著名的项目如 Linux、Swift、Laravel 等都托管在 `GitHub` 上。开发者们利用 `GitHub` 来进行团队协作开发，查阅或收藏别人开源项目的优秀代码，针对某个 `Bug` 进行技术讨论等。\n\n### GitHub基本操作\n#### 注册 GitHub 账号\n如果你还没有 `GitHub` 账号的话，请先 [注册](https://github.com/join)。\n#### 为 `GitHub` 账号设置 `SSH Key`\n\n生成 `SSH Key`，开始之前，我们先使用以下命令来检查主机上是否已经生成过 `SSH Key`：\n```\n$ ls -al ~/.ssh\n```\n如果存在 `id_rsa` 和 `id_rsa.pub`的话，请跳过以下生成 `SSH` 的步骤继续阅读剩下内容。\n否则使用以下方法来生成 `SSH Key`，请将 `your_email@example.com` 替换为你的邮箱：\n```\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n命令行会提示让你指定秘钥的名称，按回车键将 `SSH Key`保存到默认文件名即可：\n```\nEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\n```\n接下来会询问你为 `SSH Key` 设置密码，每次提交需要用到，可以设置，也可以按回车键即可，默认为空密码：\n```\nEnter passphrase (empty for no passphrase): [Type a passphrase]\nEnter same passphrase again: [Type passphrase again]\n```\n可以都选择默认，也就是直接敲击几个 `Enter` 键即可。这时候我们再检查一下：\n```\n$ ls -al ~/.ssh\n```\n可以看到以下两个文件：\n```\nid_rsa —— SSH 秘钥的 私钥 (Private Key)\nid_rsa.pub —— SSH 秘钥的 公钥 (Public Key)\n```\n\n接下来将 `SSH Key` 添加到 `ssh-agent` 中：\n```\n$ eval `ssh-agent -s`\n$ ssh-add ~/.ssh/id_rsa\n```\n打印出公钥 `id_rsa.pub` 文件里的内容，并把输出的内容复制到剪贴板里：\n```\n$ cat ~/.ssh/id_rsa.pub\n```\n![copyssh](http://githubblog.andyhui.top/image/gitfirstuse/copyssh.png)\n\n最后我们需要将公钥添加到 GitHub 账号，先打开 [Github SSH](https://github.com/settings/keys) 令牌管理页面，然后把你刚刚复制的令牌按照下图示例添加：\n\n![sshkey添加](http://githubblog.andyhui.top/image/gitfirstuse/sshkey%E6%B7%BB%E5%8A%A0.png)\n\n测试`ssh key`是否成功\n```\n$ ssh -T git@github.com\n```\n输入完密码后，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n\n#### 提交代码到 Github\n\n在配置完 GitHub 账号之后，我们便可以开始在上面存放项目代码了。首先 [新建一个 GitHub 仓库](https://github.com/new)，取名为 `你项目的名字`，填上 `Description` 项目描述，`Initialize this repository with a README` 这一项是询问你是否需要生成一个默认的介绍。\n\n![新仓库](http://githubblog.andyhui.top/image/gitfirstuse/%E6%96%B0%E4%BB%93%E5%BA%93.png)\n\n\n创建完成之后，使用以下命令将代码上传到 `GitHub` 上（将 `your_username` 替换为你自己的 `GitHub` 用户名，`your_projectname` 是你的项目名字，就是刚刚创建仓库的名字）：\n```\n$ git remote add origin git@github.com:your_username/your_projectname.git\n$ git push -u origin master\n```\n至此，项目已成功托管到 GitHub 上。\n(如果Git 提示`fatal: remote origin already exists`[请看这里](http://blog.csdn.net/top_code/article/details/50381432))\n(如果提示`error: src refspec master does not match any`[请看这里](http://www.jianshu.com/p/8d26730386f3)))\n\n![代码提交成功](http://githubblog.andyhui.top/image/gitfirstuse/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F.png)\n\n\n#### 小总结\n后面我们如果对本地代码进行了改动，只需运行这 3 条命令即可将代码推送到安全可靠的 `GitHub` 上：\n\n`注意：以下命令作为知识重温，不需要执行`\n\n1、保存到暂存区,-A也可以换成指定文件：\n```\n$ git add -A\n```\n2、输入描述信息并提交到本地的 Git：\n```\n$ git commit -m \"Say something\"\n```\n3、将代码推送到 GitHub：\n```\n$ git push\n```\n## Git 进阶操作\n### 误删恢复\n通过上面 `Git` 的基本讲解，你可能还无法真正体会到 `Git` 的强大。在平时开发中，我们有时候可能会因为手误或其它原因将某些重要文件删除。如果之前有将此文件纳入到 `Git` 中，这时便可以利用 `Git` 来对误删文件进行恢复。请看下面演示。\n\n我们先假装不小心删除 `what.md` 文件：\n```\n$ rm what.md\n$ ll\n```\n使用 ll 打印出文件目录列表时，能看到 `what.md` 文件已被成功移除。\n\n查看 Git 状态：\n\n```\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    what.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n能看到有相关提示显示 `what.md` 文件已被删除，这时你可以选择将删除的文件进行恢复或提交。\n\n下面我们使用 `Git` 进行恢复被删除文件：\n```\n$ git checkout -f\n$ ll\n```\n这时能看到 `what.md` 文件已成功恢复。`git checkout -f` 的作用是将在暂存区的更改文件进行强制撤销。\n\n### 从GitHub克隆项目到本地\n\n首先到我们要克隆的到GitHub的某个仓库，比如[neuq-acmclubTD](https://github.com/imyhui/neuq-acmclubTD),右边有个绿色的`Clone or download`，点开后有`Clone with HTTPS `，当然你也可以直接下载\n\n![克隆连接](http://githubblog.andyhui.top/image/gitfirstuse/%E5%85%8B%E9%9A%86%E8%BF%9E%E6%8E%A5.png)\n\n然后回到要存放的目录下，右键`Git Bash here`使用命令\n```\n$ git clone https://github.com/imyhui/neuq-acmclubTD.git\n```\n如果本地的版本不是最新的，可以使用以下命令，`origin`是本地仓库\n```\n$ git fetch origin\n```\n把更新的内容合并到本地分支，可以使用以下命令\n```\n$ git merge origin/master\n```\n\n如果你不想手动去合并，那么你可以使用以下命令,这个命令可以拉去最新版本并自动合并\n```\ngit pull <本地仓库> master\n```\n注意:记得如果不是单独另需创建的branch，每次对本地仓库操作的时候都要使用 `git pull`命令，更新远程仓库到本地中，防止冲突。这点和SVN的update类似\n### GitHub的分支管理\n几乎所有的版本控制系统都以某种形式支持分支。**使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。** 有人把 `Git` 的分支模型称为它的`‘必杀技特性’`，也正因为这一特性，使得 `Git`从众多版本控制系统中脱颖而出。[了解分支](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B)\n\n#### 分支创建合并删除\n1. 首先选中主分支\n`git checkout master` 代表将当前分支切换到 `master` 分支上，`master` 分支是我们初始化 `Git` 时默认创建的主分支，其它分支都是基于主分支衍生出来的。\n\n```\n$ git checkout master\n```\n2. 创建一个本地分支： `git branch <新分支名字>`,比如\n```\n$ git branch new_branch\n```\n3. 切换到新建立的分支： `git checkout <新分支名>`\n```\n$ git checkout new_branch\nSwitched to branch 'new_branch'\n```\n2、3 步骤其实可以用一条命令搞定 ` git checkout -b new_branch `，我习惯用这条,区别[参考这里](https://my.oschina.net/u/587974/blog/74341)\n\n你可以将新建的 `new_branch` 理解为是对 `master` 分支的克隆，在上面做的所有修改都不会影响到 `master` 分支。本节后面会将 `new_branch` 分支合并到 `master` 分支上，合并成功之后，在 `new_branch` 分支上做的所有改动都会并入到 `master` 分支。另外，你也可以选择对一个分支进行删除操作，当一个分支被删除之后，在该分支之上的所有改动也都将被销毁，删除分支的操作不会影响到 `master` 分支。这便是 `Git` 工作流的强大之处。\n\n4. 合并分支操作是`git merge <分支名称>`将分支的操作合并到主分支上,注意，多人协作中当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为`冲突(conflict)`。解决冲突需要人工处理。，解决冲突看[这里](http://www.cnblogs.com/mengdd/p/3585038.html)，合并分支示例：\n```\n$ git checkout master\n$ git merge new_branch\n```\n5. 从本地删除一个分支： `git branch -d <分支名称>`, 删除分支示例：\n```\n$ git branch -d new_branch\n```\n6. 将本地分支同步到GitHub上面： `git push <本地仓库名> <新分支名>`\n\n7. 为你的分支加入一个新的远程端： `git remote add <远程端名字> <地址>`\n\n8. 查看当前仓库有几个分支: `git branch`\n\n## 总结\n经过以上配置后，之后新建仓库操作如下进行即可\n1. 进入对应目录 `cd 你的仓库目录`\n2. 初始化git仓库 `git init`\n3. 添加提交的文件\n\n|文件数|指令|\n|--|--|\n|一个文件 | `git add 文件名`|\n|全部文件 | `git add -A`|\n4. 提交修改提示 `git commit -m`\n5. 查看提交状态 `git status`\n6. 查看最近日志 `git log`\n7. 版本回退操作\n\n|回退次数|指令|\n|-- |:------------- |\n|回退一个 |`git reset -hard HEAD^`|\n|回退两个 | `git reset -hard HEAD^^`|\n|回退多个 | `git reset -hard HEAD~100`|\n\n8. (第一次连接)远程仓库提交 `git remote add origin 你复制的地址`\n9. (第二次以后)远程仓库提交 `git push`\n\n## 参考\n[github官方教程](https://try.github.io/)\n\n[Laravel 教程 - Web 开发实战入门 ( Laravel 5.5 ) ](https://fsdhub.com/books/laravel-essential-training-5.5)\n\n[Linux下Git和GitHub使用方法总结](http://www.linuxidc.com/Linux/2014-03/97821.htm)\n\n[Git 初学者](http://hanfu.space/%E6%8A%80%E6%9C%AF/2015/08/26/git-tutorial/)\n\n[mac os x使用Git简易入门教程 ](http://blog.csdn.net/nellson/article/details/51526273)\n\n[《Pro Git》](https://git-scm.com/book/zh/v2)\n\n推荐看下[`github官方教程`](https://try.github.io/)和[`《Pro Git》`](https://git-scm.com/book/zh/v2)。\n\n## 结束语\n`Git`与`GitHub`基础教程到这就结束了，熬夜写了两晚上······半夜写头脑难免混乱可能有疏漏的地方，欢迎给我留言，有部分是参考以上链接的部分内容，侵删。希望大家看完这个教程能有一定收获，毕竟这是以后的合作途径。好了我要去补实验报告了>.<。","slug":"gitfirstuse","published":1,"updated":"2019-03-04T09:12:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvus000jmqfyyhwtgvcl","content":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"什么是-Git\"><a href=\"#什么是-Git\" class=\"headerlink\" title=\"什么是 Git\"></a>什么是 Git</h3><blockquote>\n<p><strong>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</strong> 项目加上Git后能能更好的追踪代码修改，进行版本回溯等操作。当今时代，多人协作开发是公司合作的基本模式，在多人协作的开发过程中Git变得必不可少，接下来大致介绍下Git的基本命令以及GitHub的基本使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"为什么用Git\"><a href=\"#为什么用Git\" class=\"headerlink\" title=\"为什么用Git\"></a>为什么用Git</h3><h4 id=\"提高开发效率\"><a href=\"#提高开发效率\" class=\"headerlink\" title=\"提高开发效率!\"></a>提高开发效率!</h4><blockquote>\n<p>git不仅仅是一个代码版本管理工具，也是一个文档管理工具，在git上很容易维护一个文档</p>\n</blockquote>\n<h4 id=\"git可以提高开发效率，主要表现在\"><a href=\"#git可以提高开发效率，主要表现在\" class=\"headerlink\" title=\"git可以提高开发效率，主要表现在:\"></a>git可以提高开发效率，主要表现在:</h4><ul>\n<li>合并对提交过程的保留</li>\n<li>修正提交</li>\n<li>廉价好用的本地分支</li>\n<li>更强大智能的合并能力</li>\n<li>完整配套的开发过程设施(wiki issue 功能大赞！)</li>\n<li>查看日志</li>\n</ul>\n<p>转自 <a href=\"http://www.jianshu.com/p/834678d9c213\" target=\"_blank\" rel=\"external\">Koudle</a></p>\n<h3 id=\"Git的下载及安装\"><a href=\"#Git的下载及安装\" class=\"headerlink\" title=\"Git的下载及安装\"></a>Git的下载及安装</h3><p>首先肯定是<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">下载Git</a><br>( <code>提醒:资源下载较慢，推荐挂vpn</code>)</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/git%E4%B8%8B%E8%BD%BD.png\" alt=\"git下载\"></p>\n<p>然后安装界面如下(<code>windows平台</code>)</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%851.png\" alt=\"安装1\"></p>\n<p>这里注意这两个都是添加到右键菜单栏，很好用</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%852.png\" alt=\"安装2\"></p>\n<p>一路next下去就好</p>\n<p>安装完后 打开终端输入<br><code>注意 $ 是表示从命令行输入，不用自己输入，只需要输入后面内容即可，后面一致</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div></pre></td></tr></table></figure></p>\n<p>如果显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git version 2.14.1.windows.1</div></pre></td></tr></table></figure></p>\n<p>表示安装成功了</p>\n<h3 id=\"Git基本设置\"><a href=\"#Git基本设置\" class=\"headerlink\" title=\"Git基本设置\"></a>Git基本设置</h3><p>在桌面上右键<code>Git Bash here</code> 启动git bush命令行界面<br>当然也可以从终端打开</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%90%AF%E5%8A%A8.png\" alt=\"启动\"></p>\n<p>首先我们对 <code>Git</code> 进行全局用户名和邮箱进行设置，请参照下面格式，<code>Your Name</code> 替换为你的名字， <code>you@example.com</code> 替换为你的邮箱<br>这里个人信息设置的作用，是为你在代码提交时自动署名标记，方便查看提交日志时区分作者。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email you@example.com</div></pre></td></tr></table></figure></p>\n<p>接下来进行Git推送分支相关设置<br>这个是命令 <code>Git</code>当我们执行 <code>git push</code> 没有指定分支时，自动使用当前分支，而不是报错。<a href=\"http://blog.csdn.net/daijingxin/article/details/51326715\" target=\"_blank\" rel=\"external\">更多关于push.default</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global push.default simple</div></pre></td></tr></table></figure>\n<h3 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h3><p>对于有经验的开发者来说，在他每次新建完开发项目的时候，首先要做的第一件事就是将自己的项目纳入到 <code>Git</code> 代码版本管理中，完成这个操作一般需要以下这几个步骤：</p>\n<h4 id=\"对Git进行初始化\"><a href=\"#对Git进行初始化\" class=\"headerlink\" title=\"对Git进行初始化\"></a>对Git进行初始化</h4><p>我们要在对应的项目文件夹(文件夹内)对git初始化，<br>windows下可直接在对应文件夹下右键 <code>Git Bush here</code><br>也可以用命令行找到对应文件夹，<br>这里我们用命令行示范下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd D:/andyhui/DataStructure</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<p><code>D:/andyhui/DataStructure</code>这个是我自己的文件目录，替换成你项目的文件目录即可,如果没有就自己创建一个，在里面随意放一个文件即可，比如 一个说明<code>what.md</code>或 代码文件 <code>HelloWorld.cpp</code></p>\n<h4 id=\"将项目所有文件纳入到Git暂存区中\"><a href=\"#将项目所有文件纳入到Git暂存区中\" class=\"headerlink\" title=\"将项目所有文件纳入到Git暂存区中\"></a>将项目所有文件纳入到Git暂存区中</h4><p>这些文件并未真正提交到Git上<br>这里<code>-A</code> 是all的意思，我们也可以指定一个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure></p>\n<p> 这里的所有文件指的是没在 <code>.gitignore</code> 中被忽略的文件。在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会来选择忽略掉一些我们不想纳入到 Git 版本管理中的文件（如缓存文件）。<a href=\"http://bdxnote.blog.163.com/blog/static/844423520124153051409/\" target=\"_blank\" rel=\"external\">git忽略文件设置</a>以及<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000\" target=\"_blank\" rel=\"external\">了解更多.gitignore</a>。</p>\n<h4 id=\"检查-Git-状态\"><a href=\"#检查-Git-状态\" class=\"headerlink\" title=\"检查 Git 状态\"></a>检查 Git 状态</h4><p>这条命令将会向你输出存放在 <code>Git</code> 暂存区的文件，这意味着这些文件还未真正提交到 Git 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<h4 id=\"保留改动并提交\"><a href=\"#保留改动并提交\" class=\"headerlink\" title=\"保留改动并提交\"></a>保留改动并提交</h4><p>这行命令会将暂存区的文件都提交到 <code>Git</code>，-m 选项后面带的参数表示本次提交的简单描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Initial commit&quot;</div><div class=\"line\">$ git log</div><div class=\"line\">commit e7419d269d65021fa056b731e09f8bdeaac00d9d (HEAD -&gt; master, origin/master)</div><div class=\"line\">Author: andyhui &lt;andyhui686666@gmail.com&gt;</div><div class=\"line\">Date:   Thu Sep 21 09:24:53 2017 +0800</div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure></p>\n<h4 id=\"查看历史提交记录：\"><a href=\"#查看历史提交记录：\" class=\"headerlink\" title=\"查看历史提交记录：\"></a>查看历史提交记录：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<p>从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。按 <code>q</code>可退出查看。</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/gitlog.png\" alt=\"gitlog\"></p>\n<p>git 基本提交操作到这就结束了，如果你想学习更多关于 <code>Git</code> 相关的知识，可以查阅<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">《Pro Git》</a>一书进行学习。</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><h3 id=\"什么是-GitHub\"><a href=\"#什么是-GitHub\" class=\"headerlink\" title=\"什么是 GitHub\"></a>什么是 GitHub</h3><p><code>GitHub</code> 是目前全球最大的代码托管平台，许多非常著名的项目如 Linux、Swift、Laravel 等都托管在 <code>GitHub</code> 上。开发者们利用 <code>GitHub</code> 来进行团队协作开发，查阅或收藏别人开源项目的优秀代码，针对某个 <code>Bug</code> 进行技术讨论等。</p>\n<h3 id=\"GitHub基本操作\"><a href=\"#GitHub基本操作\" class=\"headerlink\" title=\"GitHub基本操作\"></a>GitHub基本操作</h3><h4 id=\"注册-GitHub-账号\"><a href=\"#注册-GitHub-账号\" class=\"headerlink\" title=\"注册 GitHub 账号\"></a>注册 GitHub 账号</h4><p>如果你还没有 <code>GitHub</code> 账号的话，请先 <a href=\"https://github.com/join\" target=\"_blank\" rel=\"external\">注册</a>。</p>\n<h4 id=\"为-GitHub-账号设置-SSH-Key\"><a href=\"#为-GitHub-账号设置-SSH-Key\" class=\"headerlink\" title=\"为 GitHub 账号设置 SSH Key\"></a>为 <code>GitHub</code> 账号设置 <code>SSH Key</code></h4><p>生成 <code>SSH Key</code>，开始之前，我们先使用以下命令来检查主机上是否已经生成过 <code>SSH Key</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果存在 <code>id_rsa</code> 和 <code>id_rsa.pub</code>的话，请跳过以下生成 <code>SSH</code> 的步骤继续阅读剩下内容。<br>否则使用以下方法来生成 <code>SSH Key</code>，请将 <code>your_email@example.com</code> 替换为你的邮箱：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>命令行会提示让你指定秘钥的名称，按回车键将 <code>SSH Key</code>保存到默认文件名即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</div></pre></td></tr></table></figure></p>\n<p>接下来会询问你为 <code>SSH Key</code> 设置密码，每次提交需要用到，可以设置，也可以按回车键即可，默认为空密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase (empty for no passphrase): [Type a passphrase]</div><div class=\"line\">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure></p>\n<p>可以都选择默认，也就是直接敲击几个 <code>Enter</code> 键即可。这时候我们再检查一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>可以看到以下两个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">id_rsa —— SSH 秘钥的 私钥 (Private Key)</div><div class=\"line\">id_rsa.pub —— SSH 秘钥的 公钥 (Public Key)</div></pre></td></tr></table></figure></p>\n<p>接下来将 <code>SSH Key</code> 添加到 <code>ssh-agent</code> 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ eval `ssh-agent -s`</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>打印出公钥 <code>id_rsa.pub</code> 文件里的内容，并把输出的内容复制到剪贴板里：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/copyssh.png\" alt=\"copyssh\"></p>\n<p>最后我们需要将公钥添加到 GitHub 账号，先打开 <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">Github SSH</a> 令牌管理页面，然后把你刚刚复制的令牌按照下图示例添加：</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/sshkey%E6%B7%BB%E5%8A%A0.png\" alt=\"sshkey添加\"></p>\n<p>测试<code>ssh key</code>是否成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>输入完密码后，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n<h4 id=\"提交代码到-Github\"><a href=\"#提交代码到-Github\" class=\"headerlink\" title=\"提交代码到 Github\"></a>提交代码到 Github</h4><p>在配置完 GitHub 账号之后，我们便可以开始在上面存放项目代码了。首先 <a href=\"https://github.com/new\" target=\"_blank\" rel=\"external\">新建一个 GitHub 仓库</a>，取名为 <code>你项目的名字</code>，填上 <code>Description</code> 项目描述，<code>Initialize this repository with a README</code> 这一项是询问你是否需要生成一个默认的介绍。</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E6%96%B0%E4%BB%93%E5%BA%93.png\" alt=\"新仓库\"></p>\n<p>创建完成之后，使用以下命令将代码上传到 <code>GitHub</code> 上（将 <code>your_username</code> 替换为你自己的 <code>GitHub</code> 用户名，<code>your_projectname</code> 是你的项目名字，就是刚刚创建仓库的名字）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:your_username/your_projectname.git</div><div class=\"line\">$ git push -u origin master</div></pre></td></tr></table></figure></p>\n<p>至此，项目已成功托管到 GitHub 上。<br>(如果Git 提示<code>fatal: remote origin already exists</code><a href=\"http://blog.csdn.net/top_code/article/details/50381432\" target=\"_blank\" rel=\"external\">请看这里</a>)<br>(如果提示<code>error: src refspec master does not match any</code><a href=\"http://www.jianshu.com/p/8d26730386f3\" target=\"_blank\" rel=\"external\">请看这里</a>))</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F.png\" alt=\"代码提交成功\"></p>\n<h4 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h4><p>后面我们如果对本地代码进行了改动，只需运行这 3 条命令即可将代码推送到安全可靠的 <code>GitHub</code> 上：</p>\n<p><code>注意：以下命令作为知识重温，不需要执行</code></p>\n<p>1、保存到暂存区,-A也可以换成指定文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure></p>\n<p>2、输入描述信息并提交到本地的 Git：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Say something&quot;</div></pre></td></tr></table></figure></p>\n<p>3、将代码推送到 GitHub：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push</div></pre></td></tr></table></figure></p>\n<h2 id=\"Git-进阶操作\"><a href=\"#Git-进阶操作\" class=\"headerlink\" title=\"Git 进阶操作\"></a>Git 进阶操作</h2><h3 id=\"误删恢复\"><a href=\"#误删恢复\" class=\"headerlink\" title=\"误删恢复\"></a>误删恢复</h3><p>通过上面 <code>Git</code> 的基本讲解，你可能还无法真正体会到 <code>Git</code> 的强大。在平时开发中，我们有时候可能会因为手误或其它原因将某些重要文件删除。如果之前有将此文件纳入到 <code>Git</code> 中，这时便可以利用 <code>Git</code> 来对误删文件进行恢复。请看下面演示。</p>\n<p>我们先假装不小心删除 <code>what.md</code> 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm what.md</div><div class=\"line\">$ ll</div></pre></td></tr></table></figure></p>\n<p>使用 ll 打印出文件目录列表时，能看到 <code>what.md</code> 文件已被成功移除。</p>\n<p>查看 Git 状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Your branch is up-to-date with &apos;origin/master&apos;.</div><div class=\"line\"></div><div class=\"line\">Changes not staged for commit:</div><div class=\"line\">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class=\"line\"></div><div class=\"line\">        deleted:    what.md</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>\n<p>能看到有相关提示显示 <code>what.md</code> 文件已被删除，这时你可以选择将删除的文件进行恢复或提交。</p>\n<p>下面我们使用 <code>Git</code> 进行恢复被删除文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -f</div><div class=\"line\">$ ll</div></pre></td></tr></table></figure></p>\n<p>这时能看到 <code>what.md</code> 文件已成功恢复。<code>git checkout -f</code> 的作用是将在暂存区的更改文件进行强制撤销。</p>\n<h3 id=\"从GitHub克隆项目到本地\"><a href=\"#从GitHub克隆项目到本地\" class=\"headerlink\" title=\"从GitHub克隆项目到本地\"></a>从GitHub克隆项目到本地</h3><p>首先到我们要克隆的到GitHub的某个仓库，比如<a href=\"https://github.com/imyhui/neuq-acmclubTD\" target=\"_blank\" rel=\"external\">neuq-acmclubTD</a>,右边有个绿色的<code>Clone or download</code>，点开后有<code>Clone with HTTPS</code>，当然你也可以直接下载</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%85%8B%E9%9A%86%E8%BF%9E%E6%8E%A5.png\" alt=\"克隆连接\"></p>\n<p>然后回到要存放的目录下，右键<code>Git Bash here</code>使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/imyhui/neuq-acmclubTD.git</div></pre></td></tr></table></figure></p>\n<p>如果本地的版本不是最新的，可以使用以下命令，<code>origin</code>是本地仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure></p>\n<p>把更新的内容合并到本地分支，可以使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge origin/master</div></pre></td></tr></table></figure></p>\n<p>如果你不想手动去合并，那么你可以使用以下命令,这个命令可以拉去最新版本并自动合并<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull &lt;本地仓库&gt; master</div></pre></td></tr></table></figure></p>\n<p>注意:记得如果不是单独另需创建的branch，每次对本地仓库操作的时候都要使用 <code>git pull</code>命令，更新远程仓库到本地中，防止冲突。这点和SVN的update类似</p>\n<h3 id=\"GitHub的分支管理\"><a href=\"#GitHub的分支管理\" class=\"headerlink\" title=\"GitHub的分支管理\"></a>GitHub的分支管理</h3><p>几乎所有的版本控制系统都以某种形式支持分支。<strong>使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</strong> 有人把 <code>Git</code> 的分支模型称为它的<code>‘必杀技特性’</code>，也正因为这一特性，使得 <code>Git</code>从众多版本控制系统中脱颖而出。<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"external\">了解分支</a></p>\n<h4 id=\"分支创建合并删除\"><a href=\"#分支创建合并删除\" class=\"headerlink\" title=\"分支创建合并删除\"></a>分支创建合并删除</h4><ol>\n<li>首先选中主分支<br><code>git checkout master</code> 代表将当前分支切换到 <code>master</code> 分支上，<code>master</code> 分支是我们初始化 <code>Git</code> 时默认创建的主分支，其它分支都是基于主分支衍生出来的。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<ol>\n<li><p>创建一个本地分支： <code>git branch &lt;新分支名字&gt;</code>,比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到新建立的分支： <code>git checkout &lt;新分支名&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout new_branch</div><div class=\"line\">Switched to branch &apos;new_branch&apos;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2、3 步骤其实可以用一条命令搞定 <code>git checkout -b new_branch</code>，我习惯用这条,区别<a href=\"https://my.oschina.net/u/587974/blog/74341\" target=\"_blank\" rel=\"external\">参考这里</a></p>\n<p>你可以将新建的 <code>new_branch</code> 理解为是对 <code>master</code> 分支的克隆，在上面做的所有修改都不会影响到 <code>master</code> 分支。本节后面会将 <code>new_branch</code> 分支合并到 <code>master</code> 分支上，合并成功之后，在 <code>new_branch</code> 分支上做的所有改动都会并入到 <code>master</code> 分支。另外，你也可以选择对一个分支进行删除操作，当一个分支被删除之后，在该分支之上的所有改动也都将被销毁，删除分支的操作不会影响到 <code>master</code> 分支。这便是 <code>Git</code> 工作流的强大之处。</p>\n<ol>\n<li><p>合并分支操作是<code>git merge &lt;分支名称&gt;</code>将分支的操作合并到主分支上,注意，多人协作中当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为<code>冲突(conflict)</code>。解决冲突需要人工处理。，解决冲突看<a href=\"http://www.cnblogs.com/mengdd/p/3585038.html\" target=\"_blank\" rel=\"external\">这里</a>，合并分支示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>从本地删除一个分支： <code>git branch -d &lt;分支名称&gt;</code>, 删除分支示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>将本地分支同步到GitHub上面： <code>git push &lt;本地仓库名&gt; &lt;新分支名&gt;</code></p>\n</li>\n<li><p>为你的分支加入一个新的远程端： <code>git remote add &lt;远程端名字&gt; &lt;地址&gt;</code></p>\n</li>\n<li><p>查看当前仓库有几个分支: <code>git branch</code></p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过以上配置后，之后新建仓库操作如下进行即可</p>\n<ol>\n<li>进入对应目录 <code>cd 你的仓库目录</code></li>\n<li>初始化git仓库 <code>git init</code></li>\n<li>添加提交的文件</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件数</th>\n<th>指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一个文件</td>\n<td><code>git add 文件名</code></td>\n</tr>\n<tr>\n<td>全部文件</td>\n<td><code>git add -A</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li>提交修改提示 <code>git commit -m</code></li>\n<li>查看提交状态 <code>git status</code></li>\n<li>查看最近日志 <code>git log</code></li>\n<li>版本回退操作</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>回退次数</th>\n<th style=\"text-align:left\">指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>回退一个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD^</code></td>\n</tr>\n<tr>\n<td>回退两个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD^^</code></td>\n</tr>\n<tr>\n<td>回退多个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD~100</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li>(第一次连接)远程仓库提交 <code>git remote add origin 你复制的地址</code></li>\n<li>(第二次以后)远程仓库提交 <code>git push</code></li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://try.github.io/\" target=\"_blank\" rel=\"external\">github官方教程</a></p>\n<p><a href=\"https://fsdhub.com/books/laravel-essential-training-5.5\" target=\"_blank\" rel=\"external\">Laravel 教程 - Web 开发实战入门 ( Laravel 5.5 ) </a></p>\n<p><a href=\"http://www.linuxidc.com/Linux/2014-03/97821.htm\" target=\"_blank\" rel=\"external\">Linux下Git和GitHub使用方法总结</a></p>\n<p><a href=\"http://hanfu.space/%E6%8A%80%E6%9C%AF/2015/08/26/git-tutorial/\" target=\"_blank\" rel=\"external\">Git 初学者</a></p>\n<p><a href=\"http://blog.csdn.net/nellson/article/details/51526273\" target=\"_blank\" rel=\"external\">mac os x使用Git简易入门教程 </a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">《Pro Git》</a></p>\n<p>推荐看下<a href=\"https://try.github.io/\" target=\"_blank\" rel=\"external\"><code>github官方教程</code></a>和<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\"><code>《Pro Git》</code></a>。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p><code>Git</code>与<code>GitHub</code>基础教程到这就结束了，熬夜写了两晚上······半夜写头脑难免混乱可能有疏漏的地方，欢迎给我留言，有部分是参考以上链接的部分内容，侵删。希望大家看完这个教程能有一定收获，毕竟这是以后的合作途径。好了我要去补实验报告了&gt;.&lt;。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"什么是-Git\"><a href=\"#什么是-Git\" class=\"headerlink\" title=\"什么是 Git\"></a>什么是 Git</h3><blockquote>\n<p><strong>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</strong> 项目加上Git后能能更好的追踪代码修改，进行版本回溯等操作。当今时代，多人协作开发是公司合作的基本模式，在多人协作的开发过程中Git变得必不可少，接下来大致介绍下Git的基本命令以及GitHub的基本使用。</p>\n</blockquote>","more":"<h3 id=\"为什么用Git\"><a href=\"#为什么用Git\" class=\"headerlink\" title=\"为什么用Git\"></a>为什么用Git</h3><h4 id=\"提高开发效率\"><a href=\"#提高开发效率\" class=\"headerlink\" title=\"提高开发效率!\"></a>提高开发效率!</h4><blockquote>\n<p>git不仅仅是一个代码版本管理工具，也是一个文档管理工具，在git上很容易维护一个文档</p>\n</blockquote>\n<h4 id=\"git可以提高开发效率，主要表现在\"><a href=\"#git可以提高开发效率，主要表现在\" class=\"headerlink\" title=\"git可以提高开发效率，主要表现在:\"></a>git可以提高开发效率，主要表现在:</h4><ul>\n<li>合并对提交过程的保留</li>\n<li>修正提交</li>\n<li>廉价好用的本地分支</li>\n<li>更强大智能的合并能力</li>\n<li>完整配套的开发过程设施(wiki issue 功能大赞！)</li>\n<li>查看日志</li>\n</ul>\n<p>转自 <a href=\"http://www.jianshu.com/p/834678d9c213\" target=\"_blank\" rel=\"external\">Koudle</a></p>\n<h3 id=\"Git的下载及安装\"><a href=\"#Git的下载及安装\" class=\"headerlink\" title=\"Git的下载及安装\"></a>Git的下载及安装</h3><p>首先肯定是<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">下载Git</a><br>( <code>提醒:资源下载较慢，推荐挂vpn</code>)</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/git%E4%B8%8B%E8%BD%BD.png\" alt=\"git下载\"></p>\n<p>然后安装界面如下(<code>windows平台</code>)</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%851.png\" alt=\"安装1\"></p>\n<p>这里注意这两个都是添加到右键菜单栏，很好用</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%AE%89%E8%A3%852.png\" alt=\"安装2\"></p>\n<p>一路next下去就好</p>\n<p>安装完后 打开终端输入<br><code>注意 $ 是表示从命令行输入，不用自己输入，只需要输入后面内容即可，后面一致</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div></pre></td></tr></table></figure></p>\n<p>如果显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git version 2.14.1.windows.1</div></pre></td></tr></table></figure></p>\n<p>表示安装成功了</p>\n<h3 id=\"Git基本设置\"><a href=\"#Git基本设置\" class=\"headerlink\" title=\"Git基本设置\"></a>Git基本设置</h3><p>在桌面上右键<code>Git Bash here</code> 启动git bush命令行界面<br>当然也可以从终端打开</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%90%AF%E5%8A%A8.png\" alt=\"启动\"></p>\n<p>首先我们对 <code>Git</code> 进行全局用户名和邮箱进行设置，请参照下面格式，<code>Your Name</code> 替换为你的名字， <code>you@example.com</code> 替换为你的邮箱<br>这里个人信息设置的作用，是为你在代码提交时自动署名标记，方便查看提交日志时区分作者。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email you@example.com</div></pre></td></tr></table></figure></p>\n<p>接下来进行Git推送分支相关设置<br>这个是命令 <code>Git</code>当我们执行 <code>git push</code> 没有指定分支时，自动使用当前分支，而不是报错。<a href=\"http://blog.csdn.net/daijingxin/article/details/51326715\" target=\"_blank\" rel=\"external\">更多关于push.default</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global push.default simple</div></pre></td></tr></table></figure>\n<h3 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h3><p>对于有经验的开发者来说，在他每次新建完开发项目的时候，首先要做的第一件事就是将自己的项目纳入到 <code>Git</code> 代码版本管理中，完成这个操作一般需要以下这几个步骤：</p>\n<h4 id=\"对Git进行初始化\"><a href=\"#对Git进行初始化\" class=\"headerlink\" title=\"对Git进行初始化\"></a>对Git进行初始化</h4><p>我们要在对应的项目文件夹(文件夹内)对git初始化，<br>windows下可直接在对应文件夹下右键 <code>Git Bush here</code><br>也可以用命令行找到对应文件夹，<br>这里我们用命令行示范下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd D:/andyhui/DataStructure</div><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<p><code>D:/andyhui/DataStructure</code>这个是我自己的文件目录，替换成你项目的文件目录即可,如果没有就自己创建一个，在里面随意放一个文件即可，比如 一个说明<code>what.md</code>或 代码文件 <code>HelloWorld.cpp</code></p>\n<h4 id=\"将项目所有文件纳入到Git暂存区中\"><a href=\"#将项目所有文件纳入到Git暂存区中\" class=\"headerlink\" title=\"将项目所有文件纳入到Git暂存区中\"></a>将项目所有文件纳入到Git暂存区中</h4><p>这些文件并未真正提交到Git上<br>这里<code>-A</code> 是all的意思，我们也可以指定一个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure></p>\n<p> 这里的所有文件指的是没在 <code>.gitignore</code> 中被忽略的文件。在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会来选择忽略掉一些我们不想纳入到 Git 版本管理中的文件（如缓存文件）。<a href=\"http://bdxnote.blog.163.com/blog/static/844423520124153051409/\" target=\"_blank\" rel=\"external\">git忽略文件设置</a>以及<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000\" target=\"_blank\" rel=\"external\">了解更多.gitignore</a>。</p>\n<h4 id=\"检查-Git-状态\"><a href=\"#检查-Git-状态\" class=\"headerlink\" title=\"检查 Git 状态\"></a>检查 Git 状态</h4><p>这条命令将会向你输出存放在 <code>Git</code> 暂存区的文件，这意味着这些文件还未真正提交到 Git 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure></p>\n<h4 id=\"保留改动并提交\"><a href=\"#保留改动并提交\" class=\"headerlink\" title=\"保留改动并提交\"></a>保留改动并提交</h4><p>这行命令会将暂存区的文件都提交到 <code>Git</code>，-m 选项后面带的参数表示本次提交的简单描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Initial commit&quot;</div><div class=\"line\">$ git log</div><div class=\"line\">commit e7419d269d65021fa056b731e09f8bdeaac00d9d (HEAD -&gt; master, origin/master)</div><div class=\"line\">Author: andyhui &lt;andyhui686666@gmail.com&gt;</div><div class=\"line\">Date:   Thu Sep 21 09:24:53 2017 +0800</div><div class=\"line\"></div><div class=\"line\">    Initial commit</div></pre></td></tr></table></figure></p>\n<h4 id=\"查看历史提交记录：\"><a href=\"#查看历史提交记录：\" class=\"headerlink\" title=\"查看历史提交记录：\"></a>查看历史提交记录：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<p>从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。按 <code>q</code>可退出查看。</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/gitlog.png\" alt=\"gitlog\"></p>\n<p>git 基本提交操作到这就结束了，如果你想学习更多关于 <code>Git</code> 相关的知识，可以查阅<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">《Pro Git》</a>一书进行学习。</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><h3 id=\"什么是-GitHub\"><a href=\"#什么是-GitHub\" class=\"headerlink\" title=\"什么是 GitHub\"></a>什么是 GitHub</h3><p><code>GitHub</code> 是目前全球最大的代码托管平台，许多非常著名的项目如 Linux、Swift、Laravel 等都托管在 <code>GitHub</code> 上。开发者们利用 <code>GitHub</code> 来进行团队协作开发，查阅或收藏别人开源项目的优秀代码，针对某个 <code>Bug</code> 进行技术讨论等。</p>\n<h3 id=\"GitHub基本操作\"><a href=\"#GitHub基本操作\" class=\"headerlink\" title=\"GitHub基本操作\"></a>GitHub基本操作</h3><h4 id=\"注册-GitHub-账号\"><a href=\"#注册-GitHub-账号\" class=\"headerlink\" title=\"注册 GitHub 账号\"></a>注册 GitHub 账号</h4><p>如果你还没有 <code>GitHub</code> 账号的话，请先 <a href=\"https://github.com/join\" target=\"_blank\" rel=\"external\">注册</a>。</p>\n<h4 id=\"为-GitHub-账号设置-SSH-Key\"><a href=\"#为-GitHub-账号设置-SSH-Key\" class=\"headerlink\" title=\"为 GitHub 账号设置 SSH Key\"></a>为 <code>GitHub</code> 账号设置 <code>SSH Key</code></h4><p>生成 <code>SSH Key</code>，开始之前，我们先使用以下命令来检查主机上是否已经生成过 <code>SSH Key</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>如果存在 <code>id_rsa</code> 和 <code>id_rsa.pub</code>的话，请跳过以下生成 <code>SSH</code> 的步骤继续阅读剩下内容。<br>否则使用以下方法来生成 <code>SSH Key</code>，请将 <code>your_email@example.com</code> 替换为你的邮箱：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>\n<p>命令行会提示让你指定秘钥的名称，按回车键将 <code>SSH Key</code>保存到默认文件名即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</div></pre></td></tr></table></figure></p>\n<p>接下来会询问你为 <code>SSH Key</code> 设置密码，每次提交需要用到，可以设置，也可以按回车键即可，默认为空密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter passphrase (empty for no passphrase): [Type a passphrase]</div><div class=\"line\">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure></p>\n<p>可以都选择默认，也就是直接敲击几个 <code>Enter</code> 键即可。这时候我们再检查一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p>\n<p>可以看到以下两个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">id_rsa —— SSH 秘钥的 私钥 (Private Key)</div><div class=\"line\">id_rsa.pub —— SSH 秘钥的 公钥 (Public Key)</div></pre></td></tr></table></figure></p>\n<p>接下来将 <code>SSH Key</code> 添加到 <code>ssh-agent</code> 中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ eval `ssh-agent -s`</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>打印出公钥 <code>id_rsa.pub</code> 文件里的内容，并把输出的内容复制到剪贴板里：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/copyssh.png\" alt=\"copyssh\"></p>\n<p>最后我们需要将公钥添加到 GitHub 账号，先打开 <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">Github SSH</a> 令牌管理页面，然后把你刚刚复制的令牌按照下图示例添加：</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/sshkey%E6%B7%BB%E5%8A%A0.png\" alt=\"sshkey添加\"></p>\n<p>测试<code>ssh key</code>是否成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>\n<p>输入完密码后，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n<h4 id=\"提交代码到-Github\"><a href=\"#提交代码到-Github\" class=\"headerlink\" title=\"提交代码到 Github\"></a>提交代码到 Github</h4><p>在配置完 GitHub 账号之后，我们便可以开始在上面存放项目代码了。首先 <a href=\"https://github.com/new\" target=\"_blank\" rel=\"external\">新建一个 GitHub 仓库</a>，取名为 <code>你项目的名字</code>，填上 <code>Description</code> 项目描述，<code>Initialize this repository with a README</code> 这一项是询问你是否需要生成一个默认的介绍。</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E6%96%B0%E4%BB%93%E5%BA%93.png\" alt=\"新仓库\"></p>\n<p>创建完成之后，使用以下命令将代码上传到 <code>GitHub</code> 上（将 <code>your_username</code> 替换为你自己的 <code>GitHub</code> 用户名，<code>your_projectname</code> 是你的项目名字，就是刚刚创建仓库的名字）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:your_username/your_projectname.git</div><div class=\"line\">$ git push -u origin master</div></pre></td></tr></table></figure></p>\n<p>至此，项目已成功托管到 GitHub 上。<br>(如果Git 提示<code>fatal: remote origin already exists</code><a href=\"http://blog.csdn.net/top_code/article/details/50381432\" target=\"_blank\" rel=\"external\">请看这里</a>)<br>(如果提示<code>error: src refspec master does not match any</code><a href=\"http://www.jianshu.com/p/8d26730386f3\" target=\"_blank\" rel=\"external\">请看这里</a>))</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F.png\" alt=\"代码提交成功\"></p>\n<h4 id=\"小总结\"><a href=\"#小总结\" class=\"headerlink\" title=\"小总结\"></a>小总结</h4><p>后面我们如果对本地代码进行了改动，只需运行这 3 条命令即可将代码推送到安全可靠的 <code>GitHub</code> 上：</p>\n<p><code>注意：以下命令作为知识重温，不需要执行</code></p>\n<p>1、保存到暂存区,-A也可以换成指定文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure></p>\n<p>2、输入描述信息并提交到本地的 Git：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Say something&quot;</div></pre></td></tr></table></figure></p>\n<p>3、将代码推送到 GitHub：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push</div></pre></td></tr></table></figure></p>\n<h2 id=\"Git-进阶操作\"><a href=\"#Git-进阶操作\" class=\"headerlink\" title=\"Git 进阶操作\"></a>Git 进阶操作</h2><h3 id=\"误删恢复\"><a href=\"#误删恢复\" class=\"headerlink\" title=\"误删恢复\"></a>误删恢复</h3><p>通过上面 <code>Git</code> 的基本讲解，你可能还无法真正体会到 <code>Git</code> 的强大。在平时开发中，我们有时候可能会因为手误或其它原因将某些重要文件删除。如果之前有将此文件纳入到 <code>Git</code> 中，这时便可以利用 <code>Git</code> 来对误删文件进行恢复。请看下面演示。</p>\n<p>我们先假装不小心删除 <code>what.md</code> 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm what.md</div><div class=\"line\">$ ll</div></pre></td></tr></table></figure></p>\n<p>使用 ll 打印出文件目录列表时，能看到 <code>what.md</code> 文件已被成功移除。</p>\n<p>查看 Git 状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Your branch is up-to-date with &apos;origin/master&apos;.</div><div class=\"line\"></div><div class=\"line\">Changes not staged for commit:</div><div class=\"line\">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class=\"line\"></div><div class=\"line\">        deleted:    what.md</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>\n<p>能看到有相关提示显示 <code>what.md</code> 文件已被删除，这时你可以选择将删除的文件进行恢复或提交。</p>\n<p>下面我们使用 <code>Git</code> 进行恢复被删除文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -f</div><div class=\"line\">$ ll</div></pre></td></tr></table></figure></p>\n<p>这时能看到 <code>what.md</code> 文件已成功恢复。<code>git checkout -f</code> 的作用是将在暂存区的更改文件进行强制撤销。</p>\n<h3 id=\"从GitHub克隆项目到本地\"><a href=\"#从GitHub克隆项目到本地\" class=\"headerlink\" title=\"从GitHub克隆项目到本地\"></a>从GitHub克隆项目到本地</h3><p>首先到我们要克隆的到GitHub的某个仓库，比如<a href=\"https://github.com/imyhui/neuq-acmclubTD\" target=\"_blank\" rel=\"external\">neuq-acmclubTD</a>,右边有个绿色的<code>Clone or download</code>，点开后有<code>Clone with HTTPS</code>，当然你也可以直接下载</p>\n<p><img src=\"http://githubblog.andyhui.top/image/gitfirstuse/%E5%85%8B%E9%9A%86%E8%BF%9E%E6%8E%A5.png\" alt=\"克隆连接\"></p>\n<p>然后回到要存放的目录下，右键<code>Git Bash here</code>使用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/imyhui/neuq-acmclubTD.git</div></pre></td></tr></table></figure></p>\n<p>如果本地的版本不是最新的，可以使用以下命令，<code>origin</code>是本地仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure></p>\n<p>把更新的内容合并到本地分支，可以使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge origin/master</div></pre></td></tr></table></figure></p>\n<p>如果你不想手动去合并，那么你可以使用以下命令,这个命令可以拉去最新版本并自动合并<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull &lt;本地仓库&gt; master</div></pre></td></tr></table></figure></p>\n<p>注意:记得如果不是单独另需创建的branch，每次对本地仓库操作的时候都要使用 <code>git pull</code>命令，更新远程仓库到本地中，防止冲突。这点和SVN的update类似</p>\n<h3 id=\"GitHub的分支管理\"><a href=\"#GitHub的分支管理\" class=\"headerlink\" title=\"GitHub的分支管理\"></a>GitHub的分支管理</h3><p>几乎所有的版本控制系统都以某种形式支持分支。<strong>使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</strong> 有人把 <code>Git</code> 的分支模型称为它的<code>‘必杀技特性’</code>，也正因为这一特性，使得 <code>Git</code>从众多版本控制系统中脱颖而出。<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"external\">了解分支</a></p>\n<h4 id=\"分支创建合并删除\"><a href=\"#分支创建合并删除\" class=\"headerlink\" title=\"分支创建合并删除\"></a>分支创建合并删除</h4><ol>\n<li>首先选中主分支<br><code>git checkout master</code> 代表将当前分支切换到 <code>master</code> 分支上，<code>master</code> 分支是我们初始化 <code>Git</code> 时默认创建的主分支，其它分支都是基于主分支衍生出来的。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure>\n<ol>\n<li><p>创建一个本地分支： <code>git branch &lt;新分支名字&gt;</code>,比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>切换到新建立的分支： <code>git checkout &lt;新分支名&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout new_branch</div><div class=\"line\">Switched to branch &apos;new_branch&apos;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2、3 步骤其实可以用一条命令搞定 <code>git checkout -b new_branch</code>，我习惯用这条,区别<a href=\"https://my.oschina.net/u/587974/blog/74341\" target=\"_blank\" rel=\"external\">参考这里</a></p>\n<p>你可以将新建的 <code>new_branch</code> 理解为是对 <code>master</code> 分支的克隆，在上面做的所有修改都不会影响到 <code>master</code> 分支。本节后面会将 <code>new_branch</code> 分支合并到 <code>master</code> 分支上，合并成功之后，在 <code>new_branch</code> 分支上做的所有改动都会并入到 <code>master</code> 分支。另外，你也可以选择对一个分支进行删除操作，当一个分支被删除之后，在该分支之上的所有改动也都将被销毁，删除分支的操作不会影响到 <code>master</code> 分支。这便是 <code>Git</code> 工作流的强大之处。</p>\n<ol>\n<li><p>合并分支操作是<code>git merge &lt;分支名称&gt;</code>将分支的操作合并到主分支上,注意，多人协作中当两条分支对同一个文件的同一个文本块进行了不同的修改，并试图合并时，Git不能自动合并的，称之为<code>冲突(conflict)</code>。解决冲突需要人工处理。，解决冲突看<a href=\"http://www.cnblogs.com/mengdd/p/3585038.html\" target=\"_blank\" rel=\"external\">这里</a>，合并分支示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>从本地删除一个分支： <code>git branch -d &lt;分支名称&gt;</code>, 删除分支示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d new_branch</div></pre></td></tr></table></figure>\n</li>\n<li><p>将本地分支同步到GitHub上面： <code>git push &lt;本地仓库名&gt; &lt;新分支名&gt;</code></p>\n</li>\n<li><p>为你的分支加入一个新的远程端： <code>git remote add &lt;远程端名字&gt; &lt;地址&gt;</code></p>\n</li>\n<li><p>查看当前仓库有几个分支: <code>git branch</code></p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过以上配置后，之后新建仓库操作如下进行即可</p>\n<ol>\n<li>进入对应目录 <code>cd 你的仓库目录</code></li>\n<li>初始化git仓库 <code>git init</code></li>\n<li>添加提交的文件</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件数</th>\n<th>指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一个文件</td>\n<td><code>git add 文件名</code></td>\n</tr>\n<tr>\n<td>全部文件</td>\n<td><code>git add -A</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li>提交修改提示 <code>git commit -m</code></li>\n<li>查看提交状态 <code>git status</code></li>\n<li>查看最近日志 <code>git log</code></li>\n<li>版本回退操作</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>回退次数</th>\n<th style=\"text-align:left\">指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>回退一个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD^</code></td>\n</tr>\n<tr>\n<td>回退两个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD^^</code></td>\n</tr>\n<tr>\n<td>回退多个</td>\n<td style=\"text-align:left\"><code>git reset -hard HEAD~100</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ol>\n<li>(第一次连接)远程仓库提交 <code>git remote add origin 你复制的地址</code></li>\n<li>(第二次以后)远程仓库提交 <code>git push</code></li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://try.github.io/\" target=\"_blank\" rel=\"external\">github官方教程</a></p>\n<p><a href=\"https://fsdhub.com/books/laravel-essential-training-5.5\" target=\"_blank\" rel=\"external\">Laravel 教程 - Web 开发实战入门 ( Laravel 5.5 ) </a></p>\n<p><a href=\"http://www.linuxidc.com/Linux/2014-03/97821.htm\" target=\"_blank\" rel=\"external\">Linux下Git和GitHub使用方法总结</a></p>\n<p><a href=\"http://hanfu.space/%E6%8A%80%E6%9C%AF/2015/08/26/git-tutorial/\" target=\"_blank\" rel=\"external\">Git 初学者</a></p>\n<p><a href=\"http://blog.csdn.net/nellson/article/details/51526273\" target=\"_blank\" rel=\"external\">mac os x使用Git简易入门教程 </a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">《Pro Git》</a></p>\n<p>推荐看下<a href=\"https://try.github.io/\" target=\"_blank\" rel=\"external\"><code>github官方教程</code></a>和<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\"><code>《Pro Git》</code></a>。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p><code>Git</code>与<code>GitHub</code>基础教程到这就结束了，熬夜写了两晚上······半夜写头脑难免混乱可能有疏漏的地方，欢迎给我留言，有部分是参考以上链接的部分内容，侵删。希望大家看完这个教程能有一定收获，毕竟这是以后的合作途径。好了我要去补实验报告了&gt;.&lt;。</p>"},{"title":"糗事百科爬虫","date":"2017-09-02T05:57:19.000Z","_content":"\n\n> 一周前买了阿里云服务器，简单部署了一个JudgeService，感觉闲着也是闲着，决定在上面部署一个爬虫，打算每隔一段时间爬取糗事百科前几页的文本段子并以邮件的形式发送到qq邮箱中。\n\n---\n\n### 基本环境\n> requests + smtplib + bs4\n> 都可以用pip install 来安装\n\n\n<!-- more -->\n### 分析需求\n> 基本目的是爬取糗事百科文本部分前几页内容保存\n> 后续操作有通过邮件发送到邮箱，之后是挂载到云服务器上每隔一段时间自动爬取并发送邮件\n\n#### 分析url\n> 我们这次只爬取文字内容，所以这次爬取的url是 __'https://www.qiushibaike.com/text/'__\n> 点开第二页会发现 url变为 __'https://www.qiushibaike.com/text/page/2/'__\n> 很清晰的知道 第i页的url也就是 url = __'https://www.qiushibaike.com/text/page/%s/'%str(i)__\n> 我们要爬前多少页也就是一个for循环的事\n\n#### 分析网页源码\n> 首先来看下网页的基本内容\n![]()\n\n> 我们要做的是提取这一个个文本，然后保存下来\n\n> 根据网页源码很容易看出 内容是在 class=\"content\"的div标签下，可以直接套用正则表达式，我们这使用BeautifulSoup库的find_all函数就可以搞定\n![]()\n\n### 构造request请求\n\n> 首先就是通过requests库得到网页源码 _html = requests.get(url)_\n\n> 这里我们加一个小的异常处理，也就是如果爬取不到我们将错误信息写入一个文件，文件名为**Http error on time.ctime()** 这里的**[time.ctime()](http://www.runoob.com/python/att-time-ctime.html)**是包含在time里面的一个函数，返回当前时间。\n\n> 然后用BeautifulSoup做成一锅汤**soup = BeautifulSoup(html.text, 'lxml')**\n这里我们用lxml HTML 解析器，因为它的优势是速度快，文档容错能力强，(更多关于BeautifulSoup)[http://cuiqingcai.com/1319.html]\n\n之后我们用_find_all_找到每一个笑话，之后呢，把换行标签替换掉，然后加到data\\_list 中去\n\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nimport lxml\ndef getcontent(url):\n    try:\n        html = requests.get(url)\n    except:\n        with open(\"log.log\",\"a\") as file:\n            file.write(\"Http error on \" + time.ctime())\n        time.sleep(60)\n        return None\n    soup = BeautifulSoup(html.text, 'lxml')\n    data_list = []\n    for cont in soup.find_all(\"div\", {\"class\":\"content\"}):\n        raw_data = cont.get_text()\n        data = raw_data.replace(\"\\n\",\"\")\n        data_list.append(data)\n    return data_list\n\ndef main():\n    data_list = []\n    for i in range(1,2):\n        url = 'https://www.qiushibaike.com/text/page/%s/'%str(i)\n        temp_data = getcontent(url)\n        data_list.extend(temp_data)\n    for i in data_list:\n        print(i)\n        print('\\n\\n')\nmain()\n```\n### 未完待续","source":"_posts/qsbkspider.md","raw":"---\ntitle: 糗事百科爬虫\ndate: 2017-09-02 13:57:19\ntags:\n- 爬虫\n- linux\n- python\n- requests\n- BeautifulSoup\ncategories:\n- python\npermalink: qsbkspider\n---\n\n\n> 一周前买了阿里云服务器，简单部署了一个JudgeService，感觉闲着也是闲着，决定在上面部署一个爬虫，打算每隔一段时间爬取糗事百科前几页的文本段子并以邮件的形式发送到qq邮箱中。\n\n---\n\n### 基本环境\n> requests + smtplib + bs4\n> 都可以用pip install 来安装\n\n\n<!-- more -->\n### 分析需求\n> 基本目的是爬取糗事百科文本部分前几页内容保存\n> 后续操作有通过邮件发送到邮箱，之后是挂载到云服务器上每隔一段时间自动爬取并发送邮件\n\n#### 分析url\n> 我们这次只爬取文字内容，所以这次爬取的url是 __'https://www.qiushibaike.com/text/'__\n> 点开第二页会发现 url变为 __'https://www.qiushibaike.com/text/page/2/'__\n> 很清晰的知道 第i页的url也就是 url = __'https://www.qiushibaike.com/text/page/%s/'%str(i)__\n> 我们要爬前多少页也就是一个for循环的事\n\n#### 分析网页源码\n> 首先来看下网页的基本内容\n![]()\n\n> 我们要做的是提取这一个个文本，然后保存下来\n\n> 根据网页源码很容易看出 内容是在 class=\"content\"的div标签下，可以直接套用正则表达式，我们这使用BeautifulSoup库的find_all函数就可以搞定\n![]()\n\n### 构造request请求\n\n> 首先就是通过requests库得到网页源码 _html = requests.get(url)_\n\n> 这里我们加一个小的异常处理，也就是如果爬取不到我们将错误信息写入一个文件，文件名为**Http error on time.ctime()** 这里的**[time.ctime()](http://www.runoob.com/python/att-time-ctime.html)**是包含在time里面的一个函数，返回当前时间。\n\n> 然后用BeautifulSoup做成一锅汤**soup = BeautifulSoup(html.text, 'lxml')**\n这里我们用lxml HTML 解析器，因为它的优势是速度快，文档容错能力强，(更多关于BeautifulSoup)[http://cuiqingcai.com/1319.html]\n\n之后我们用_find_all_找到每一个笑话，之后呢，把换行标签替换掉，然后加到data\\_list 中去\n\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nimport lxml\ndef getcontent(url):\n    try:\n        html = requests.get(url)\n    except:\n        with open(\"log.log\",\"a\") as file:\n            file.write(\"Http error on \" + time.ctime())\n        time.sleep(60)\n        return None\n    soup = BeautifulSoup(html.text, 'lxml')\n    data_list = []\n    for cont in soup.find_all(\"div\", {\"class\":\"content\"}):\n        raw_data = cont.get_text()\n        data = raw_data.replace(\"\\n\",\"\")\n        data_list.append(data)\n    return data_list\n\ndef main():\n    data_list = []\n    for i in range(1,2):\n        url = 'https://www.qiushibaike.com/text/page/%s/'%str(i)\n        temp_data = getcontent(url)\n        data_list.extend(temp_data)\n    for i in data_list:\n        print(i)\n        print('\\n\\n')\nmain()\n```\n### 未完待续","slug":"qsbkspider","published":1,"updated":"2019-03-04T09:08:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvuu000omqfyey5rfnkx","content":"<blockquote>\n<p>一周前买了阿里云服务器，简单部署了一个JudgeService，感觉闲着也是闲着，决定在上面部署一个爬虫，打算每隔一段时间爬取糗事百科前几页的文本段子并以邮件的形式发送到qq邮箱中。</p>\n</blockquote>\n<hr>\n<h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><blockquote>\n<p>requests + smtplib + bs4<br>都可以用pip install 来安装</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><blockquote>\n<p>基本目的是爬取糗事百科文本部分前几页内容保存<br>后续操作有通过邮件发送到邮箱，之后是挂载到云服务器上每隔一段时间自动爬取并发送邮件</p>\n</blockquote>\n<h4 id=\"分析url\"><a href=\"#分析url\" class=\"headerlink\" title=\"分析url\"></a>分析url</h4><blockquote>\n<p>我们这次只爬取文字内容，所以这次爬取的url是 <strong>‘<a href=\"https://www.qiushibaike.com/text/\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/</a>‘</strong><br>点开第二页会发现 url变为 <strong>‘<a href=\"https://www.qiushibaike.com/text/page/2/\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/page/2/</a>‘</strong><br>很清晰的知道 第i页的url也就是 url = <strong>‘<a href=\"https://www.qiushibaike.com/text/page/%s/&#39;%str(i\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/page/%s/&#39;%str(i</a>)</strong><br>我们要爬前多少页也就是一个for循环的事</p>\n</blockquote>\n<h4 id=\"分析网页源码\"><a href=\"#分析网页源码\" class=\"headerlink\" title=\"分析网页源码\"></a>分析网页源码</h4><blockquote>\n<p>首先来看下网页的基本内容<br><img src alt></p>\n<p>我们要做的是提取这一个个文本，然后保存下来</p>\n<p>根据网页源码很容易看出 内容是在 class=”content”的div标签下，可以直接套用正则表达式，我们这使用BeautifulSoup库的find_all函数就可以搞定<br><img src alt></p>\n</blockquote>\n<h3 id=\"构造request请求\"><a href=\"#构造request请求\" class=\"headerlink\" title=\"构造request请求\"></a>构造request请求</h3><blockquote>\n<p>首先就是通过requests库得到网页源码 <em>html = requests.get(url)</em></p>\n<p>这里我们加一个小的异常处理，也就是如果爬取不到我们将错误信息写入一个文件，文件名为<strong>Http error on time.ctime()</strong> 这里的<strong><a href=\"http://www.runoob.com/python/att-time-ctime.html\" target=\"_blank\" rel=\"external\">time.ctime()</a></strong>是包含在time里面的一个函数，返回当前时间。</p>\n<p>然后用BeautifulSoup做成一锅汤<strong>soup = BeautifulSoup(html.text, ‘lxml’)</strong><br>这里我们用lxml HTML 解析器，因为它的优势是速度快，文档容错能力强，(更多关于BeautifulSoup)[<a href=\"http://cuiqingcai.com/1319.html\" target=\"_blank\" rel=\"external\">http://cuiqingcai.com/1319.html</a>]</p>\n</blockquote>\n<p>之后我们用<em>find_all</em>找到每一个笑话，之后呢，把换行标签替换掉，然后加到data_list 中去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> lxml</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getcontent</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        html = requests.get(url)</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">\"log.log\"</span>,<span class=\"string\">\"a\"</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">            file.write(<span class=\"string\">\"Http error on \"</span> + time.ctime())</div><div class=\"line\">        time.sleep(<span class=\"number\">60</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">    soup = BeautifulSoup(html.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">    data_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> cont <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">\"div\"</span>, &#123;<span class=\"string\">\"class\"</span>:<span class=\"string\">\"content\"</span>&#125;):</div><div class=\"line\">        raw_data = cont.get_text()</div><div class=\"line\">        data = raw_data.replace(<span class=\"string\">\"\\n\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        data_list.append(data)</div><div class=\"line\">    <span class=\"keyword\">return</span> data_list</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">2</span>):</div><div class=\"line\">        url = <span class=\"string\">'https://www.qiushibaike.com/text/page/%s/'</span>%str(i)</div><div class=\"line\">        temp_data = getcontent(url)</div><div class=\"line\">        data_list.extend(temp_data)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data_list:</div><div class=\"line\">        print(i)</div><div class=\"line\">        print(<span class=\"string\">'\\n\\n'</span>)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>一周前买了阿里云服务器，简单部署了一个JudgeService，感觉闲着也是闲着，决定在上面部署一个爬虫，打算每隔一段时间爬取糗事百科前几页的文本段子并以邮件的形式发送到qq邮箱中。</p>\n</blockquote>\n<hr>\n<h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><blockquote>\n<p>requests + smtplib + bs4<br>都可以用pip install 来安装</p>\n</blockquote>","more":"<h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><blockquote>\n<p>基本目的是爬取糗事百科文本部分前几页内容保存<br>后续操作有通过邮件发送到邮箱，之后是挂载到云服务器上每隔一段时间自动爬取并发送邮件</p>\n</blockquote>\n<h4 id=\"分析url\"><a href=\"#分析url\" class=\"headerlink\" title=\"分析url\"></a>分析url</h4><blockquote>\n<p>我们这次只爬取文字内容，所以这次爬取的url是 <strong>‘<a href=\"https://www.qiushibaike.com/text/\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/</a>‘</strong><br>点开第二页会发现 url变为 <strong>‘<a href=\"https://www.qiushibaike.com/text/page/2/\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/page/2/</a>‘</strong><br>很清晰的知道 第i页的url也就是 url = <strong>‘<a href=\"https://www.qiushibaike.com/text/page/%s/&#39;%str(i\" target=\"_blank\" rel=\"external\">https://www.qiushibaike.com/text/page/%s/&#39;%str(i</a>)</strong><br>我们要爬前多少页也就是一个for循环的事</p>\n</blockquote>\n<h4 id=\"分析网页源码\"><a href=\"#分析网页源码\" class=\"headerlink\" title=\"分析网页源码\"></a>分析网页源码</h4><blockquote>\n<p>首先来看下网页的基本内容<br><img src alt></p>\n<p>我们要做的是提取这一个个文本，然后保存下来</p>\n<p>根据网页源码很容易看出 内容是在 class=”content”的div标签下，可以直接套用正则表达式，我们这使用BeautifulSoup库的find_all函数就可以搞定<br><img src alt></p>\n</blockquote>\n<h3 id=\"构造request请求\"><a href=\"#构造request请求\" class=\"headerlink\" title=\"构造request请求\"></a>构造request请求</h3><blockquote>\n<p>首先就是通过requests库得到网页源码 <em>html = requests.get(url)</em></p>\n<p>这里我们加一个小的异常处理，也就是如果爬取不到我们将错误信息写入一个文件，文件名为<strong>Http error on time.ctime()</strong> 这里的<strong><a href=\"http://www.runoob.com/python/att-time-ctime.html\" target=\"_blank\" rel=\"external\">time.ctime()</a></strong>是包含在time里面的一个函数，返回当前时间。</p>\n<p>然后用BeautifulSoup做成一锅汤<strong>soup = BeautifulSoup(html.text, ‘lxml’)</strong><br>这里我们用lxml HTML 解析器，因为它的优势是速度快，文档容错能力强，(更多关于BeautifulSoup)[<a href=\"http://cuiqingcai.com/1319.html\" target=\"_blank\" rel=\"external\">http://cuiqingcai.com/1319.html</a>]</p>\n</blockquote>\n<p>之后我们用<em>find_all</em>找到每一个笑话，之后呢，把换行标签替换掉，然后加到data_list 中去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> lxml</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getcontent</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        html = requests.get(url)</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">with</span> open(<span class=\"string\">\"log.log\"</span>,<span class=\"string\">\"a\"</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">            file.write(<span class=\"string\">\"Http error on \"</span> + time.ctime())</div><div class=\"line\">        time.sleep(<span class=\"number\">60</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">    soup = BeautifulSoup(html.text, <span class=\"string\">'lxml'</span>)</div><div class=\"line\">    data_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> cont <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">\"div\"</span>, &#123;<span class=\"string\">\"class\"</span>:<span class=\"string\">\"content\"</span>&#125;):</div><div class=\"line\">        raw_data = cont.get_text()</div><div class=\"line\">        data = raw_data.replace(<span class=\"string\">\"\\n\"</span>,<span class=\"string\">\"\"</span>)</div><div class=\"line\">        data_list.append(data)</div><div class=\"line\">    <span class=\"keyword\">return</span> data_list</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">2</span>):</div><div class=\"line\">        url = <span class=\"string\">'https://www.qiushibaike.com/text/page/%s/'</span>%str(i)</div><div class=\"line\">        temp_data = getcontent(url)</div><div class=\"line\">        data_list.extend(temp_data)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data_list:</div><div class=\"line\">        print(i)</div><div class=\"line\">        print(<span class=\"string\">'\\n\\n'</span>)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>"},{"title":"15分钟用Docker部署PHP开发环境","date":"2017-12-08T18:41:17.000Z","_content":"## 为什么使用laradock\n>  搭建环境对于上手框架的新人是一件头疼的事,多人协作开发,线上线下环境的一致也是一个很麻烦的问题,而`laradock`的使用,完美解决了这个问题,相比`homestead`与`vagrant`,`laradock`更加轻量级,只需要数秒就可以完成启动,既可以作为开发环境也可以作为生产环境,支持`PHP`、`MySQL`、 `Nginx`等一系列软件,且安装较为简便。\n\n支持的软件有\n```\n> Database Engines: MySQL - MariaDB - Percona - MongoDB - Neo4j - RethinkDB - MSSQL - PostgreSQL - Postgres-PostGIS.\n> Database Management: PhpMyAdmin - Adminer - PgAdmin\n> Cache Engines: Redis - Memcached - Aerospike\n> PHP Servers: NGINX - Apache2 - Caddy\n> PHP Compilers: PHP FPM - HHVM\n> Message Queueing: Beanstalkd - RabbitMQ - PHP Worker\n> Queueing Management: Beanstalkd Console - RabbitMQ Console\n> Random Tools: HAProxy - Certbot - Blackfire - Selenium - Jenkins - ElasticSearch - Kibana - Grafana - Mailhog - MailDev - Minio - Varnish - Swoole - Laravel Echo…\n```\n\n<!-- more -->\n\n## 依赖\n+ [Git](https://git-scm.com/downloads)\n+ [Docker](https://www.docker.com/community-edition) `>= 1.12`\n\n    > 可以通过`docker -v`查看自己的docker版本，一定要保证大于`1.12`，否则会遇到各种问题，推荐安装`17.0`以上，之前`1.13.1`mysql启动不了。\n\n    附上我的docker版本\n    ```\n    > docker version\n    Client:\n    Version:      17.05.0-ce\n    API version:  1.29\n    Go version:   go1.7.5\n    Git commit:   89658be\n    Built:        Thu May  4 22:09:06 2017\n    OS/Arch:      linux/amd64\n\n    Server:\n    Version:      17.05.0-ce\n    API version:  1.29 (minimum version 1.12)\n    Go version:   go1.7.5\n    Git commit:   89658be\n    Built:        Thu May  4 22:09:06 2017\n    OS/Arch:      linux/amd64\n    Experimental: false\n    ```\n\n## 安装\n### 选择安装位置\n+ 首先选择一个文件目录，克隆`laradock`，理论上文件目录可以任选，推荐这样的文件结构\n    ```\n    + laradock\n    + project-1\n    + project-2\n    ```\n+ 这样每个项目文件夹和`laradock`是平行的关系，多个项目共用一个`laradock`,也可以每个项目单独装一个laradock，推荐第一种方式\n### 安装laradock\n```\ngit clone https://github.com/laradock/laradock.git\n```\n### 安装Laravel\n1. 进入`laradock`文件夹\n    ```\n    cd ~/Code/laradock\n    ```\n    > `Code`是我存放项目的文件夹\n2. 修改配置文件\n    ```\n    cp env-example .env\n    ```\n    > 编辑`.env`文件可以修改需要安装软件，以及相关软件的设置，如php版本、mysql数据库名称等\n3. 构建环境\n    ```\n    docker-compose up -d nginx mysql\n    ```\n    > `workspace` 和 `php-fpm`会自动启动，这个不用添加在后面，后面可选择的软件有\n    ```\n    nginx, hhvm, php-fpm, mysql, redis, postgres, mariadb, neo4j, mongo, apache2, caddy, memcached, beanstalkd, beanstalkd-console, workspace\n    ```\n    > 第一次构建需下载安装镜像，会花较长时间，之后启动仅需数秒。\n\n    > 可以用`docker-compose ps`查看容器运行状态\n4. 进入`workspace`容器\n+ 执行`Artisan`, `Composer`, `PHPUnit`等命令需要进入`workspace`容器内才能执行\n    ```\n    docker-compose exec --user=laradock workspace bash\n    ```\n    > 以`laradock`身份进入容器，也可以执行`docker-compose exec workspace bash`\n5. `Laravel`相关配置\n> 从一个项目的创建来说明相关配置\n+ 创建一个`Laravel`项目\n    ```\n    composer create-project laravel/laravel testapp --prefer-dist \"5.5.*\"\n    ```\n+ 修改刚创建应用的`.env`文件，主要要修改以下几个地方\n    ```\n    ...\n    DB_HOST=mysql\n    DB_DATABASE=default\n    DB_USERNAME=default\n    DB_PASSWORD=secret\n\n    REDIS_HOST=redis\n    ...\n    ```\n+ 修改`nginx`相关配置\n    + 进入`nginx`站点配置文件夹`/laradock/nginx/sites`\n        > 默认给出了`app.conf.example`, `laravel.conf.example` 等文件夹，克隆一份修改对应名字\n        ```\n        cp app.conf.example testapp.conf\n        ```\n    + 编辑配置文件\n        > 修改下主页对应位置，`/var/www/`对应的是laradock的同级目录，应用要对应到`public`文件夹\n        ```\n        ...\n        server_name testapp.dev;\n        root /var/www/testapp/public;\n        ...\n        ```\n    + 在hosts里添加解析,文件路径为`/etc/hosts`\n        ```\n        127.0.0.1 testapp.dev\n        ```\n    + 重启nginx\n        ```\n        > docker-compose restart nginx\n        Restarting laradock_nginx_1 ... done\n        ```\n    + 打开浏览器输入` testapp.dev`看到如下界面即安装成功\n\n        ![安装成功](http://githubblog.andyhui.top/%E6%88%90%E5%8A%9F.png)\n## 参考\n[官方文档](http://laradock.io/)\n[项目地址](https://github.com/laradock/laradock)","source":"_posts/LaradockInstall.md","raw":"---\ntitle: 15分钟用Docker部署PHP开发环境\ndate: 2017-12-09 02:41:17\ntags:\n- 后端\n- laradock\n- docker\n- laravel\ncategories:\n- 后端学习\npermalink: LaradockInstall\n---\n## 为什么使用laradock\n>  搭建环境对于上手框架的新人是一件头疼的事,多人协作开发,线上线下环境的一致也是一个很麻烦的问题,而`laradock`的使用,完美解决了这个问题,相比`homestead`与`vagrant`,`laradock`更加轻量级,只需要数秒就可以完成启动,既可以作为开发环境也可以作为生产环境,支持`PHP`、`MySQL`、 `Nginx`等一系列软件,且安装较为简便。\n\n支持的软件有\n```\n> Database Engines: MySQL - MariaDB - Percona - MongoDB - Neo4j - RethinkDB - MSSQL - PostgreSQL - Postgres-PostGIS.\n> Database Management: PhpMyAdmin - Adminer - PgAdmin\n> Cache Engines: Redis - Memcached - Aerospike\n> PHP Servers: NGINX - Apache2 - Caddy\n> PHP Compilers: PHP FPM - HHVM\n> Message Queueing: Beanstalkd - RabbitMQ - PHP Worker\n> Queueing Management: Beanstalkd Console - RabbitMQ Console\n> Random Tools: HAProxy - Certbot - Blackfire - Selenium - Jenkins - ElasticSearch - Kibana - Grafana - Mailhog - MailDev - Minio - Varnish - Swoole - Laravel Echo…\n```\n\n<!-- more -->\n\n## 依赖\n+ [Git](https://git-scm.com/downloads)\n+ [Docker](https://www.docker.com/community-edition) `>= 1.12`\n\n    > 可以通过`docker -v`查看自己的docker版本，一定要保证大于`1.12`，否则会遇到各种问题，推荐安装`17.0`以上，之前`1.13.1`mysql启动不了。\n\n    附上我的docker版本\n    ```\n    > docker version\n    Client:\n    Version:      17.05.0-ce\n    API version:  1.29\n    Go version:   go1.7.5\n    Git commit:   89658be\n    Built:        Thu May  4 22:09:06 2017\n    OS/Arch:      linux/amd64\n\n    Server:\n    Version:      17.05.0-ce\n    API version:  1.29 (minimum version 1.12)\n    Go version:   go1.7.5\n    Git commit:   89658be\n    Built:        Thu May  4 22:09:06 2017\n    OS/Arch:      linux/amd64\n    Experimental: false\n    ```\n\n## 安装\n### 选择安装位置\n+ 首先选择一个文件目录，克隆`laradock`，理论上文件目录可以任选，推荐这样的文件结构\n    ```\n    + laradock\n    + project-1\n    + project-2\n    ```\n+ 这样每个项目文件夹和`laradock`是平行的关系，多个项目共用一个`laradock`,也可以每个项目单独装一个laradock，推荐第一种方式\n### 安装laradock\n```\ngit clone https://github.com/laradock/laradock.git\n```\n### 安装Laravel\n1. 进入`laradock`文件夹\n    ```\n    cd ~/Code/laradock\n    ```\n    > `Code`是我存放项目的文件夹\n2. 修改配置文件\n    ```\n    cp env-example .env\n    ```\n    > 编辑`.env`文件可以修改需要安装软件，以及相关软件的设置，如php版本、mysql数据库名称等\n3. 构建环境\n    ```\n    docker-compose up -d nginx mysql\n    ```\n    > `workspace` 和 `php-fpm`会自动启动，这个不用添加在后面，后面可选择的软件有\n    ```\n    nginx, hhvm, php-fpm, mysql, redis, postgres, mariadb, neo4j, mongo, apache2, caddy, memcached, beanstalkd, beanstalkd-console, workspace\n    ```\n    > 第一次构建需下载安装镜像，会花较长时间，之后启动仅需数秒。\n\n    > 可以用`docker-compose ps`查看容器运行状态\n4. 进入`workspace`容器\n+ 执行`Artisan`, `Composer`, `PHPUnit`等命令需要进入`workspace`容器内才能执行\n    ```\n    docker-compose exec --user=laradock workspace bash\n    ```\n    > 以`laradock`身份进入容器，也可以执行`docker-compose exec workspace bash`\n5. `Laravel`相关配置\n> 从一个项目的创建来说明相关配置\n+ 创建一个`Laravel`项目\n    ```\n    composer create-project laravel/laravel testapp --prefer-dist \"5.5.*\"\n    ```\n+ 修改刚创建应用的`.env`文件，主要要修改以下几个地方\n    ```\n    ...\n    DB_HOST=mysql\n    DB_DATABASE=default\n    DB_USERNAME=default\n    DB_PASSWORD=secret\n\n    REDIS_HOST=redis\n    ...\n    ```\n+ 修改`nginx`相关配置\n    + 进入`nginx`站点配置文件夹`/laradock/nginx/sites`\n        > 默认给出了`app.conf.example`, `laravel.conf.example` 等文件夹，克隆一份修改对应名字\n        ```\n        cp app.conf.example testapp.conf\n        ```\n    + 编辑配置文件\n        > 修改下主页对应位置，`/var/www/`对应的是laradock的同级目录，应用要对应到`public`文件夹\n        ```\n        ...\n        server_name testapp.dev;\n        root /var/www/testapp/public;\n        ...\n        ```\n    + 在hosts里添加解析,文件路径为`/etc/hosts`\n        ```\n        127.0.0.1 testapp.dev\n        ```\n    + 重启nginx\n        ```\n        > docker-compose restart nginx\n        Restarting laradock_nginx_1 ... done\n        ```\n    + 打开浏览器输入` testapp.dev`看到如下界面即安装成功\n\n        ![安装成功](http://githubblog.andyhui.top/%E6%88%90%E5%8A%9F.png)\n## 参考\n[官方文档](http://laradock.io/)\n[项目地址](https://github.com/laradock/laradock)","slug":"LaradockInstall","published":1,"updated":"2019-03-04T11:00:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvuv000qmqfy03z4ml76","content":"<h2 id=\"为什么使用laradock\"><a href=\"#为什么使用laradock\" class=\"headerlink\" title=\"为什么使用laradock\"></a>为什么使用laradock</h2><blockquote>\n<p> 搭建环境对于上手框架的新人是一件头疼的事,多人协作开发,线上线下环境的一致也是一个很麻烦的问题,而<code>laradock</code>的使用,完美解决了这个问题,相比<code>homestead</code>与<code>vagrant</code>,<code>laradock</code>更加轻量级,只需要数秒就可以完成启动,既可以作为开发环境也可以作为生产环境,支持<code>PHP</code>、<code>MySQL</code>、 <code>Nginx</code>等一系列软件,且安装较为简便。</p>\n</blockquote>\n<p>支持的软件有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Database Engines: MySQL - MariaDB - Percona - MongoDB - Neo4j - RethinkDB - MSSQL - PostgreSQL - Postgres-PostGIS.</div><div class=\"line\">&gt; Database Management: PhpMyAdmin - Adminer - PgAdmin</div><div class=\"line\">&gt; Cache Engines: Redis - Memcached - Aerospike</div><div class=\"line\">&gt; PHP Servers: NGINX - Apache2 - Caddy</div><div class=\"line\">&gt; PHP Compilers: PHP FPM - HHVM</div><div class=\"line\">&gt; Message Queueing: Beanstalkd - RabbitMQ - PHP Worker</div><div class=\"line\">&gt; Queueing Management: Beanstalkd Console - RabbitMQ Console</div><div class=\"line\">&gt; Random Tools: HAProxy - Certbot - Blackfire - Selenium - Jenkins - ElasticSearch - Kibana - Grafana - Mailhog - MailDev - Minio - Varnish - Swoole - Laravel Echo…</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><ul>\n<li><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><p><a href=\"https://www.docker.com/community-edition\" target=\"_blank\" rel=\"external\">Docker</a> <code>&gt;= 1.12</code></p>\n<blockquote>\n<p>可以通过<code>docker -v</code>查看自己的docker版本，一定要保证大于<code>1.12</code>，否则会遇到各种问题，推荐安装<code>17.0</code>以上，之前<code>1.13.1</code>mysql启动不了。</p>\n</blockquote>\n<p>  附上我的docker版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; docker version</div><div class=\"line\">Client:</div><div class=\"line\">Version:      17.05.0-ce</div><div class=\"line\">API version:  1.29</div><div class=\"line\">Go version:   go1.7.5</div><div class=\"line\">Git commit:   89658be</div><div class=\"line\">Built:        Thu May  4 22:09:06 2017</div><div class=\"line\">OS/Arch:      linux/amd64</div><div class=\"line\"></div><div class=\"line\">Server:</div><div class=\"line\">Version:      17.05.0-ce</div><div class=\"line\">API version:  1.29 (minimum version 1.12)</div><div class=\"line\">Go version:   go1.7.5</div><div class=\"line\">Git commit:   89658be</div><div class=\"line\">Built:        Thu May  4 22:09:06 2017</div><div class=\"line\">OS/Arch:      linux/amd64</div><div class=\"line\">Experimental: false</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"选择安装位置\"><a href=\"#选择安装位置\" class=\"headerlink\" title=\"选择安装位置\"></a>选择安装位置</h3><ul>\n<li><p>首先选择一个文件目录，克隆<code>laradock</code>，理论上文件目录可以任选，推荐这样的文件结构</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ laradock</div><div class=\"line\">+ project-1</div><div class=\"line\">+ project-2</div></pre></td></tr></table></figure>\n</li>\n<li><p>这样每个项目文件夹和<code>laradock</code>是平行的关系，多个项目共用一个<code>laradock</code>,也可以每个项目单独装一个laradock，推荐第一种方式</p>\n<h3 id=\"安装laradock\"><a href=\"#安装laradock\" class=\"headerlink\" title=\"安装laradock\"></a>安装laradock</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/laradock/laradock.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装Laravel\"><a href=\"#安装Laravel\" class=\"headerlink\" title=\"安装Laravel\"></a>安装Laravel</h3><ol>\n<li><p>进入<code>laradock</code>文件夹</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Code/laradock</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Code</code>是我存放项目的文件夹</p>\n</blockquote>\n</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp env-example .env</div></pre></td></tr></table></figure>\n<blockquote>\n<p>编辑<code>.env</code>文件可以修改需要安装软件，以及相关软件的设置，如php版本、mysql数据库名称等</p>\n</blockquote>\n</li>\n<li><p>构建环境</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose up -d nginx mysql</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>workspace</code> 和 <code>php-fpm</code>会自动启动，这个不用添加在后面，后面可选择的软件有</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx, hhvm, php-fpm, mysql, redis, postgres, mariadb, neo4j, mongo, apache2, caddy, memcached, beanstalkd, beanstalkd-console, workspace</div></pre></td></tr></table></figure>\n<p>第一次构建需下载安装镜像，会花较长时间，之后启动仅需数秒。</p>\n<p>可以用<code>docker-compose ps</code>查看容器运行状态</p>\n</blockquote>\n</li>\n<li>进入<code>workspace</code>容器</li>\n</ol>\n<ul>\n<li><p>执行<code>Artisan</code>, <code>Composer</code>, <code>PHPUnit</code>等命令需要进入<code>workspace</code>容器内才能执行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose exec --user=laradock workspace bash</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以<code>laradock</code>身份进入容器，也可以执行<code>docker-compose exec workspace bash</code></p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><code>Laravel</code>相关配置<blockquote>\n<p>从一个项目的创建来说明相关配置</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>创建一个<code>Laravel</code>项目</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project laravel/laravel testapp --prefer-dist &quot;5.5.*&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改刚创建应用的<code>.env</code>文件，主要要修改以下几个地方</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">DB_HOST=mysql</div><div class=\"line\">DB_DATABASE=default</div><div class=\"line\">DB_USERNAME=default</div><div class=\"line\">DB_PASSWORD=secret</div><div class=\"line\"></div><div class=\"line\">REDIS_HOST=redis</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>nginx</code>相关配置</p>\n<ul>\n<li><p>进入<code>nginx</code>站点配置文件夹<code>/laradock/nginx/sites</code></p>\n<blockquote>\n<p>默认给出了<code>app.conf.example</code>, <code>laravel.conf.example</code> 等文件夹，克隆一份修改对应名字</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp app.conf.example testapp.conf</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>编辑配置文件</p>\n<blockquote>\n<p>修改下主页对应位置，<code>/var/www/</code>对应的是laradock的同级目录，应用要对应到<code>public</code>文件夹</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">server_name testapp.dev;</div><div class=\"line\">root /var/www/testapp/public;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>在hosts里添加解析,文件路径为<code>/etc/hosts</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 testapp.dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启nginx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; docker-compose restart nginx</div><div class=\"line\">Restarting laradock_nginx_1 ... done</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器输入<code>testapp.dev</code>看到如下界面即安装成功</p>\n<p>  <img src=\"http://githubblog.andyhui.top/%E6%88%90%E5%8A%9F.png\" alt=\"安装成功\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://laradock.io/\" target=\"_blank\" rel=\"external\">官方文档</a><br><a href=\"https://github.com/laradock/laradock\" target=\"_blank\" rel=\"external\">项目地址</a></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么使用laradock\"><a href=\"#为什么使用laradock\" class=\"headerlink\" title=\"为什么使用laradock\"></a>为什么使用laradock</h2><blockquote>\n<p> 搭建环境对于上手框架的新人是一件头疼的事,多人协作开发,线上线下环境的一致也是一个很麻烦的问题,而<code>laradock</code>的使用,完美解决了这个问题,相比<code>homestead</code>与<code>vagrant</code>,<code>laradock</code>更加轻量级,只需要数秒就可以完成启动,既可以作为开发环境也可以作为生产环境,支持<code>PHP</code>、<code>MySQL</code>、 <code>Nginx</code>等一系列软件,且安装较为简便。</p>\n</blockquote>\n<p>支持的软件有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Database Engines: MySQL - MariaDB - Percona - MongoDB - Neo4j - RethinkDB - MSSQL - PostgreSQL - Postgres-PostGIS.</div><div class=\"line\">&gt; Database Management: PhpMyAdmin - Adminer - PgAdmin</div><div class=\"line\">&gt; Cache Engines: Redis - Memcached - Aerospike</div><div class=\"line\">&gt; PHP Servers: NGINX - Apache2 - Caddy</div><div class=\"line\">&gt; PHP Compilers: PHP FPM - HHVM</div><div class=\"line\">&gt; Message Queueing: Beanstalkd - RabbitMQ - PHP Worker</div><div class=\"line\">&gt; Queueing Management: Beanstalkd Console - RabbitMQ Console</div><div class=\"line\">&gt; Random Tools: HAProxy - Certbot - Blackfire - Selenium - Jenkins - ElasticSearch - Kibana - Grafana - Mailhog - MailDev - Minio - Varnish - Swoole - Laravel Echo…</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><ul>\n<li><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><p><a href=\"https://www.docker.com/community-edition\" target=\"_blank\" rel=\"external\">Docker</a> <code>&gt;= 1.12</code></p>\n<blockquote>\n<p>可以通过<code>docker -v</code>查看自己的docker版本，一定要保证大于<code>1.12</code>，否则会遇到各种问题，推荐安装<code>17.0</code>以上，之前<code>1.13.1</code>mysql启动不了。</p>\n</blockquote>\n<p>  附上我的docker版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; docker version</div><div class=\"line\">Client:</div><div class=\"line\">Version:      17.05.0-ce</div><div class=\"line\">API version:  1.29</div><div class=\"line\">Go version:   go1.7.5</div><div class=\"line\">Git commit:   89658be</div><div class=\"line\">Built:        Thu May  4 22:09:06 2017</div><div class=\"line\">OS/Arch:      linux/amd64</div><div class=\"line\"></div><div class=\"line\">Server:</div><div class=\"line\">Version:      17.05.0-ce</div><div class=\"line\">API version:  1.29 (minimum version 1.12)</div><div class=\"line\">Go version:   go1.7.5</div><div class=\"line\">Git commit:   89658be</div><div class=\"line\">Built:        Thu May  4 22:09:06 2017</div><div class=\"line\">OS/Arch:      linux/amd64</div><div class=\"line\">Experimental: false</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"选择安装位置\"><a href=\"#选择安装位置\" class=\"headerlink\" title=\"选择安装位置\"></a>选择安装位置</h3><ul>\n<li><p>首先选择一个文件目录，克隆<code>laradock</code>，理论上文件目录可以任选，推荐这样的文件结构</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ laradock</div><div class=\"line\">+ project-1</div><div class=\"line\">+ project-2</div></pre></td></tr></table></figure>\n</li>\n<li><p>这样每个项目文件夹和<code>laradock</code>是平行的关系，多个项目共用一个<code>laradock</code>,也可以每个项目单独装一个laradock，推荐第一种方式</p>\n<h3 id=\"安装laradock\"><a href=\"#安装laradock\" class=\"headerlink\" title=\"安装laradock\"></a>安装laradock</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/laradock/laradock.git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"安装Laravel\"><a href=\"#安装Laravel\" class=\"headerlink\" title=\"安装Laravel\"></a>安装Laravel</h3><ol>\n<li><p>进入<code>laradock</code>文件夹</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Code/laradock</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Code</code>是我存放项目的文件夹</p>\n</blockquote>\n</li>\n<li><p>修改配置文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp env-example .env</div></pre></td></tr></table></figure>\n<blockquote>\n<p>编辑<code>.env</code>文件可以修改需要安装软件，以及相关软件的设置，如php版本、mysql数据库名称等</p>\n</blockquote>\n</li>\n<li><p>构建环境</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose up -d nginx mysql</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>workspace</code> 和 <code>php-fpm</code>会自动启动，这个不用添加在后面，后面可选择的软件有</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx, hhvm, php-fpm, mysql, redis, postgres, mariadb, neo4j, mongo, apache2, caddy, memcached, beanstalkd, beanstalkd-console, workspace</div></pre></td></tr></table></figure>\n<p>第一次构建需下载安装镜像，会花较长时间，之后启动仅需数秒。</p>\n<p>可以用<code>docker-compose ps</code>查看容器运行状态</p>\n</blockquote>\n</li>\n<li>进入<code>workspace</code>容器</li>\n</ol>\n<ul>\n<li><p>执行<code>Artisan</code>, <code>Composer</code>, <code>PHPUnit</code>等命令需要进入<code>workspace</code>容器内才能执行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker-compose exec --user=laradock workspace bash</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以<code>laradock</code>身份进入容器，也可以执行<code>docker-compose exec workspace bash</code></p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><code>Laravel</code>相关配置<blockquote>\n<p>从一个项目的创建来说明相关配置</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>创建一个<code>Laravel</code>项目</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project laravel/laravel testapp --prefer-dist &quot;5.5.*&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改刚创建应用的<code>.env</code>文件，主要要修改以下几个地方</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">DB_HOST=mysql</div><div class=\"line\">DB_DATABASE=default</div><div class=\"line\">DB_USERNAME=default</div><div class=\"line\">DB_PASSWORD=secret</div><div class=\"line\"></div><div class=\"line\">REDIS_HOST=redis</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>nginx</code>相关配置</p>\n<ul>\n<li><p>进入<code>nginx</code>站点配置文件夹<code>/laradock/nginx/sites</code></p>\n<blockquote>\n<p>默认给出了<code>app.conf.example</code>, <code>laravel.conf.example</code> 等文件夹，克隆一份修改对应名字</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp app.conf.example testapp.conf</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>编辑配置文件</p>\n<blockquote>\n<p>修改下主页对应位置，<code>/var/www/</code>对应的是laradock的同级目录，应用要对应到<code>public</code>文件夹</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">server_name testapp.dev;</div><div class=\"line\">root /var/www/testapp/public;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>在hosts里添加解析,文件路径为<code>/etc/hosts</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 testapp.dev</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启nginx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; docker-compose restart nginx</div><div class=\"line\">Restarting laradock_nginx_1 ... done</div></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器输入<code>testapp.dev</code>看到如下界面即安装成功</p>\n<p>  <img src=\"http://githubblog.andyhui.top/%E6%88%90%E5%8A%9F.png\" alt=\"安装成功\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://laradock.io/\" target=\"_blank\" rel=\"external\">官方文档</a><br><a href=\"https://github.com/laradock/laradock\" target=\"_blank\" rel=\"external\">项目地址</a></p>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"oj信息爬取","date":"2017-08-29T07:04:51.000Z","_content":"\n\n> 假期俱乐部举办了编程训练营，每个人负责管理15人的营，每天作业会在oj的一个总榜上\n> 关于各营营长每天统计很麻烦，所以我写了一个简单的爬虫来节省一部分工作\n> ** 代码改变世界，使人更高效的完成自己的工作**\n\n---\n\n### 基本环境\n\n> Windows 10 + python 3.6.2 + requests 库\n\n<!-- more -->\n### requests 库安装\n\n```python\npip install requests\n```\n\n![requests安装](http://githubblog.andyhui.top/requests%E5%AE%89%E8%A3%85.png)\n\n### 分析需求\n\n> 首先需要统计的 Contest 有3周的作业 加 最后的结课测试\n\n![ojContestList](http://githubblog.andyhui.top/ojContestList.png)\n\n> 每个榜单结构都是一致的，我只需要统计自己营里的**昵称**和**总解决数目**就好\n\n![oj榜单](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95.png)\n\n> url 是 \"http://oj.acmclub.cn/contestrank.php?cid=\" + contestID\n\n> 右键查看网页源代码 两个a标签中刚好有我们的数据，用简单正则表达式匹配下就好\n\n![oj榜单源码](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png)\n\n### 构造request爬取网页\n\n> 首先拿出一个榜单来处理，由于不需要登陆就可以查看榜单所以我直接抓取榜单html页面\n\n``` python\nimport requests\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\ndef main():\n    for no in range(1166,1169):\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        print(html)\nmain()\n```\n\n**这算一个基本框架了，通过request得到网页源码，中间_r.raise_for_status()_是错误检查，后面是根据推断的编码类型设置字符编码**\n运行结果如下\n![result1](http://githubblog.andyhui.top/result1.png)\n### 对html源码处理\n\n> 首先看网页源码\n\n![oj榜单源码](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png)\n\n> 这里可以用正则表达式库 **re** 来进行字符匹配，如果昵称符合规范**xx营xx号_Nickname_name**就很容易处理了，匹配两个a标签之间的内容\n``` python\nrege = r'<a href=.*?>(0{0,1}'+str(num)+'营.*?)</a><td><a href=.*?>([0-9]{1,2})</a>'\n```\n\n> 对html的处理函数也就是很容易写了\n\n``` python\nimport requests\nimport re\ndef getHTMLText(url):\n    #省略\ndef fillscoreList(slist, html, num):\n    rege = r'<a href=.*?>(0{0,1}'+str(num)+'营.*?)</a><td><a href=.*?>([0-9]{1,2})</a>'\n    score = re.findall(rege,html)\n    for x in score:\n        slist.append(x)\n\ndef main():\n    num = int(input(\"请输入营号:\"))\n    for no in range(1166,1169):\n        sinfo = []\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        fillscoreList(sinfo, html, num)\n        for (name,solve) in  sinfo:\n            print(name,solve)\nmain()\n```\n这样得到的sinfo就是包含元组(name,solve)的列表，程序到这阶段基本算是完工了，但是输出的样式也并不尽人意，比如_没有对齐_，看起来很乱，而且三周内容_挤在一块_不好区分，接下来就对这个程序进行优化\n![result2](http://githubblog.andyhui.top/result2.png)\n\n### 格式化输出\n\n> 我们想要达到的效果是三周内容清晰可辨，并且有良好的对齐，下面就来是实现下\n> python 的 字符串 有**format函数**，通过这个来达到我们想要的效果\n> 对于(xx营xx号_Nickname_name,solve_num)这样一个元组，通过格式限定符来达到**指定字段宽度**和**居中对齐**\n\n``` python\ntplt = \"{0:<20}\\t\\t{1:^3}\"\nprint(tplt.format(\"xx营xx号_Nickname_name\",\"   解决总题目数\",chr(12288)))\n```\n\n{}来指明位置 相当于c的printf中的%，{0} 指的是第0个元素，填充常跟对齐一起使用^、<、>分别是居中、左对齐、右对齐，后面带宽度\n:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充，后面我们指定了中文空格\n\n> 所以现在的程序就是这样\n\n``` python\nimport requests\nimport re\ndef getHTMLText(url):\n    #省略\ndef fillscoreList(slist, html, num):\n    #省略\ndef printscoreList(slist, num):\n    tplt = \"{0:20}\\t\\t{1:^3}\"\n    print(tplt.format(\"xx营xx号_Nickname_name\",\"     解决题目数\",chr(12288)))\n    for i in range(num):\n        u=slist[i]\n        print(tplt.format(u[0],u[1],chr(12288)))\ndef main():\n    num = int(input(\"请输入营号:\"))\n    for no in range(1166,1169):\n        sinfo = []\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        fillscoreList(sinfo, html, num)\n        print(\"*\"*15,\"第%d周%d营成绩\"%(int(no-1165),num),\"*\"*18)\n        printscoreList(sinfo, len(sinfo))\nmain()\n```\n\n运行结果如下\n![result3](http://githubblog.andyhui.top/result3.png)\n### 未完待续","source":"_posts/oj信息爬取.md","raw":"---\ntitle: oj信息爬取\ndate: 2017-08-29 15:04:51\ntags:\n- 爬虫\n- oj\n- python\n- requests\ncategories:\n- python\npermalink: ojrankscan\n---\n\n\n> 假期俱乐部举办了编程训练营，每个人负责管理15人的营，每天作业会在oj的一个总榜上\n> 关于各营营长每天统计很麻烦，所以我写了一个简单的爬虫来节省一部分工作\n> ** 代码改变世界，使人更高效的完成自己的工作**\n\n---\n\n### 基本环境\n\n> Windows 10 + python 3.6.2 + requests 库\n\n<!-- more -->\n### requests 库安装\n\n```python\npip install requests\n```\n\n![requests安装](http://githubblog.andyhui.top/requests%E5%AE%89%E8%A3%85.png)\n\n### 分析需求\n\n> 首先需要统计的 Contest 有3周的作业 加 最后的结课测试\n\n![ojContestList](http://githubblog.andyhui.top/ojContestList.png)\n\n> 每个榜单结构都是一致的，我只需要统计自己营里的**昵称**和**总解决数目**就好\n\n![oj榜单](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95.png)\n\n> url 是 \"http://oj.acmclub.cn/contestrank.php?cid=\" + contestID\n\n> 右键查看网页源代码 两个a标签中刚好有我们的数据，用简单正则表达式匹配下就好\n\n![oj榜单源码](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png)\n\n### 构造request爬取网页\n\n> 首先拿出一个榜单来处理，由于不需要登陆就可以查看榜单所以我直接抓取榜单html页面\n\n``` python\nimport requests\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\ndef main():\n    for no in range(1166,1169):\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        print(html)\nmain()\n```\n\n**这算一个基本框架了，通过request得到网页源码，中间_r.raise_for_status()_是错误检查，后面是根据推断的编码类型设置字符编码**\n运行结果如下\n![result1](http://githubblog.andyhui.top/result1.png)\n### 对html源码处理\n\n> 首先看网页源码\n\n![oj榜单源码](http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png)\n\n> 这里可以用正则表达式库 **re** 来进行字符匹配，如果昵称符合规范**xx营xx号_Nickname_name**就很容易处理了，匹配两个a标签之间的内容\n``` python\nrege = r'<a href=.*?>(0{0,1}'+str(num)+'营.*?)</a><td><a href=.*?>([0-9]{1,2})</a>'\n```\n\n> 对html的处理函数也就是很容易写了\n\n``` python\nimport requests\nimport re\ndef getHTMLText(url):\n    #省略\ndef fillscoreList(slist, html, num):\n    rege = r'<a href=.*?>(0{0,1}'+str(num)+'营.*?)</a><td><a href=.*?>([0-9]{1,2})</a>'\n    score = re.findall(rege,html)\n    for x in score:\n        slist.append(x)\n\ndef main():\n    num = int(input(\"请输入营号:\"))\n    for no in range(1166,1169):\n        sinfo = []\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        fillscoreList(sinfo, html, num)\n        for (name,solve) in  sinfo:\n            print(name,solve)\nmain()\n```\n这样得到的sinfo就是包含元组(name,solve)的列表，程序到这阶段基本算是完工了，但是输出的样式也并不尽人意，比如_没有对齐_，看起来很乱，而且三周内容_挤在一块_不好区分，接下来就对这个程序进行优化\n![result2](http://githubblog.andyhui.top/result2.png)\n\n### 格式化输出\n\n> 我们想要达到的效果是三周内容清晰可辨，并且有良好的对齐，下面就来是实现下\n> python 的 字符串 有**format函数**，通过这个来达到我们想要的效果\n> 对于(xx营xx号_Nickname_name,solve_num)这样一个元组，通过格式限定符来达到**指定字段宽度**和**居中对齐**\n\n``` python\ntplt = \"{0:<20}\\t\\t{1:^3}\"\nprint(tplt.format(\"xx营xx号_Nickname_name\",\"   解决总题目数\",chr(12288)))\n```\n\n{}来指明位置 相当于c的printf中的%，{0} 指的是第0个元素，填充常跟对齐一起使用^、<、>分别是居中、左对齐、右对齐，后面带宽度\n:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充，后面我们指定了中文空格\n\n> 所以现在的程序就是这样\n\n``` python\nimport requests\nimport re\ndef getHTMLText(url):\n    #省略\ndef fillscoreList(slist, html, num):\n    #省略\ndef printscoreList(slist, num):\n    tplt = \"{0:20}\\t\\t{1:^3}\"\n    print(tplt.format(\"xx营xx号_Nickname_name\",\"     解决题目数\",chr(12288)))\n    for i in range(num):\n        u=slist[i]\n        print(tplt.format(u[0],u[1],chr(12288)))\ndef main():\n    num = int(input(\"请输入营号:\"))\n    for no in range(1166,1169):\n        sinfo = []\n        url = 'http://oj.acmclub.cn/contestrank.php?cid='+str(no)\n        html = getHTMLText(url)\n        fillscoreList(sinfo, html, num)\n        print(\"*\"*15,\"第%d周%d营成绩\"%(int(no-1165),num),\"*\"*18)\n        printscoreList(sinfo, len(sinfo))\nmain()\n```\n\n运行结果如下\n![result3](http://githubblog.andyhui.top/result3.png)\n### 未完待续","slug":"ojrankscan","published":1,"updated":"2019-03-04T09:12:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvuy000umqfytrdcss68","content":"<blockquote>\n<p>假期俱乐部举办了编程训练营，每个人负责管理15人的营，每天作业会在oj的一个总榜上<br>关于各营营长每天统计很麻烦，所以我写了一个简单的爬虫来节省一部分工作<br><strong> 代码改变世界，使人更高效的完成自己的工作</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><blockquote>\n<p>Windows 10 + python 3.6.2 + requests 库</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"requests-库安装\"><a href=\"#requests-库安装\" class=\"headerlink\" title=\"requests 库安装\"></a>requests 库安装</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install requests</div></pre></td></tr></table></figure>\n<p><img src=\"http://githubblog.andyhui.top/requests%E5%AE%89%E8%A3%85.png\" alt=\"requests安装\"></p>\n<h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><blockquote>\n<p>首先需要统计的 Contest 有3周的作业 加 最后的结课测试</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/ojContestList.png\" alt=\"ojContestList\"></p>\n<blockquote>\n<p>每个榜单结构都是一致的，我只需要统计自己营里的<strong>昵称</strong>和<strong>总解决数目</strong>就好</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95.png\" alt=\"oj榜单\"></p>\n<blockquote>\n<p>url 是 “<a href=\"http://oj.acmclub.cn/contestrank.php?cid=\" target=\"_blank\" rel=\"external\">http://oj.acmclub.cn/contestrank.php?cid=</a>“ + contestID</p>\n<p>右键查看网页源代码 两个a标签中刚好有我们的数据，用简单正则表达式匹配下就好</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png\" alt=\"oj榜单源码\"></p>\n<h3 id=\"构造request爬取网页\"><a href=\"#构造request爬取网页\" class=\"headerlink\" title=\"构造request爬取网页\"></a>构造request爬取网页</h3><blockquote>\n<p>首先拿出一个榜单来处理，由于不需要登陆就可以查看榜单所以我直接抓取榜单html页面</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        r.raise_for_status()</div><div class=\"line\">        r.encoding = r.apparent_encoding</div><div class=\"line\">        <span class=\"keyword\">return</span> r.text</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        print(html)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p><strong>这算一个基本框架了，通过request得到网页源码，中间<em>r.raise_for_status()</em>是错误检查，后面是根据推断的编码类型设置字符编码</strong><br>运行结果如下<br><img src=\"http://githubblog.andyhui.top/result1.png\" alt=\"result1\"></p>\n<h3 id=\"对html源码处理\"><a href=\"#对html源码处理\" class=\"headerlink\" title=\"对html源码处理\"></a>对html源码处理</h3><blockquote>\n<p>首先看网页源码</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png\" alt=\"oj榜单源码\"></p>\n<blockquote>\n<p>这里可以用正则表达式库 <strong>re</strong> 来进行字符匹配，如果昵称符合规范<strong>xx营xx号_Nickname_name</strong>就很容易处理了，匹配两个a标签之间的内容<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rege = <span class=\"string\">r'&lt;a href=.*?&gt;(0&#123;0,1&#125;'</span>+str(num)+<span class=\"string\">'营.*?)&lt;/a&gt;&lt;td&gt;&lt;a href=.*?&gt;([0-9]&#123;1,2&#125;)&lt;/a&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>对html的处理函数也就是很容易写了</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillscoreList</span><span class=\"params\">(slist, html, num)</span>:</span></div><div class=\"line\">    rege = <span class=\"string\">r'&lt;a href=.*?&gt;(0&#123;0,1&#125;'</span>+str(num)+<span class=\"string\">'营.*?)&lt;/a&gt;&lt;td&gt;&lt;a href=.*?&gt;([0-9]&#123;1,2&#125;)&lt;/a&gt;'</span></div><div class=\"line\">    score = re.findall(rege,html)</div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> score:</div><div class=\"line\">        slist.append(x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    num = int(input(<span class=\"string\">\"请输入营号:\"</span>))</div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        sinfo = []</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        fillscoreList(sinfo, html, num)</div><div class=\"line\">        <span class=\"keyword\">for</span> (name,solve) <span class=\"keyword\">in</span>  sinfo:</div><div class=\"line\">            print(name,solve)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>这样得到的sinfo就是包含元组(name,solve)的列表，程序到这阶段基本算是完工了，但是输出的样式也并不尽人意，比如<em>没有对齐</em>，看起来很乱，而且三周内容<em>挤在一块</em>不好区分，接下来就对这个程序进行优化<br><img src=\"http://githubblog.andyhui.top/result2.png\" alt=\"result2\"></p>\n<h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><blockquote>\n<p>我们想要达到的效果是三周内容清晰可辨，并且有良好的对齐，下面就来是实现下<br>python 的 字符串 有<strong>format函数</strong>，通过这个来达到我们想要的效果<br>对于(xx营xx号_Nickname_name,solve_num)这样一个元组，通过格式限定符来达到<strong>指定字段宽度</strong>和<strong>居中对齐</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tplt = <span class=\"string\">\"&#123;0:&lt;20&#125;\\t\\t&#123;1:^3&#125;\"</span></div><div class=\"line\">print(tplt.format(<span class=\"string\">\"xx营xx号_Nickname_name\"</span>,<span class=\"string\">\"   解决总题目数\"</span>,chr(<span class=\"number\">12288</span>)))</div></pre></td></tr></table></figure>\n<p>{}来指明位置 相当于c的printf中的%，{0} 指的是第0个元素，填充常跟对齐一起使用^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度<br>:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充，后面我们指定了中文空格</p>\n<blockquote>\n<p>所以现在的程序就是这样</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillscoreList</span><span class=\"params\">(slist, html, num)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printscoreList</span><span class=\"params\">(slist, num)</span>:</span></div><div class=\"line\">    tplt = <span class=\"string\">\"&#123;0:20&#125;\\t\\t&#123;1:^3&#125;\"</span></div><div class=\"line\">    print(tplt.format(<span class=\"string\">\"xx营xx号_Nickname_name\"</span>,<span class=\"string\">\"     解决题目数\"</span>,chr(<span class=\"number\">12288</span>)))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</div><div class=\"line\">        u=slist[i]</div><div class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>],u[<span class=\"number\">1</span>],chr(<span class=\"number\">12288</span>)))</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    num = int(input(<span class=\"string\">\"请输入营号:\"</span>))</div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        sinfo = []</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        fillscoreList(sinfo, html, num)</div><div class=\"line\">        print(<span class=\"string\">\"*\"</span>*<span class=\"number\">15</span>,<span class=\"string\">\"第%d周%d营成绩\"</span>%(int(no<span class=\"number\">-1165</span>),num),<span class=\"string\">\"*\"</span>*<span class=\"number\">18</span>)</div><div class=\"line\">        printscoreList(sinfo, len(sinfo))</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>运行结果如下<br><img src=\"http://githubblog.andyhui.top/result3.png\" alt=\"result3\"></p>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>假期俱乐部举办了编程训练营，每个人负责管理15人的营，每天作业会在oj的一个总榜上<br>关于各营营长每天统计很麻烦，所以我写了一个简单的爬虫来节省一部分工作<br><strong> 代码改变世界，使人更高效的完成自己的工作</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h3><blockquote>\n<p>Windows 10 + python 3.6.2 + requests 库</p>\n</blockquote>","more":"<h3 id=\"requests-库安装\"><a href=\"#requests-库安装\" class=\"headerlink\" title=\"requests 库安装\"></a>requests 库安装</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install requests</div></pre></td></tr></table></figure>\n<p><img src=\"http://githubblog.andyhui.top/requests%E5%AE%89%E8%A3%85.png\" alt=\"requests安装\"></p>\n<h3 id=\"分析需求\"><a href=\"#分析需求\" class=\"headerlink\" title=\"分析需求\"></a>分析需求</h3><blockquote>\n<p>首先需要统计的 Contest 有3周的作业 加 最后的结课测试</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/ojContestList.png\" alt=\"ojContestList\"></p>\n<blockquote>\n<p>每个榜单结构都是一致的，我只需要统计自己营里的<strong>昵称</strong>和<strong>总解决数目</strong>就好</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95.png\" alt=\"oj榜单\"></p>\n<blockquote>\n<p>url 是 “<a href=\"http://oj.acmclub.cn/contestrank.php?cid=\" target=\"_blank\" rel=\"external\">http://oj.acmclub.cn/contestrank.php?cid=</a>“ + contestID</p>\n<p>右键查看网页源代码 两个a标签中刚好有我们的数据，用简单正则表达式匹配下就好</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png\" alt=\"oj榜单源码\"></p>\n<h3 id=\"构造request爬取网页\"><a href=\"#构造request爬取网页\" class=\"headerlink\" title=\"构造request爬取网页\"></a>构造request爬取网页</h3><blockquote>\n<p>首先拿出一个榜单来处理，由于不需要登陆就可以查看榜单所以我直接抓取榜单html页面</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        r.raise_for_status()</div><div class=\"line\">        r.encoding = r.apparent_encoding</div><div class=\"line\">        <span class=\"keyword\">return</span> r.text</div><div class=\"line\">    <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        print(html)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p><strong>这算一个基本框架了，通过request得到网页源码，中间<em>r.raise_for_status()</em>是错误检查，后面是根据推断的编码类型设置字符编码</strong><br>运行结果如下<br><img src=\"http://githubblog.andyhui.top/result1.png\" alt=\"result1\"></p>\n<h3 id=\"对html源码处理\"><a href=\"#对html源码处理\" class=\"headerlink\" title=\"对html源码处理\"></a>对html源码处理</h3><blockquote>\n<p>首先看网页源码</p>\n</blockquote>\n<p><img src=\"http://githubblog.andyhui.top/oj%E6%A6%9C%E5%8D%95%E6%BA%90%E7%A0%81.png\" alt=\"oj榜单源码\"></p>\n<blockquote>\n<p>这里可以用正则表达式库 <strong>re</strong> 来进行字符匹配，如果昵称符合规范<strong>xx营xx号_Nickname_name</strong>就很容易处理了，匹配两个a标签之间的内容<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rege = <span class=\"string\">r'&lt;a href=.*?&gt;(0&#123;0,1&#125;'</span>+str(num)+<span class=\"string\">'营.*?)&lt;/a&gt;&lt;td&gt;&lt;a href=.*?&gt;([0-9]&#123;1,2&#125;)&lt;/a&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>对html的处理函数也就是很容易写了</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillscoreList</span><span class=\"params\">(slist, html, num)</span>:</span></div><div class=\"line\">    rege = <span class=\"string\">r'&lt;a href=.*?&gt;(0&#123;0,1&#125;'</span>+str(num)+<span class=\"string\">'营.*?)&lt;/a&gt;&lt;td&gt;&lt;a href=.*?&gt;([0-9]&#123;1,2&#125;)&lt;/a&gt;'</span></div><div class=\"line\">    score = re.findall(rege,html)</div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> score:</div><div class=\"line\">        slist.append(x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    num = int(input(<span class=\"string\">\"请输入营号:\"</span>))</div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        sinfo = []</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        fillscoreList(sinfo, html, num)</div><div class=\"line\">        <span class=\"keyword\">for</span> (name,solve) <span class=\"keyword\">in</span>  sinfo:</div><div class=\"line\">            print(name,solve)</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>这样得到的sinfo就是包含元组(name,solve)的列表，程序到这阶段基本算是完工了，但是输出的样式也并不尽人意，比如<em>没有对齐</em>，看起来很乱，而且三周内容<em>挤在一块</em>不好区分，接下来就对这个程序进行优化<br><img src=\"http://githubblog.andyhui.top/result2.png\" alt=\"result2\"></p>\n<h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><blockquote>\n<p>我们想要达到的效果是三周内容清晰可辨，并且有良好的对齐，下面就来是实现下<br>python 的 字符串 有<strong>format函数</strong>，通过这个来达到我们想要的效果<br>对于(xx营xx号_Nickname_name,solve_num)这样一个元组，通过格式限定符来达到<strong>指定字段宽度</strong>和<strong>居中对齐</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tplt = <span class=\"string\">\"&#123;0:&lt;20&#125;\\t\\t&#123;1:^3&#125;\"</span></div><div class=\"line\">print(tplt.format(<span class=\"string\">\"xx营xx号_Nickname_name\"</span>,<span class=\"string\">\"   解决总题目数\"</span>,chr(<span class=\"number\">12288</span>)))</div></pre></td></tr></table></figure>\n<p>{}来指明位置 相当于c的printf中的%，{0} 指的是第0个元素，填充常跟对齐一起使用^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度<br>:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充，后面我们指定了中文空格</p>\n<blockquote>\n<p>所以现在的程序就是这样</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillscoreList</span><span class=\"params\">(slist, html, num)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#省略</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printscoreList</span><span class=\"params\">(slist, num)</span>:</span></div><div class=\"line\">    tplt = <span class=\"string\">\"&#123;0:20&#125;\\t\\t&#123;1:^3&#125;\"</span></div><div class=\"line\">    print(tplt.format(<span class=\"string\">\"xx营xx号_Nickname_name\"</span>,<span class=\"string\">\"     解决题目数\"</span>,chr(<span class=\"number\">12288</span>)))</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</div><div class=\"line\">        u=slist[i]</div><div class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>],u[<span class=\"number\">1</span>],chr(<span class=\"number\">12288</span>)))</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    num = int(input(<span class=\"string\">\"请输入营号:\"</span>))</div><div class=\"line\">    <span class=\"keyword\">for</span> no <span class=\"keyword\">in</span> range(<span class=\"number\">1166</span>,<span class=\"number\">1169</span>):</div><div class=\"line\">        sinfo = []</div><div class=\"line\">        url = <span class=\"string\">'http://oj.acmclub.cn/contestrank.php?cid='</span>+str(no)</div><div class=\"line\">        html = getHTMLText(url)</div><div class=\"line\">        fillscoreList(sinfo, html, num)</div><div class=\"line\">        print(<span class=\"string\">\"*\"</span>*<span class=\"number\">15</span>,<span class=\"string\">\"第%d周%d营成绩\"</span>%(int(no<span class=\"number\">-1165</span>),num),<span class=\"string\">\"*\"</span>*<span class=\"number\">18</span>)</div><div class=\"line\">        printscoreList(sinfo, len(sinfo))</div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n<p>运行结果如下<br><img src=\"http://githubblog.andyhui.top/result3.png\" alt=\"result3\"></p>\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h3>"},{"title":"twopm","date":"2017-09-15T18:09:39.000Z","render_drafts":false,"_content":"\n\n\n\n<!-- more -->\n\n> 不觉间大二学期已经是第二周了，从一届萌新到被叫做学长时才真正意识到，大学的四年过去了1/4了。回想过去一年，最大的收获就是认识了这么多新朋友吧，记得刚开始时从封闭的高三刚脱离时变得沉默寡言，还好找到了ACM这个组织，一定程度上改观了自己，做了许多有意义的事，认识到了与别人相比自己的各种不足，大学确实是需要这样一个环境，让你清楚的认知到自己还是一只菜鸡，这样才能不断前进，马云起名菜鸟网络以及菜鸟教程都有异曲同工之妙。半夜睡不着，见不贤而内自省也，我深刻认识到在别人要睡觉和睡着时最不应该吵闹，尤其是没有课的人，提到寝室还是挺融洽的，除了没有学习氛围其他都还好，只是，对于睡觉这件事，我喜欢绝对的安静，很羡慕那些倒头就能打呼噜的人，但我做不到，我现在越来越觉得寝室就是一个休息的地方，或者说一个休闲的地方，所以说休息来说尤为重要，但是呢，有人会在白天休息，你休息的时间是娱乐的时间，很绝望，我没那么强的抗干扰能力，我只求能安静的在宿舍晚上好好睡个觉让我第二天有良好的精神状态，我只希望在中午吃完饭好好休息下能让下午有点精神，最近几天真的，真的很绝望。我自认为平时做到没影响别人，听歌自己带耳机，键盘鼠标用消音版，不在休息的时间大喊大叫，或者为了不影响别人的正常娱乐时间根本不呆在寝室里。我仁义都尽到了，哎，算了，我一直也是这样想，都是舍友，将来要相处一辈子呢，忍忍就睡着了，可，一次两次也就算了，要是这样常态化的搞下去，我感觉我要废了，如果最后真要做个抉择我会决定搬出去，总不能影响别人的娱乐时间，对吧。大半夜吵得睡不着，本打算起来工作，忽然想写点东西，发现自己脑子乱的要死，根本不知道自己在写啥，我只希望明天早晨爬起来我还有精力上课。\n\n> 希望那些自己没课的不要在休息时间影响别人休息。\n\n> 写这个有点矫情，不打算发出去，丢草稿里吧。希望这个永远尘封。","source":"_drafts/twopm.md","raw":"---\ntitle: twopm\ndate: 2017-09-16 02:09:39\ntags:\n- 个人日记\ncategories:\n- 日记\npermalink: twopm\nrender_drafts: false\n---\n\n\n\n\n<!-- more -->\n\n> 不觉间大二学期已经是第二周了，从一届萌新到被叫做学长时才真正意识到，大学的四年过去了1/4了。回想过去一年，最大的收获就是认识了这么多新朋友吧，记得刚开始时从封闭的高三刚脱离时变得沉默寡言，还好找到了ACM这个组织，一定程度上改观了自己，做了许多有意义的事，认识到了与别人相比自己的各种不足，大学确实是需要这样一个环境，让你清楚的认知到自己还是一只菜鸡，这样才能不断前进，马云起名菜鸟网络以及菜鸟教程都有异曲同工之妙。半夜睡不着，见不贤而内自省也，我深刻认识到在别人要睡觉和睡着时最不应该吵闹，尤其是没有课的人，提到寝室还是挺融洽的，除了没有学习氛围其他都还好，只是，对于睡觉这件事，我喜欢绝对的安静，很羡慕那些倒头就能打呼噜的人，但我做不到，我现在越来越觉得寝室就是一个休息的地方，或者说一个休闲的地方，所以说休息来说尤为重要，但是呢，有人会在白天休息，你休息的时间是娱乐的时间，很绝望，我没那么强的抗干扰能力，我只求能安静的在宿舍晚上好好睡个觉让我第二天有良好的精神状态，我只希望在中午吃完饭好好休息下能让下午有点精神，最近几天真的，真的很绝望。我自认为平时做到没影响别人，听歌自己带耳机，键盘鼠标用消音版，不在休息的时间大喊大叫，或者为了不影响别人的正常娱乐时间根本不呆在寝室里。我仁义都尽到了，哎，算了，我一直也是这样想，都是舍友，将来要相处一辈子呢，忍忍就睡着了，可，一次两次也就算了，要是这样常态化的搞下去，我感觉我要废了，如果最后真要做个抉择我会决定搬出去，总不能影响别人的娱乐时间，对吧。大半夜吵得睡不着，本打算起来工作，忽然想写点东西，发现自己脑子乱的要死，根本不知道自己在写啥，我只希望明天早晨爬起来我还有精力上课。\n\n> 希望那些自己没课的不要在休息时间影响别人休息。\n\n> 写这个有点矫情，不打算发出去，丢草稿里吧。希望这个永远尘封。","slug":"twopm","published":0,"updated":"2019-03-04T09:12:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsxaqvv0000wmqfye58rnw64","content":"<a id=\"more\"></a>\n<blockquote>\n<p>不觉间大二学期已经是第二周了，从一届萌新到被叫做学长时才真正意识到，大学的四年过去了1/4了。回想过去一年，最大的收获就是认识了这么多新朋友吧，记得刚开始时从封闭的高三刚脱离时变得沉默寡言，还好找到了ACM这个组织，一定程度上改观了自己，做了许多有意义的事，认识到了与别人相比自己的各种不足，大学确实是需要这样一个环境，让你清楚的认知到自己还是一只菜鸡，这样才能不断前进，马云起名菜鸟网络以及菜鸟教程都有异曲同工之妙。半夜睡不着，见不贤而内自省也，我深刻认识到在别人要睡觉和睡着时最不应该吵闹，尤其是没有课的人，提到寝室还是挺融洽的，除了没有学习氛围其他都还好，只是，对于睡觉这件事，我喜欢绝对的安静，很羡慕那些倒头就能打呼噜的人，但我做不到，我现在越来越觉得寝室就是一个休息的地方，或者说一个休闲的地方，所以说休息来说尤为重要，但是呢，有人会在白天休息，你休息的时间是娱乐的时间，很绝望，我没那么强的抗干扰能力，我只求能安静的在宿舍晚上好好睡个觉让我第二天有良好的精神状态，我只希望在中午吃完饭好好休息下能让下午有点精神，最近几天真的，真的很绝望。我自认为平时做到没影响别人，听歌自己带耳机，键盘鼠标用消音版，不在休息的时间大喊大叫，或者为了不影响别人的正常娱乐时间根本不呆在寝室里。我仁义都尽到了，哎，算了，我一直也是这样想，都是舍友，将来要相处一辈子呢，忍忍就睡着了，可，一次两次也就算了，要是这样常态化的搞下去，我感觉我要废了，如果最后真要做个抉择我会决定搬出去，总不能影响别人的娱乐时间，对吧。大半夜吵得睡不着，本打算起来工作，忽然想写点东西，发现自己脑子乱的要死，根本不知道自己在写啥，我只希望明天早晨爬起来我还有精力上课。</p>\n<p>希望那些自己没课的不要在休息时间影响别人休息。</p>\n<p>写这个有点矫情，不打算发出去，丢草稿里吧。希望这个永远尘封。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>不觉间大二学期已经是第二周了，从一届萌新到被叫做学长时才真正意识到，大学的四年过去了1/4了。回想过去一年，最大的收获就是认识了这么多新朋友吧，记得刚开始时从封闭的高三刚脱离时变得沉默寡言，还好找到了ACM这个组织，一定程度上改观了自己，做了许多有意义的事，认识到了与别人相比自己的各种不足，大学确实是需要这样一个环境，让你清楚的认知到自己还是一只菜鸡，这样才能不断前进，马云起名菜鸟网络以及菜鸟教程都有异曲同工之妙。半夜睡不着，见不贤而内自省也，我深刻认识到在别人要睡觉和睡着时最不应该吵闹，尤其是没有课的人，提到寝室还是挺融洽的，除了没有学习氛围其他都还好，只是，对于睡觉这件事，我喜欢绝对的安静，很羡慕那些倒头就能打呼噜的人，但我做不到，我现在越来越觉得寝室就是一个休息的地方，或者说一个休闲的地方，所以说休息来说尤为重要，但是呢，有人会在白天休息，你休息的时间是娱乐的时间，很绝望，我没那么强的抗干扰能力，我只求能安静的在宿舍晚上好好睡个觉让我第二天有良好的精神状态，我只希望在中午吃完饭好好休息下能让下午有点精神，最近几天真的，真的很绝望。我自认为平时做到没影响别人，听歌自己带耳机，键盘鼠标用消音版，不在休息的时间大喊大叫，或者为了不影响别人的正常娱乐时间根本不呆在寝室里。我仁义都尽到了，哎，算了，我一直也是这样想，都是舍友，将来要相处一辈子呢，忍忍就睡着了，可，一次两次也就算了，要是这样常态化的搞下去，我感觉我要废了，如果最后真要做个抉择我会决定搬出去，总不能影响别人的娱乐时间，对吧。大半夜吵得睡不着，本打算起来工作，忽然想写点东西，发现自己脑子乱的要死，根本不知道自己在写啥，我只希望明天早晨爬起来我还有精力上课。</p>\n<p>希望那些自己没课的不要在休息时间影响别人休息。</p>\n<p>写这个有点矫情，不打算发出去，丢草稿里吧。希望这个永远尘封。</p>\n</blockquote>"},{"title":"Python 练习册，每天一个小程序","author":"andyhui","date":"2019-03-06T15:23:00.000Z","_content":"\n> Talk is cheap. Show me the code.--Linus Torvalds\n\n\n\n最近发现一个有趣的项目——[**show-me-the-code**](https://github.com/Yixiaohan/show-me-the-code)，25道`python`, 题目，涵盖各个方面，同时兼具挑战性，考察编码能力和资料搜集学习能力。\n\n<!-- more -->\n\n## 写在前面\n\n完整代码在[这里](https://github.com/imyhui/show-me-the-code/)更新，为了不污染全局Python环境，使用了[`pipenv`](https://github.com/pypa/pipenv)管理依赖，要运行代码只需只需\n\n```shell\npipenv install\npipenv shell\npython xxx.py\n```\n\n\n\n## 0000 \n\n> 将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 \n\n\n\n查资料得知，`Python3`图像处理库为Pillow，于是看到了*廖雪峰*老师的[教程](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000)，简单看了下几个例子及[Pillow文档](https://pillow.readthedocs.io/en/stable/index.html)，代码便很容易写了\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\ndef main():\n    # 打开图片，获取图片宽度和高度\n    im = Image.open('avatar.jpg')\n    w, h = im.size\n    \n    # 创建Draw对象\n    draw = ImageDraw.Draw(im)\n    # 导入字体创建Font对象\n    font = ImageFont.truetype('Arial.ttf', 36)\n    # 图片左上角为(0, 0), 绘制文本为'99+', 字体为导入的字体，填充颜色为红色\n    draw.text((w*0.90, h*0.01),'99+', font=font,fill='#FF0000')\n\n    im.show()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n\n运行效果\n\n![add_num_pic](http://githubblog.andyhui.top/add_num.png)\n\n\n\n未完待续。。。","source":"_posts/Python-练习册，每天一个小程序.md","raw":"title: Python 练习册，每天一个小程序\nauthor: andyhui\ntags:\n\n  - python\ncategories:\n  - python\ndate: 2019-03-06 23:23:00\n\n---\n\n> Talk is cheap. Show me the code.--Linus Torvalds\n\n\n\n最近发现一个有趣的项目——[**show-me-the-code**](https://github.com/Yixiaohan/show-me-the-code)，25道`python`, 题目，涵盖各个方面，同时兼具挑战性，考察编码能力和资料搜集学习能力。\n\n<!-- more -->\n\n## 写在前面\n\n完整代码在[这里](https://github.com/imyhui/show-me-the-code/)更新，为了不污染全局Python环境，使用了[`pipenv`](https://github.com/pypa/pipenv)管理依赖，要运行代码只需只需\n\n```shell\npipenv install\npipenv shell\npython xxx.py\n```\n\n\n\n## 0000 \n\n> 将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 \n\n\n\n查资料得知，`Python3`图像处理库为Pillow，于是看到了*廖雪峰*老师的[教程](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000)，简单看了下几个例子及[Pillow文档](https://pillow.readthedocs.io/en/stable/index.html)，代码便很容易写了\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\ndef main():\n    # 打开图片，获取图片宽度和高度\n    im = Image.open('avatar.jpg')\n    w, h = im.size\n    \n    # 创建Draw对象\n    draw = ImageDraw.Draw(im)\n    # 导入字体创建Font对象\n    font = ImageFont.truetype('Arial.ttf', 36)\n    # 图片左上角为(0, 0), 绘制文本为'99+', 字体为导入的字体，填充颜色为红色\n    draw.text((w*0.90, h*0.01),'99+', font=font,fill='#FF0000')\n\n    im.show()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n\n\n运行效果\n\n![add_num_pic](http://githubblog.andyhui.top/add_num.png)\n\n\n\n未完待续。。。","slug":"Python-练习册，每天一个小程序","published":1,"updated":"2019-03-06T16:02:09.000Z","_id":"cjsxcqcnk002rmqfy3kbxyjb8","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Talk is cheap. Show me the code.—Linus Torvalds</p>\n</blockquote>\n<p>最近发现一个有趣的项目——<a href=\"https://github.com/Yixiaohan/show-me-the-code\" target=\"_blank\" rel=\"external\"><strong>show-me-the-code</strong></a>，25道<code>python</code>, 题目，涵盖各个方面，同时兼具挑战性，考察编码能力和资料搜集学习能力。</p>\n<a id=\"more\"></a>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>完整代码在<a href=\"https://github.com/imyhui/show-me-the-code/\" target=\"_blank\" rel=\"external\">这里</a>更新，为了不污染全局Python环境，使用了<a href=\"https://github.com/pypa/pipenv\" target=\"_blank\" rel=\"external\"><code>pipenv</code></a>管理依赖，要运行代码只需只需</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pipenv install</div><div class=\"line\">pipenv shell</div><div class=\"line\">python xxx.py</div></pre></td></tr></table></figure>\n<h2 id=\"0000\"><a href=\"#0000\" class=\"headerlink\" title=\"0000\"></a>0000</h2><blockquote>\n<p>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 </p>\n</blockquote>\n<p>查资料得知，<code>Python3</code>图像处理库为Pillow，于是看到了<em>廖雪峰</em>老师的<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000\" target=\"_blank\" rel=\"external\">教程</a>，简单看了下几个例子及<a href=\"https://pillow.readthedocs.io/en/stable/index.html\" target=\"_blank\" rel=\"external\">Pillow文档</a>，代码便很容易写了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw, ImageFont</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 打开图片，获取图片宽度和高度</span></div><div class=\"line\">    im = Image.open(<span class=\"string\">'avatar.jpg'</span>)</div><div class=\"line\">    w, h = im.size</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 创建Draw对象</span></div><div class=\"line\">    draw = ImageDraw.Draw(im)</div><div class=\"line\">    <span class=\"comment\"># 导入字体创建Font对象</span></div><div class=\"line\">    font = ImageFont.truetype(<span class=\"string\">'Arial.ttf'</span>, <span class=\"number\">36</span>)</div><div class=\"line\">    <span class=\"comment\"># 图片左上角为(0, 0), 绘制文本为'99+', 字体为导入的字体，填充颜色为红色</span></div><div class=\"line\">    draw.text((w*<span class=\"number\">0.90</span>, h*<span class=\"number\">0.01</span>),<span class=\"string\">'99+'</span>, font=font,fill=<span class=\"string\">'#FF0000'</span>)</div><div class=\"line\"></div><div class=\"line\">    im.show()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<p>运行效果</p>\n<p><img src=\"http://githubblog.andyhui.top/add_num.png\" alt=\"add_num_pic\"></p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Talk is cheap. Show me the code.—Linus Torvalds</p>\n</blockquote>\n<p>最近发现一个有趣的项目——<a href=\"https://github.com/Yixiaohan/show-me-the-code\" target=\"_blank\" rel=\"external\"><strong>show-me-the-code</strong></a>，25道<code>python</code>, 题目，涵盖各个方面，同时兼具挑战性，考察编码能力和资料搜集学习能力。</p>","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>完整代码在<a href=\"https://github.com/imyhui/show-me-the-code/\" target=\"_blank\" rel=\"external\">这里</a>更新，为了不污染全局Python环境，使用了<a href=\"https://github.com/pypa/pipenv\" target=\"_blank\" rel=\"external\"><code>pipenv</code></a>管理依赖，要运行代码只需只需</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pipenv install</div><div class=\"line\">pipenv shell</div><div class=\"line\">python xxx.py</div></pre></td></tr></table></figure>\n<h2 id=\"0000\"><a href=\"#0000\" class=\"headerlink\" title=\"0000\"></a>0000</h2><blockquote>\n<p>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 </p>\n</blockquote>\n<p>查资料得知，<code>Python3</code>图像处理库为Pillow，于是看到了<em>廖雪峰</em>老师的<a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000\" target=\"_blank\" rel=\"external\">教程</a>，简单看了下几个例子及<a href=\"https://pillow.readthedocs.io/en/stable/index.html\" target=\"_blank\" rel=\"external\">Pillow文档</a>，代码便很容易写了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw, ImageFont</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 打开图片，获取图片宽度和高度</span></div><div class=\"line\">    im = Image.open(<span class=\"string\">'avatar.jpg'</span>)</div><div class=\"line\">    w, h = im.size</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 创建Draw对象</span></div><div class=\"line\">    draw = ImageDraw.Draw(im)</div><div class=\"line\">    <span class=\"comment\"># 导入字体创建Font对象</span></div><div class=\"line\">    font = ImageFont.truetype(<span class=\"string\">'Arial.ttf'</span>, <span class=\"number\">36</span>)</div><div class=\"line\">    <span class=\"comment\"># 图片左上角为(0, 0), 绘制文本为'99+', 字体为导入的字体，填充颜色为红色</span></div><div class=\"line\">    draw.text((w*<span class=\"number\">0.90</span>, h*<span class=\"number\">0.01</span>),<span class=\"string\">'99+'</span>, font=font,fill=<span class=\"string\">'#FF0000'</span>)</div><div class=\"line\"></div><div class=\"line\">    im.show()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<p>运行效果</p>\n<p><img src=\"http://githubblog.andyhui.top/add_num.png\" alt=\"add_num_pic\"></p>\n<p>未完待续。。。</p>"},{"title":"剑指Offer03 数组中重复的数字","author":"andyhui","date":"2019-03-07T15:55:00.000Z","_content":"## [数组中重复的数字](https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=0&tqId=0&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n\n> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n\n<!-- more -->\n\n### 思路\n\n> 排序后两两比较需要$$O(nlogn)$$时间，哈希表存储可以$$O(1)$$ 查找，整体时间复杂度$$O(n)$$ ，同时空间复杂度也为$$O(n)$$，若允许修改原数组，可以用原数组数的值和下标的对应关系来解，扫描到下标为i的数字m，若该m与i不同，则找数组中m位置对应的数字，若该数字与m相同，则重复，若不同则交换两数字位置，这种解法时间复杂度$$O(n)$$，空间复杂度$$O(1)$$。\n\n### 代码\n\n```python\n# -*- coding:utf-8 -*-\nclass Solution:\n    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    # 函数返回True/False\n    def duplicate(self, numbers, duplication):\n        # 允许修改数组 不允许额外空间\n        n = len(numbers)\n        if n == 0:\n            return False\n        for i in range(n):\n            if numbers[i] < 0 or numbers[i] > n - 1:\n                return False\n        for i in range(n):\n            if numbers[i] != i:\n                if numbers[numbers[i]] == numbers[i]:\n                    duplication[0] = numbers[i]\n                    return True\n                tmp = numbers[numbers[i]]\n                numbers[numbers[i]] = numbers[i]\n                numbers[i] = tmp\n        return False\n\ns = Solution()\nx = [0]\nprint(s.duplicate([2,3,1,0,2,5,3],x))\nprint(x)\n```\n\n## 数组中重复数字2\n\n### 题目描述\n\n> 在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但**不能修改输入的数组**。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。\n\n### 思路\n\n> 不修改数组，可以开一个大小为n的数组，与上题思路一致，若不适用额外空间，可采取二分统计数字，若一个s到e的范围内数字超过e-s + 1，则该范围内可能有重复的数字，采取二分查找即可。n个数字`count_range`被调用$$O(log(n))$$次，每次需$$O(n)$$时间，所以时间复杂度为$$O(nlogn)$$，空间复杂度为O(1)\n\n### 注意\n\n> 本题数组限制为**长度为n+1的数组里的所有数字都在1~n的范围内**，若没有这个条件可能解答会不成立\n\n### 代码\n\n```python\n # -*- coding:utf-8 -*-\nclass Solution:\n    # 函数返回True/False\n     def duplicate(self, numbers, duplication):\n            # 不允许修改数组\n            n = len(numbers)\n            if n == 0:\n                return -1\n            start, end = 1, n - 1\n            while start <= end:\n                mid =  start + ((end-start)>>1)\n                print(start,mid,end)\n                count = self.count_range(numbers, start, mid)\n                if start == end:\n                    if count > 1:\n                        return start\n                    else:\n                        break\n                if count > mid - start + 1:\n                    end = mid\n                else:\n                    start = mid + 1\n            return -1\n\n        def count_range(self, numbers, start, end):\n            if len(numbers) == 0:\n                return 0\n            count = 0\n            for i in numbers:\n                if i >= start and i <= end:\n                    count += 1\n            return count\n```\n\n","source":"_posts/剑指Offer03-数组中重复的数字.md","raw":"title: 剑指Offer03 数组中重复的数字\nauthor: andyhui\ntags:\n  - algorithms\ncategories:\n  - 剑指Offer\ndate: 2019-03-07 23:55:00\n---\n## [数组中重复的数字](https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=0&tqId=0&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n### 题目描述\n\n> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n\n<!-- more -->\n\n### 思路\n\n> 排序后两两比较需要$$O(nlogn)$$时间，哈希表存储可以$$O(1)$$ 查找，整体时间复杂度$$O(n)$$ ，同时空间复杂度也为$$O(n)$$，若允许修改原数组，可以用原数组数的值和下标的对应关系来解，扫描到下标为i的数字m，若该m与i不同，则找数组中m位置对应的数字，若该数字与m相同，则重复，若不同则交换两数字位置，这种解法时间复杂度$$O(n)$$，空间复杂度$$O(1)$$。\n\n### 代码\n\n```python\n# -*- coding:utf-8 -*-\nclass Solution:\n    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    # 函数返回True/False\n    def duplicate(self, numbers, duplication):\n        # 允许修改数组 不允许额外空间\n        n = len(numbers)\n        if n == 0:\n            return False\n        for i in range(n):\n            if numbers[i] < 0 or numbers[i] > n - 1:\n                return False\n        for i in range(n):\n            if numbers[i] != i:\n                if numbers[numbers[i]] == numbers[i]:\n                    duplication[0] = numbers[i]\n                    return True\n                tmp = numbers[numbers[i]]\n                numbers[numbers[i]] = numbers[i]\n                numbers[i] = tmp\n        return False\n\ns = Solution()\nx = [0]\nprint(s.duplicate([2,3,1,0,2,5,3],x))\nprint(x)\n```\n\n## 数组中重复数字2\n\n### 题目描述\n\n> 在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但**不能修改输入的数组**。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。\n\n### 思路\n\n> 不修改数组，可以开一个大小为n的数组，与上题思路一致，若不适用额外空间，可采取二分统计数字，若一个s到e的范围内数字超过e-s + 1，则该范围内可能有重复的数字，采取二分查找即可。n个数字`count_range`被调用$$O(log(n))$$次，每次需$$O(n)$$时间，所以时间复杂度为$$O(nlogn)$$，空间复杂度为O(1)\n\n### 注意\n\n> 本题数组限制为**长度为n+1的数组里的所有数字都在1~n的范围内**，若没有这个条件可能解答会不成立\n\n### 代码\n\n```python\n # -*- coding:utf-8 -*-\nclass Solution:\n    # 函数返回True/False\n     def duplicate(self, numbers, duplication):\n            # 不允许修改数组\n            n = len(numbers)\n            if n == 0:\n                return -1\n            start, end = 1, n - 1\n            while start <= end:\n                mid =  start + ((end-start)>>1)\n                print(start,mid,end)\n                count = self.count_range(numbers, start, mid)\n                if start == end:\n                    if count > 1:\n                        return start\n                    else:\n                        break\n                if count > mid - start + 1:\n                    end = mid\n                else:\n                    start = mid + 1\n            return -1\n\n        def count_range(self, numbers, start, end):\n            if len(numbers) == 0:\n                return 0\n            count = 0\n            for i in numbers:\n                if i >= start and i <= end:\n                    count += 1\n            return count\n```\n\n","slug":"剑指Offer03-数组中重复的数字","published":1,"updated":"2019-03-07T16:32:22.000Z","_id":"cjsytbqbs0000rnfysjrf0p0k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数组中重复的数字\"><a href=\"#数组中重复的数字\" class=\"headerlink\" title=\"数组中重复的数字\"></a><a href=\"https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=0&amp;tqId=0&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"external\">数组中重复的数字</a></h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>排序后两两比较需要<script type=\"math/tex\">O(nlogn)</script>时间，哈希表存储可以<script type=\"math/tex\">O(1)</script> 查找，整体时间复杂度<script type=\"math/tex\">O(n)</script> ，同时空间复杂度也为<script type=\"math/tex\">O(n)</script>，若允许修改原数组，可以用原数组数的值和下标的对应关系来解，扫描到下标为i的数字m，若该m与i不同，则找数组中m位置对应的数字，若该数字与m相同，则重复，若不同则交换两数字位置，这种解法时间复杂度<script type=\"math/tex\">O(n)</script>，空间复杂度<script type=\"math/tex\">O(1)</script>。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span></div><div class=\"line\">    <span class=\"comment\"># 函数返回True/False</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">duplicate</span><span class=\"params\">(self, numbers, duplication)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 允许修改数组 不允许额外空间</span></div><div class=\"line\">        n = len(numbers)</div><div class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            <span class=\"keyword\">if</span> numbers[i] &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> numbers[i] &gt; n - <span class=\"number\">1</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            <span class=\"keyword\">if</span> numbers[i] != i:</div><div class=\"line\">                <span class=\"keyword\">if</span> numbers[numbers[i]] == numbers[i]:</div><div class=\"line\">                    duplication[<span class=\"number\">0</span>] = numbers[i]</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">                tmp = numbers[numbers[i]]</div><div class=\"line\">                numbers[numbers[i]] = numbers[i]</div><div class=\"line\">                numbers[i] = tmp</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">s = Solution()</div><div class=\"line\">x = [<span class=\"number\">0</span>]</div><div class=\"line\">print(s.duplicate([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>],x))</div><div class=\"line\">print(x)</div></pre></td></tr></table></figure>\n<h2 id=\"数组中重复数字2\"><a href=\"#数组中重复数字2\" class=\"headerlink\" title=\"数组中重复数字2\"></a>数组中重复数字2</h2><h3 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但<strong>不能修改输入的数组</strong>。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>不修改数组，可以开一个大小为n的数组，与上题思路一致，若不适用额外空间，可采取二分统计数字，若一个s到e的范围内数字超过e-s + 1，则该范围内可能有重复的数字，采取二分查找即可。n个数字<code>count_range</code>被调用<script type=\"math/tex\">O(log(n))</script>次，每次需<script type=\"math/tex\">O(n)</script>时间，所以时间复杂度为<script type=\"math/tex\">O(nlogn)</script>，空间复杂度为O(1)</p>\n</blockquote>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>本题数组限制为<strong>长度为n+1的数组里的所有数字都在1~n的范围内</strong>，若没有这个条件可能解答会不成立</p>\n</blockquote>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 函数返回True/False</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">duplicate</span><span class=\"params\">(self, numbers, duplication)</span>:</span></div><div class=\"line\">            <span class=\"comment\"># 不允许修改数组</span></div><div class=\"line\">            n = len(numbers)</div><div class=\"line\">            <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">            start, end = <span class=\"number\">1</span>, n - <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">while</span> start &lt;= end:</div><div class=\"line\">                mid =  start + ((end-start)&gt;&gt;<span class=\"number\">1</span>)</div><div class=\"line\">                print(start,mid,end)</div><div class=\"line\">                count = self.count_range(numbers, start, mid)</div><div class=\"line\">                <span class=\"keyword\">if</span> start == end:</div><div class=\"line\">                    <span class=\"keyword\">if</span> count &gt; <span class=\"number\">1</span>:</div><div class=\"line\">                        <span class=\"keyword\">return</span> start</div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span></div><div class=\"line\">                <span class=\"keyword\">if</span> count &gt; mid - start + <span class=\"number\">1</span>:</div><div class=\"line\">                    end = mid</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    start = mid + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_range</span><span class=\"params\">(self, numbers, start, end)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">if</span> len(numbers) == <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">            count = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">                <span class=\"keyword\">if</span> i &gt;= start <span class=\"keyword\">and</span> i &lt;= end:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> count</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"数组中重复的数字\"><a href=\"#数组中重复的数字\" class=\"headerlink\" title=\"数组中重复的数字\"></a><a href=\"https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=0&amp;tqId=0&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking\" target=\"_blank\" rel=\"external\">数组中重复的数字</a></h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p>\n</blockquote>","more":"<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>排序后两两比较需要<script type=\"math/tex\">O(nlogn)</script>时间，哈希表存储可以<script type=\"math/tex\">O(1)</script> 查找，整体时间复杂度<script type=\"math/tex\">O(n)</script> ，同时空间复杂度也为<script type=\"math/tex\">O(n)</script>，若允许修改原数组，可以用原数组数的值和下标的对应关系来解，扫描到下标为i的数字m，若该m与i不同，则找数组中m位置对应的数字，若该数字与m相同，则重复，若不同则交换两数字位置，这种解法时间复杂度<script type=\"math/tex\">O(n)</script>，空间复杂度<script type=\"math/tex\">O(1)</script>。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span></div><div class=\"line\">    <span class=\"comment\"># 函数返回True/False</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">duplicate</span><span class=\"params\">(self, numbers, duplication)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 允许修改数组 不允许额外空间</span></div><div class=\"line\">        n = len(numbers)</div><div class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            <span class=\"keyword\">if</span> numbers[i] &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> numbers[i] &gt; n - <span class=\"number\">1</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            <span class=\"keyword\">if</span> numbers[i] != i:</div><div class=\"line\">                <span class=\"keyword\">if</span> numbers[numbers[i]] == numbers[i]:</div><div class=\"line\">                    duplication[<span class=\"number\">0</span>] = numbers[i]</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">                tmp = numbers[numbers[i]]</div><div class=\"line\">                numbers[numbers[i]] = numbers[i]</div><div class=\"line\">                numbers[i] = tmp</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">s = Solution()</div><div class=\"line\">x = [<span class=\"number\">0</span>]</div><div class=\"line\">print(s.duplicate([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>],x))</div><div class=\"line\">print(x)</div></pre></td></tr></table></figure>\n<h2 id=\"数组中重复数字2\"><a href=\"#数组中重复数字2\" class=\"headerlink\" title=\"数组中重复数字2\"></a>数组中重复数字2</h2><h3 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><blockquote>\n<p>在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但<strong>不能修改输入的数组</strong>。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。</p>\n</blockquote>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>不修改数组，可以开一个大小为n的数组，与上题思路一致，若不适用额外空间，可采取二分统计数字，若一个s到e的范围内数字超过e-s + 1，则该范围内可能有重复的数字，采取二分查找即可。n个数字<code>count_range</code>被调用<script type=\"math/tex\">O(log(n))</script>次，每次需<script type=\"math/tex\">O(n)</script>时间，所以时间复杂度为<script type=\"math/tex\">O(nlogn)</script>，空间复杂度为O(1)</p>\n</blockquote>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>本题数组限制为<strong>长度为n+1的数组里的所有数字都在1~n的范围内</strong>，若没有这个条件可能解答会不成立</p>\n</blockquote>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 函数返回True/False</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">duplicate</span><span class=\"params\">(self, numbers, duplication)</span>:</span></div><div class=\"line\">            <span class=\"comment\"># 不允许修改数组</span></div><div class=\"line\">            n = len(numbers)</div><div class=\"line\">            <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\">            start, end = <span class=\"number\">1</span>, n - <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">while</span> start &lt;= end:</div><div class=\"line\">                mid =  start + ((end-start)&gt;&gt;<span class=\"number\">1</span>)</div><div class=\"line\">                print(start,mid,end)</div><div class=\"line\">                count = self.count_range(numbers, start, mid)</div><div class=\"line\">                <span class=\"keyword\">if</span> start == end:</div><div class=\"line\">                    <span class=\"keyword\">if</span> count &gt; <span class=\"number\">1</span>:</div><div class=\"line\">                        <span class=\"keyword\">return</span> start</div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        <span class=\"keyword\">break</span></div><div class=\"line\">                <span class=\"keyword\">if</span> count &gt; mid - start + <span class=\"number\">1</span>:</div><div class=\"line\">                    end = mid</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    start = mid + <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_range</span><span class=\"params\">(self, numbers, start, end)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">if</span> len(numbers) == <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">            count = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">                <span class=\"keyword\">if</span> i &gt;= start <span class=\"keyword\">and</span> i &lt;= end:</div><div class=\"line\">                    count += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">return</span> count</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsxaqvua0001mqfyq03i632r","category_id":"cjsxaqvug0005mqfyl3q25z5j","_id":"cjsxaqvup000dmqfy3c127hs0"},{"post_id":"cjsxaqvue0003mqfy6x4tgu57","category_id":"cjsxaqvun000amqfyrb29ndnb","_id":"cjsxaqvut000kmqfynkxrb9wi"},{"post_id":"cjsxaqvui0007mqfy4zekzm34","category_id":"cjsxaqvuq000fmqfy7ew6w55y","_id":"cjsxaqvuw000rmqfy1wi3vg6k"},{"post_id":"cjsxaqvul0008mqfyoz91z1gx","category_id":"cjsxaqvut000lmqfyyjiete36","_id":"cjsxaqvv1000xmqfyljhnptvn"},{"post_id":"cjsxaqvuv000qmqfy03z4ml76","category_id":"cjsxaqvut000lmqfyyjiete36","_id":"cjsxaqvv10011mqfy3v8yxpvk"},{"post_id":"cjsxaqvum0009mqfyl0m7sq9j","category_id":"cjsxaqvuy000smqfyxe29ih2k","_id":"cjsxaqvv20014mqfyi1i3ldzr"},{"post_id":"cjsxaqvuo000cmqfydms2do5i","category_id":"cjsxaqvv1000zmqfy8jzx49fb","_id":"cjsxaqvv40018mqfy3kdhiq4u"},{"post_id":"cjsxaqvup000emqfy2avmtlry","category_id":"cjsxaqvv20015mqfyfrwkcn9n","_id":"cjsxaqvv5001cmqfyzifqnc6f"},{"post_id":"cjsxaqvur000hmqfys3bnikto","category_id":"cjsxaqvv4001amqfyeoz93q78","_id":"cjsxaqvv6001gmqfyrwp92ggo"},{"post_id":"cjsxaqvus000jmqfyyhwtgvcl","category_id":"cjsxaqvv5001dmqfyppz5r622","_id":"cjsxaqvv8001lmqfy034l37av"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","category_id":"cjsxaqvv7001imqfy1c56yt00","_id":"cjsxaqvv9001omqfyrsorahmj"},{"post_id":"cjsxaqvuy000umqfytrdcss68","category_id":"cjsxaqvv7001imqfy1c56yt00","_id":"cjsxaqvva001smqfy1ixdp772"},{"post_id":"cjsxaqvv0000wmqfye58rnw64","category_id":"cjsxaqvv9001pmqfym5g5fej7","_id":"cjsxaqvvb001vmqfyq4aaxe8v"},{"post_id":"cjsxcqcnk002rmqfy3kbxyjb8","category_id":"cjsxaqvv7001imqfy1c56yt00","_id":"cjsxcsxlt002tmqfyixti6uwp"},{"post_id":"cjsytbqbs0000rnfysjrf0p0k","category_id":"cjsytcb8l0002rnfyxeoie6sh","_id":"cjsytcb8s0004rnfyn84jnkvr"}],"PostTag":[{"post_id":"cjsxaqvup000emqfy2avmtlry","tag_id":"cjsxaqvun000bmqfygb31lx59","_id":"cjsxaqvus000imqfyyy8vfzs7"},{"post_id":"cjsxaqvup000emqfy2avmtlry","tag_id":"cjsxaqvui0006mqfyymkv3i5t","_id":"cjsxaqvuu000nmqfyjrbxamce"},{"post_id":"cjsxaqvur000hmqfys3bnikto","tag_id":"cjsxaqvui0006mqfyymkv3i5t","_id":"cjsxaqvuu000pmqfy3su4jizz"},{"post_id":"cjsxaqvua0001mqfyq03i632r","tag_id":"cjsxaqvui0006mqfyymkv3i5t","_id":"cjsxaqvuz000vmqfy1lt1mkvt"},{"post_id":"cjsxaqvua0001mqfyq03i632r","tag_id":"cjsxaqvun000bmqfygb31lx59","_id":"cjsxaqvv1000ymqfydo52hq0c"},{"post_id":"cjsxaqvua0001mqfyq03i632r","tag_id":"cjsxaqvuq000gmqfyc2d6pjgi","_id":"cjsxaqvv10012mqfyf9r6eiy9"},{"post_id":"cjsxaqvua0001mqfyq03i632r","tag_id":"cjsxaqvut000mmqfyhwbq0034","_id":"cjsxaqvv20013mqfyus8e2fts"},{"post_id":"cjsxaqvui0007mqfy4zekzm34","tag_id":"cjsxaqvuy000tmqfy063f8smg","_id":"cjsxaqvv30017mqfyd29xuyu5"},{"post_id":"cjsxaqvui0007mqfy4zekzm34","tag_id":"cjsxaqvv10010mqfyyvd2y6yw","_id":"cjsxaqvv40019mqfyc2kqtrph"},{"post_id":"cjsxaqvul0008mqfyoz91z1gx","tag_id":"cjsxaqvv20016mqfy5o2p3r3f","_id":"cjsxaqvv6001fmqfylzoh8qw0"},{"post_id":"cjsxaqvul0008mqfyoz91z1gx","tag_id":"cjsxaqvv4001bmqfyz0pn864w","_id":"cjsxaqvv6001hmqfyw2v2fmn7"},{"post_id":"cjsxaqvum0009mqfyl0m7sq9j","tag_id":"cjsxaqvv5001emqfyj8lsucju","_id":"cjsxaqvv7001kmqfykng9379y"},{"post_id":"cjsxaqvuo000cmqfydms2do5i","tag_id":"cjsxaqvv7001jmqfy9e2y7j28","_id":"cjsxaqvva001rmqfyo1e34ywy"},{"post_id":"cjsxaqvuo000cmqfydms2do5i","tag_id":"cjsxaqvv8001nmqfyfurzhqne","_id":"cjsxaqvva001tmqfy8wf99d58"},{"post_id":"cjsxaqvus000jmqfyyhwtgvcl","tag_id":"cjsxaqvut000mmqfyhwbq0034","_id":"cjsxaqvvb001xmqfy3elu1yye"},{"post_id":"cjsxaqvus000jmqfyyhwtgvcl","tag_id":"cjsxaqvva001umqfyuf2dc2vq","_id":"cjsxaqvvb001ymqfyimxo0xjd"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","tag_id":"cjsxaqvvb001wmqfyya5heb9i","_id":"cjsxaqvvd0024mqfyp8yc3117"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","tag_id":"cjsxaqvvb001zmqfy2mahg6br","_id":"cjsxaqvvd0025mqfyx9swpyh3"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","tag_id":"cjsxaqvvc0020mqfydbirmljh","_id":"cjsxaqvvd0027mqfyok2txjya"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","tag_id":"cjsxaqvvc0021mqfyb06t4cay","_id":"cjsxaqvve0028mqfy40a8h87n"},{"post_id":"cjsxaqvuu000omqfyey5rfnkx","tag_id":"cjsxaqvvc0022mqfyvpyfdwr5","_id":"cjsxaqvve002amqfy57tg1jqt"},{"post_id":"cjsxaqvuv000qmqfy03z4ml76","tag_id":"cjsxaqvv20016mqfy5o2p3r3f","_id":"cjsxaqvvf002dmqfyu88syklu"},{"post_id":"cjsxaqvuv000qmqfy03z4ml76","tag_id":"cjsxaqvvd0026mqfyy5rb3ulh","_id":"cjsxaqvvf002emqfy0za9xl5h"},{"post_id":"cjsxaqvuv000qmqfy03z4ml76","tag_id":"cjsxaqvve0029mqfy10mi38y1","_id":"cjsxaqvvf002gmqfyvz89wd7j"},{"post_id":"cjsxaqvuv000qmqfy03z4ml76","tag_id":"cjsxaqvve002bmqfyk7ku80k2","_id":"cjsxaqvvf002hmqfyp7gm48qe"},{"post_id":"cjsxaqvuy000umqfytrdcss68","tag_id":"cjsxaqvvb001wmqfyya5heb9i","_id":"cjsxaqvvh002lmqfymr54fxg5"},{"post_id":"cjsxaqvuy000umqfytrdcss68","tag_id":"cjsxaqvvf002fmqfyncwncbzv","_id":"cjsxaqvvh002mmqfya6aa94b9"},{"post_id":"cjsxaqvuy000umqfytrdcss68","tag_id":"cjsxaqvvc0020mqfydbirmljh","_id":"cjsxaqvvh002nmqfy0uq25cax"},{"post_id":"cjsxaqvuy000umqfytrdcss68","tag_id":"cjsxaqvvc0021mqfyb06t4cay","_id":"cjsxaqvvh002omqfy8pf9oq52"},{"post_id":"cjsxaqvv0000wmqfye58rnw64","tag_id":"cjsxaqvvg002kmqfy9g84qynh","_id":"cjsxaqvvh002pmqfyww4xpuk2"},{"post_id":"cjsxcqcnk002rmqfy3kbxyjb8","tag_id":"cjsxaqvvc0020mqfydbirmljh","_id":"cjsxcsxlt002smqfyv4awgy84"},{"post_id":"cjsytbqbs0000rnfysjrf0p0k","tag_id":"cjsxaqvv5001emqfyj8lsucju","_id":"cjsytdmkh0005rnfyp58fe0hz"}],"Tag":[{"name":"Hexo","_id":"cjsxaqvui0006mqfyymkv3i5t"},{"name":"Markdown","_id":"cjsxaqvun000bmqfygb31lx59"},{"name":"node.js","_id":"cjsxaqvuq000gmqfyc2d6pjgi"},{"name":"git","_id":"cjsxaqvut000mmqfyhwbq0034"},{"name":"CI","_id":"cjsxaqvuy000tmqfy063f8smg"},{"name":"devops","_id":"cjsxaqvv10010mqfyyvd2y6yw"},{"name":"后端","_id":"cjsxaqvv20016mqfy5o2p3r3f"},{"name":"php","_id":"cjsxaqvv4001bmqfyz0pn864w"},{"name":"algorithms","_id":"cjsxaqvv5001emqfyj8lsucju"},{"name":"code","_id":"cjsxaqvv7001jmqfy9e2y7j28"},{"name":"C++","_id":"cjsxaqvv8001nmqfyfurzhqne"},{"name":"github","_id":"cjsxaqvva001umqfyuf2dc2vq"},{"name":"爬虫","_id":"cjsxaqvvb001wmqfyya5heb9i"},{"name":"linux","_id":"cjsxaqvvb001zmqfy2mahg6br"},{"name":"python","_id":"cjsxaqvvc0020mqfydbirmljh"},{"name":"requests","_id":"cjsxaqvvc0021mqfyb06t4cay"},{"name":"BeautifulSoup","_id":"cjsxaqvvc0022mqfyvpyfdwr5"},{"name":"laradock","_id":"cjsxaqvvd0026mqfyy5rb3ulh"},{"name":"docker","_id":"cjsxaqvve0029mqfy10mi38y1"},{"name":"laravel","_id":"cjsxaqvve002bmqfyk7ku80k2"},{"name":"oj","_id":"cjsxaqvvf002fmqfyncwncbzv"},{"name":"个人日记","_id":"cjsxaqvvg002kmqfy9g84qynh"},{"name":"a","_id":"cjsytcb8k0001rnfytlmseljd"}]}}